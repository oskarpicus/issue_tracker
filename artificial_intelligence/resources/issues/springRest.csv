Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Inward issue link (Depend),Outward issue link (Depend),Inward issue link (Duplicate),Inward issue link (Duplicate),Inward issue link (Duplicate),Inward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Relate),Inward issue link (Relate),Inward issue link (Relate),Inward issue link (Relate),Inward issue link (Relate),Outward issue link (Relate),Outward issue link (Relate),Inward issue link (Supersede),Outward issue link (Supersede),Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Epic Link),Custom field (First Response Date),Custom field (Global Rank),Custom field (Last updater),Custom field (Pull Request URL),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Ranking),Custom field (Reference URL),Custom field (Spring Forum Reference),Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
2.4.0/2.4.1 sprint-boot Rest Repositories initializr project reports lots of Beans is not eligible for getting processed by all BeanPostProcessors,DATAREST-1590,88332,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,ydumais,ydumais,14/Dec/20 2:25 PM,31/Dec/20 10:32 AM,31/Dec/21 2:58 PM,14/Dec/20 6:27 PM,3.4.2 (2020.0.2),,,,3.4.3 (2020.0.3),3.5 M2 (2021.0.0),,,,,,0,,,,,"I just started using Spring Boot and noticed a lot of INFO messages reporting Bean 'X' of type [Y] is not eligible for getting processed by all BeanPostProcessors.

I noticed this behavior when I updated from 2.3.5.RELEASE to 2.4.0.

This repo illustrate the behavior observed : [https://github.com/yohanndumais/demo-data-rest]

created from spring initializr : [https://start.spring.io/...|https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.4.0.RELEASE&packaging=jar&jvmVersion=11&groupId=com.example&artifactId=demo&name=demo&description=Demo%20project%20for%20Spring%20Boot&packageName=com.example.demo&dependencies=data-rest] with only Rest Repositories as a dependencies. 

I created this issue against spring-boot 2.4.0 and is still observable with 2.4.1. 

As I am new to Data Rest and spring-boot, I am concerned that I might encounter spring configuration issues. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-14 18:27:47.005,9223372036854775807,issuemaster(issuemaster),,"0|i0cepj:",9223372036854775807,9223372036854775807,https://github.com/spring-projects/spring-boot/issues/24322,,,,,,,,,,,,,"14/Dec/20 6:27 PM;olivergierke;Thanks for taking the time to report this! That's fixed and will be part of the next service releases.","31/Dec/20 10:32 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1921|https://github.com/spring-projects/spring-data-rest/issues/1921]. ",,,,,,,,,,,,,,,,,,,,,,
@Crossorigin Put Requests to association resources not working anymore,DATAREST-1581,88149,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,pwebb,pwebb,18/Nov/20 11:17 PM,31/Dec/20 10:32 AM,31/Dec/21 2:58 PM,01/Dec/20 10:07 PM,,,,,3.2.12 (Moore SR12),3.3.6 (Neumann SR6),3.4.2 (2020.0.2),3.5 M1 (2021.0.0),,,,0,,,,,"See [https://github.com/spring-projects/spring-boot/issues/22957] for background.

 

DATAREST-1535 makes {{@CrossOrigin}} annotations mandatory for {{PATCH}} and {{PUT}} methods. We've closed the original Boot issue so I'm opening this one to make sure it doesn't get lost.",,,,,,,,,,,,,,,,,DATAREST-1535,,,,,,,,,,,,,,,2020-11-19 16:24:38.799,9223372036854775807,issuemaster(issuemaster),,"0|i0cdkv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"19/Nov/20 4:24 PM;gregturn;Spring Framework 5.3 restricts default allowed methods to GET, HEAD, and POST. This means that PUT, PATCH, and any other methods previously supported must be deliberately activated.

You can see these changes applied in https://github.com/spring-projects/spring-data-rest/commit/a9576991fef7d6236715f4e1ed0856858c7750cc.","19/Nov/20 4:27 PM;gregturn;If you need to alter Cross Origin settings in your Spring Data REST application, CorsIntegrationTests provides the perfect example:

{code}
@Bean
RepositoryRestConfigurer repositoryRestConfigurer() {

	return RepositoryRestConfigurer.withConfig((config, cors) -> {

		cors.addMapping(""/books/**"") //
				.allowedMethods(""GET"", ""PUT"", ""POST"") //
				.allowedOrigins(""http://far.far.example"");
	});
}
{code}

This example tweaks the allowed methods to include PUT and sets what origins are allowed, all mapped to the relevant path.","19/Nov/20 4:37 PM;pwebb;Did you see the note about the Javadoc? [https://github.com/spring-projects/spring-boot/issues/22957#issuecomment-724649999]

 

Does it need to be updated?","19/Nov/20 5:04 PM;gregturn;If so, sounds like a Spring Framework issue. 

We do nothing custom but instead invoke Spring Web's CorsConfiguration.applyPermitDefaultValues.","19/Nov/20 5:28 PM;olivergierke;But shouldn't we assume different defaults given the fact that we know we want to support these additional HTTP methods on resources we expose?","20/Nov/20 5:00 PM;gregturn;I've investigated how to apply this but can't seem to see hows CorsIntegrationTest (spring-data-tests-jpa) has:

{code}
@Bean
RepositoryRestConfigurer repositoryRestConfigurer() {

	return RepositoryRestConfigurer.withConfig((config, cors) -> {

		cors.addMapping(""/books/**"") //
				.allowedMethods(""GET"", ""PUT"", ""POST"") //
				.allowedOrigins(""http://far.far.example"");
	});
}
{code}

When I update RepostoryRestMvcConfig with this:

{code}
@Bean
public <T extends RepositoryRestConfiguration & CorsConfigurationAware> T repositoryRestConfiguration() {

	ProjectionDefinitionConfiguration configuration = new ProjectionDefinitionConfiguration();

	// Register projections found in packages
	for (Class<?> projection : getProjections(repositories.get())) {
		configuration.addProjection(projection);
	}

	RepositoryCorsRegistry registry = new RepositoryCorsRegistry();

	WebMvcRepositoryRestConfiguration config = new WebMvcRepositoryRestConfiguration(configuration,
			new MetadataConfiguration(), new EnumTranslator(MessageResolver.DEFAULTS_ONLY), registry);

	registry //
			.addMapping(baseUri.or(new BaseUri(""/"")).toString()) //
			.allowedMethods(""GET"", ""PUT"", ""POST"");

	configurerDelegate.get().configureRepositoryRestConfiguration(config, registry);

	return (T) config;
}
{code}
...and comment out allowed methods, the test case still fails. So I have (yet) to figure out how to tweak the settings to plug in a different set of allowed methods.","01/Dec/20 10:07 PM;olivergierke;This should be in place. I've reinstated more extensive default allowed HTTP methods that were accidentally removed in the fix for DATAREST-1535.","31/Dec/20 10:32 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1940|https://github.com/spring-projects/spring-data-rest/issues/1940]. ",,,,,,,,,,,,,,,,
All the repositories start to respond 404 after some period of time (10-12 hours),DATAREST-1518,86595,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Duplicate,olivergierke,abinet,abinet,02/May/20 12:55 PM,31/Dec/20 10:32 AM,31/Dec/21 2:58 PM,02/May/20 1:59 PM,,,,,,,,,,,,0,,,,,"Consider the SpringBoot application with multiple SpringDataRest repositories. Since the migration to Spring Boot 2.2.6.RELEASE (and accordingly Spring Data REST 3.2.6-RELEASE) we have an issue with application starting to respond 404 on all the repository requests after some undetermined period of time (10-12 hours). 
 Remote debug shows, this happens because cache field of the class PersistentEntitiesResourceMappings does not return any values and therefore RepositoryRestHandlerMapping.exportsTopLevelResourceFor() method returns false. This results to 404 error.
 Restarting the application helps and then cache field gets properly initialized but after some period of time same issue occurs again.
 
 Do you have any ideas why PersistentEntitiesResourceMappings.cache can loose values?

 

 

 ",Ubuntu 19.4,,,,,,,,,,,,,,,DATAREST-1502,,,,,,,,,,,,,,,,2020-05-02 13:58:24.487,9223372036854775807,issuemaster(issuemaster),,"0|i0c5qv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02/May/20 1:58 PM;olivergierke;I think you’re running into DATAREST-1502 which has already been released with Spring Data REST 3.2.7. Until a Spring Boot Release containing that version out of the box has been shipped, you should be able to upgrade to that Spring Data Version by setting the {{spring-data-releasetrain.version}} property to {{Moore-SR7}}.","02/May/20 2:26 PM;abinet;Thank you for pointing out, [~olivergierke]. Will upgrade and report the results. ","31/Dec/20 10:32 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1875|https://github.com/spring-projects/spring-data-rest/issues/1875]. ",,,,,,,,,,,,,,,,,,,,,
Accidental cache evictions in PersistentEntitiesResourceMappings,DATAREST-1506,86370,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,alienisty,alienisty,08/Apr/20 4:33 PM,31/Dec/20 10:32 AM,31/Dec/21 2:58 PM,08/Apr/20 7:58 PM,3.2.6 (Moore SR6),,,,3.2.7 (Moore SR7),,,,Repositories,,,0,,,,,"PersistentEntitiesResourceMappings uses a ConcurrentReferenceHashMap as a cache for mapped ResourceMetadata. Such map uses Soft references and therefore the can be garbage collected when under limited memory. Even if getMetadataFor() uses a lazy repopulation style, which is fine for such caches, the iterator() method, used by exportsTopLevelResourceFor() uses a copy of the cache, as it is, to select the candidates, but they might be gone because of garbage collection and the method doesn't try (and cannot) rebuild the information.
 The *cache* field should just be a ConcurrentHashMap to avoid losing mapping at runtime, which they might initially work and then suddenly stop working, without any trace or exception.",Windows 10 with java 11,,,,,,,,,,,,,,,DATAREST-1502,,,,,,,,,,,,,,,,2020-04-08 19:58:25.385,9223372036854775807,issuemaster(issuemaster),,"0|i0c4q7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"08/Apr/20 7:58 PM;olivergierke;[~mp911de] already fixed this in DATAREST-1502. Thanks for taking the time to report that though. Feel free to give the snapshots a try!","31/Dec/20 10:32 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1864|https://github.com/spring-projects/spring-data-rest/issues/1864]. ",,,,,,,,,,,,,,,,,,,,,,
In case of low memory after GC all repository mappings are removed and 404 is returned,DATAREST-1505,86369,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,iwan41,iwan41,08/Apr/20 3:37 PM,31/Dec/20 10:32 AM,31/Dec/21 2:58 PM,09/Apr/20 10:57 AM,,,,,,,,,,,,0,,,,,"When an application with Spring Data Rest will be low on memory repository mappings will be cleared and never recreated. It will cause 404 on every data rest endpoint.

 

To reproduce:
 # Start app
 # Consume memory, but not too much (before Out of memory exception)
 # Observe when 404 will start to appear

PersistentEntitiesResourceMappings have a cache with ConcurrentReferenceHashMap with Soft References as default. 

If GC will run out of memory those refs will be cleared without any notice and never recreated (until restart).

 

I think it is better to have in this place Out Of Memory exception than have disappearing endpoints and still working app. 

 

Please see the sample project with fixed 64MB xmx.

https://github.com/iwan41/spring-data-rest-gc-problem",,,,,,,,,,,,,,,,DATAREST-1502,,,,,,,,,,,,,,,,2020-04-08 20:13:33.539,9223372036854775807,issuemaster(issuemaster),,"0|i0c4pz:",9223372036854775807,9223372036854775807,https://github.com/iwan41/spring-data-rest-gc-problem,,,,,,,,,,,,,"08/Apr/20 8:13 PM;olivergierke;Suspiciously sounds like DATAREST-1502 which has already been fixed. Would you mind trying the latest snapshots?","09/Apr/20 6:24 AM;iwan41;Hi [~olivergierke], with snapshot version works perfectly. Instead of evicting values, it keeps them until Out of memory exception.","09/Apr/20 10:57 AM;olivergierke;Am I correct in reading this as a good thing? OOME sounds rather bad, too?","09/Apr/20 11:42 AM;iwan41;Yes, this is a good thing. At this moment when memory is low, spring data rest endpoints return 404 but app health check returns ok and no errors are being logged. 

It is much better to know that you are low on memory (OOME) than suddenly loose spring data rest endpoints without knowing it.","31/Dec/20 10:32 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1863|https://github.com/spring-projects/spring-data-rest/issues/1863]. ",,,,,,,,,,,,,,,,,,,
Use ConcurrentHashMap in PersistentEntitiesResourceMappings instead of ConcurrentReferenceHashMap,DATAREST-1502,86342,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Critical,Fixed,mp911de,mp911de,mp911de,02/Apr/20 1:13 PM,31/Dec/20 10:32 AM,31/Dec/21 2:58 PM,02/Apr/20 1:36 PM,3.2.6 (Moore SR6),3.3 RC1 (Neumann),,,3.2.7 (Moore SR7),3.3 RC2 (Neumann),,,,,,0,,,,,,,,,,,,,,,,,DATAREST-1262,DATAREST-1518,DATAREST-1505,DATAREST-1506,,,,,,,DATAREST-1489,,,,,,,,,,2020-04-07 20:11:56.908,9223372036854775807,issuemaster(issuemaster),,"0|i0c4jz:",9223372036854775807,9223372036854775807,,,Neumann RC1,,,,,,,,,,,"02/Apr/20 1:28 PM;mp911de;The underlying cause is that {{PersistentEntitiesResourceMappings.exportsTopLevelResourceFor}} iterates over the {{cache}}. {{ConcurrentReferenceHashMap}} evicts both, keys and values. Since iteration over the value set does not trigger any lazy computation, {{exportsTopLevelResourceFor}} returns always false. We should switch to {{ConcurrentHashMap}} to avoid this effect and avoid re-computation of paths since repositories/entity types cannot be removed during runtime.","07/Apr/20 8:11 PM;mle-enso;So good to hear this solution, Mark! This issue kept my team and me busy for the last 4 days since we've upgraded to Boot 2.2.6 and we were really racked with self-doubt due to the intermittent behavior of DATAREST-1489.
Glad you could solve this that fast. Keep up this excellent work!","15/Apr/20 10:27 AM;edouardhue;We stumbled on this issue too after upgrading from Spring Boot 2.2.4 to 2.2.6. We are rolling back waiting for SDR 3.2.7. Is there already a date for the release ?","31/Dec/20 10:32 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1860|https://github.com/spring-projects/spring-data-rest/issues/1860]. ",,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException in PersistentEntitiesResourceMappings.java,DATAREST-1496,86232,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,ptahchiev,ptahchiev,18/Mar/20 1:20 PM,31/Dec/20 10:32 AM,31/Dec/21 2:58 PM,18/Mar/20 1:26 PM,,,,,,,,,,,,0,,,,,"Similar to DATAREST-1460, I get this:
{code}
 2020-03-18 15:11:56,794 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/storefront].[dispatcherServlet] [https-jsse-nio-127.0.0.1-8112-exec-5] ERROR: Servlet.service() for servlet [dispatcherServlet] in context with path [/storefront] threw exception [Request processing failed; nested exception is java.util.ConcurrentModificationException] with root cause
java.util.ConcurrentModificationException
	at java.base/java.util.HashMap.computeIfAbsent(HashMap.java:1134)
	at org.springframework.data.rest.core.mapping.PersistentEntitiesResourceMappings.getMappingFor(PersistentEntitiesResourceMappings.java:146)
	at org.springframework.data.rest.core.mapping.PersistentEntitiesResourceMappings.isMapped(PersistentEntitiesResourceMappings.java:151)
	at org.springframework.data.rest.core.mapping.RepositoryResourceMappings.isMapped(RepositoryResourceMappings.java:148)
	at org.springframework.data.rest.core.mapping.RepositoryAwareResourceMetadata.isExported(RepositoryAwareResourceMetadata.java:118)
	at org.springframework.data.rest.webmvc.mapping.Associations.isLinkableAssociation(Associations.java:142)
	at org.springframework.data.rest.webmvc.EmbeddedResourcesAssembler.lambda$getEmbeddedResources$0(EmbeddedResourcesAssembler.java:70)
	at org.springframework.data.mapping.model.BasicPersistentEntity.doWithAssociations(BasicPersistentEntity.java:393)
	at org.springframework.data.rest.webmvc.EmbeddedResourcesAssembler.getEmbeddedResources(EmbeddedResourcesAssembler.java:66)
	at org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler.getEmbeddedResources(PersistentEntityResourceAssembler.java:88)
	at org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler.wrap(PersistentEntityResourceAssembler.java:75)
	at org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler.toModel(PersistentEntityResourceAssembler.java:55)
	at org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler.toModel(PersistentEntityResourceAssembler.java:38)
	at org.springframework.data.web.PagedResourcesAssembler.createModel(PagedResourcesAssembler.java:211)
	at org.springframework.data.web.PagedResourcesAssembler.toModel(PagedResourcesAssembler.java:123)
	at org.springframework.data.rest.webmvc.AbstractRepositoryRestController.lambda$entitiesToResources$3(AbstractRepositoryRestController.java:97)
	at java.base/java.util.Optional.orElseGet(Optional.java:369)

{code}

when invoking some REST urls. My setup is:
 - spring-boot: 2.2.5.RELEASE
 - spring-data-release-train: Moore-SR5
 - Java 11",,,,,,,,,,,,,,,,DATAREST-1489,,,,,,,,,,,,,,,,2020-12-31 10:32:03.912,9223372036854775807,issuemaster(issuemaster),,"0|i0c3vr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Dec/20 10:32 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1854|https://github.com/spring-projects/spring-data-rest/issues/1854]. ",,,,,,,,,,,,,,,,,,,,,,,
Related entity rendered differently depending on JPA fetch type,DATAREST-1494,86214,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Invalid,olivergierke,jvanheesch,jvanheesch,12/Mar/20 9:34 PM,31/Dec/20 10:32 AM,31/Dec/21 2:58 PM,17/Aug/20 6:32 PM,,,,,,,,,,,,1,,,,,"Please see reference url for quick reproducer.

On branch {{master}}: {{curl [http://localhost:8080/books/]}} results in
{noformat}
{
  ""timestamp"": ""2020-03-12T20:48:22.082+0000"",
  ""status"": 500,
  ""error"": ""Internal Server Error"",
  ""message"": ""Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: org.springframework.hateoas.CollectionModel[\""_embedded\""]->java.util.Collections$UnmodifiableMap[\""books\""]->java.util.ArrayList[0]->org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$PersistentEntityResourceSerializer$1[\""content\""]->com.github.jvanheesch.Book[\""author\""]->org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$PersistentEntityResourceSerializer$1[\""content\""]->com.github.jvanheesch.Author$HibernateProxy$Co1jR6qK[\""hibernateLazyInitializer\""])"",
  ""path"": ""/books/""
}
{noformat}
For us this is currently non-blocking, as we use the following workaround:
{code:java}
@Bean
public ObjectMapper objectMapper(Jackson2ObjectMapperBuilder builder) {
    ObjectMapper objectMapper = builder.build();
    objectMapper.addMixIn(Object.class, IgnoreHibernatePropertiesInJackson.class);
    return objectMapper;
}

// https://stackoverflow.com/a/44152216/1939921
@JsonIgnoreProperties({""hibernateLazyInitializer""})
private static class IgnoreHibernatePropertiesInJackson {
}
{code}
This issue seems very similar to https://jira.spring.io/browse/DATAREST-1442, although
{quote}With FetchType.EAGER serialization does not fail but resulting JSON does contain unnecessary ""_embedded"" section.
{quote}
seems not to apply here.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-03-12 23:30:31.694,9223372036854775807,issuemaster(issuemaster),,"0|i0c3rr:",9223372036854775807,9223372036854775807,https://github.com/jvanheesch/spring-data-rest-bytebuddyinterceptor,,,,,,,,,,,,,"12/Mar/20 11:30 PM;olivergierke;We cannot control the serialization of object instances produced by Hibernate but AFAIR, the [Jackson Hibernate module|https://github.com/FasterXML/jackson-datatype-hibernate] should make work proxies OOTB. Are you using that?","13/Mar/20 8:57 AM;jvanheesch;I was not.
 I added the {{com.fasterxml.jackson.datatype:jackson-datatype-hibernate5}} dependency and did nothing else (e.g. I did not register the {{Hibernate5Module}} myself), and I no longer have errors!
 However, I stumbled upon another issue.
 {{curl [http://localhost:8080/books/1]}} now returns
{noformat}
{
  ""title"": ""Spring Data REST Reference Guide"",
  ""author"": {
    ""content"": {
      ""name"": ""Jon Brisbin""
    }
  },
  ""_links"": {
    ""self"": {
      ""href"": ""http://localhost:8080/books/1""
    },
    ""book"": {
      ""href"": ""http://localhost:8080/books/1""
    }
  }
}
{noformat}
If I change the {{FetchType}} from {{LAZY}} to {{EAGER}}, I get:
{noformat}
{
  ""title"": ""Spring Data REST Reference Guide"",
  ""author"": {
    ""name"": ""Jon Brisbin""
  },
  ""_links"": {
    ""self"": {
      ""href"": ""http://localhost:8080/books/1""
    },
    ""book"": {
      ""href"": ""http://localhost:8080/books/1""
    }
  }
}
{noformat}
Notice that in the first case, author has a {{content}} property (EntityModel), while in the second case, it doesn't (i.e. the {{content}} property is unwrapped).
 I assume this behavior should not depend on the {{FetchType}}.","09/Apr/20 11:54 AM;olivergierke;Are you able to produce a minimal reproducing project so that I can investigate?","09/Apr/20 12:24 PM;jvanheesch;I had made such project, but apparently I forgot to link it.
 Reference URL is now updated (https://github.com/jvanheesch/spring-data-rest-bytebuddyinterceptor).
 If you GET {{[http://localhost:8080/books/1]}}, you should see the following:
{code}
{
  ""title"": ""Spring Data REST Reference Guide"",
  ""author"": {
    ""content"": {
      ""name"": ""Jon Brisbin""
    }
  },
  ""_links"": {
    ""self"": {
      ""href"": ""http://localhost:8080/books/1""
    },
    ""book"": {
      ""href"": ""http://localhost:8080/books/1""
    }
  }
}
{code}
If in class {{Book}} you change the {{FetchType}} of {{author}} from {{FetchType.LAZY}} to {{EAGER}} and restart the application, GET {{[http://localhost:8080/books/1]}} will return following:
{code}
{
  ""title"": ""Spring Data REST Reference Guide"",
  ""author"": {
    ""name"": ""Jon Brisbin""
  },
  ""_links"": {
    ""self"": {
      ""href"": ""http://localhost:8080/books/1""
    },
    ""book"": {
      ""href"": ""http://localhost:8080/books/1""
    }
  }
}
{code}","09/Apr/20 3:27 PM;olivergierke;Unfortunately this seems to be [an issue|https://github.com/FasterXML/jackson-datatype-hibernate/issues/97] in Jackson's Hibernate 5 module. Whether to unwrap or not involves a lookup in the target serializer which the {{HibernateProxySerializer}} doesn't answer accordingly. I'Ve commented on the other ticket to see whether we can get this fixed.

In general I think the fundamental problem shouldn't be that ubiquitous as entities internal to the aggregate (i.e. references to other non-aggregate) should be mapped to eagerly load by default. There's simply no point in delaying the loading as Jackson will need them to render them anyway.","13/Apr/20 3:51 PM;jvanheesch;Thank you for proposing a fix for that issue!
{quote}There's simply no point in delaying the loading as Jackson will need them to render them anyway.{quote}
When using projections, Jackson may not need the {{author}} property.
In that case, {{FetchType.LAZY}} avoids the join of {{Book}} with the {{Author}} table.","16/Aug/20 12:01 PM;jvanheesch;The bug in Jackson's Hibernate 5 module has been fixed (com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:jar:2.11.2).
This fix is included when upgrading to spring-boot-starter-parent:2.3.3.RELEASE, so this issue may be closed.","17/Aug/20 6:32 PM;olivergierke;Resolving as suggested as it's fixed in an upstream project.","31/Dec/20 10:32 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1813|https://github.com/spring-projects/spring-data-rest/issues/1813]. ",,,,,,,,,,,,,,,
ConcurrentModificationException in PersistentEntitiesResourceMappings.getMappingFor(…),DATAREST-1489,86124,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,darioseidl,darioseidl,09/Mar/20 10:36 PM,31/Dec/20 10:32 AM,31/Dec/21 2:58 PM,12/Mar/20 1:47 PM,3.2.5 (Moore SR5),3.3 M4 (Neumann),,,3.2.6 (Moore SR6),3.3 RC1 (Neumann),,,,,,0,,,,,"We suddenly started to get ConcurrentNotificationExceptions in exported Spring Data Rest findBy-Query methods.

I know this isn't very helpful, but I don't know what has changed on our end to trigger these all of a sudden. Anyway this still seems to be a bug in Spring Data. We are using Spring Boot 2.2.4, Spring Data Moore SR4.
{code:java}
java.util.ConcurrentModificationException: null
 at java.base/java.util.HashMap.computeIfAbsent(HashMap.java:1134)
 at org.springframework.data.rest.core.mapping.PersistentEntitiesResourceMappings.getMappingFor(PersistentEntitiesResourceMappings.java:146)
 at org.springframework.data.rest.core.mapping.PersistentEntitiesResourceMappings.isMapped(PersistentEntitiesResourceMappings.java:151)
 at org.springframework.data.rest.core.mapping.RepositoryResourceMappings.isMapped(RepositoryResourceMappings.java:148)
 at org.springframework.data.rest.core.mapping.RepositoryAwareResourceMetadata.isExported(RepositoryAwareResourceMetadata.java:118)
 at org.springframework.data.rest.webmvc.mapping.Associations.isLinkableAssociation(Associations.java:142)
 at org.springframework.data.rest.webmvc.EmbeddedResourcesAssembler.lambda$getEmbeddedResources$0(EmbeddedResourcesAssembler.java:70)
 at org.springframework.data.mapping.model.BasicPersistentEntity.doWithAssociations(BasicPersistentEntity.java:395)
 at org.springframework.data.rest.webmvc.EmbeddedResourcesAssembler.getEmbeddedResources(EmbeddedResourcesAssembler.java:66)
 at org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler.getEmbeddedResources(PersistentEntityResourceAssembler.java:88)
 at org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler.wrap(PersistentEntityResourceAssembler.java:75)
 at org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler.toModel(PersistentEntityResourceAssembler.java:55)
 at org.springframework.data.rest.webmvc.AbstractRepositoryRestController.entitiesToResources(AbstractRepositoryRestController.java:112)
 at org.springframework.data.rest.webmvc.AbstractRepositoryRestController.toCollectionModel(AbstractRepositoryRestController.java:82)
 at org.springframework.data.rest.webmvc.RepositorySearchController.lambda$toModel$1(RepositorySearchController.java:206)
 at java.base/java.util.Optional.map(Optional.java:265)
 at org.springframework.data.rest.webmvc.RepositorySearchController.toModel(RepositorySearchController.java:203)
 at org.springframework.data.rest.webmvc.RepositorySearchController.executeSearch(RepositorySearchController.java:187)
 at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.base/java.lang.reflect.Method.invoke(Method.java:566)
 at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
 at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
 at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
 at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
 at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
 at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
 at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
 at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
 at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
 at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
 at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
 at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
 at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
 at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
 at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
 at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
 at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
 at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
 at org.springframework.web.filter.ForwardedHeaderFilter.doFilterInternal(ForwardedHeaderFilter.java:158)
 at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
 at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
 at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
 at at.rechnerherz.busangebot.config.logback.MDCFilter.doFilter(MDCFilter.kt:32)
 at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
 at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
 at net.bull.javamelody.MonitoringFilter.doFilter(MonitoringFilter.java:239)
 at net.bull.javamelody.MonitoringFilter.doFilter(MonitoringFilter.java:215)
 at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
 at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
 at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
 at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
 at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
 at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
 at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
 at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
 at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
 at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
 at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
 at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
 at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
 at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
 at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
 at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
 at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
 at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
 at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
 at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
 at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:117)
 at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
 at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
 at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)
 at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
 at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
 at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
 at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
 at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
 at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
 at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
 at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
 at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
 at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
 at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
 at org.springframework.security.web.access.channel.ChannelProcessingFilter.doFilter(ChannelProcessingFilter.java:157)
 at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
 at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
 at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
 at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
 at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
 at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
 at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
 at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
 at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
 at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
 at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
 at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
 at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
 at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
 at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
 at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:108)
 at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
 at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
 at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
 at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
 at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
 at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
 at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
 at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
 at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
 at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
 at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
 at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
 at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
 at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:747)
 at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
 at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
 at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
 at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
 at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
 at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
 at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
 at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
 at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
 at java.base/java.lang.Thread.run(Thread.java:834){code}
This is similar to DATAREST-1460 which has already been fixed in Spring Data Moore SR4. For that fix, the `cache` and `mappingCache` where changed to thread-safe collections. But the `propertyCache` is still using a non-thread-safe `HashMap` and the `propertyCache` is the one that is accessed in `PersistentEntitiesResourceMappings.getMappingFor`.",,,,,,,,,,,,DATAREST-1496,,,,,DATAREST-1502,,,,,,,,,,,,,,,2020-03-09 22:42:31.401,9223372036854775807,issuemaster(issuemaster),,"0|i0c3k7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"09/Mar/20 10:42 PM;olivergierke;Thanks for reporting this. That's an oversight in the fix for DATAREST-1460. Will be fixed ASAP.","12/Mar/20 2:56 PM;darioseidl;Great, thank you.","02/Apr/20 12:40 PM;darioseidl;Is it possible that this fix had some unintended side-effects?

We updated two of our projects to Spring Boot 2.2.6 and after running fine for a while (about a whole day), we are getting 404s for all Data REST endpoints (`org.springframework.web.servlet.PageNotFound No mapping for GET /tomcat/api/bus-companies`, etc.). The HAL browser and the `org.springframework.data.rest.webmvc.ProfileController` show no mappings anymore either. `/tomcat/api/profile` just return the link to self, but no mappings:
{code:java}
{
 ""_links"" : {
 ""self"" : {
 ""href"" : ""<...>/tomcat/api/profile""
 }
 }
}{code}
I looked through the relevant release notes of Spring Boot 2.2.6 and didn't find anything else that could be causing this, and since this class is responsible for the REST resource mappings I suspect it has something to do with this or DATAREST-1460.

Any idea how to debug this further?","02/Apr/20 1:12 PM;mp911de;That's our bad, we used {{ConcurrentReferenceHashMap}} instead of {{ConcurrentHashMap}} which evicts items given sufficient GC pressure/GC runs.","02/Apr/20 1:14 PM;mp911de;We're going to fix the issue with DATAREST-1502. Sorry for the inconvenience.","02/Apr/20 1:59 PM;darioseidl;OK, thanks for the quick response.","31/Dec/20 10:32 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1848|https://github.com/spring-projects/spring-data-rest/issues/1848]. ",,,,,,,,,,,,,,,,,
CI tests need to run integration tests,DATAREST-1480,85978,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,11/Feb/20 10:47 PM,31/Dec/20 10:32 AM,31/Dec/21 2:58 PM,11/Feb/20 10:56 PM,3.1.15 (Lovelace SR15),3.2.4 (Moore SR4),3.3 M2 (Neumann),,3.1.16 (Lovelace SR16),3.2.5 (Moore SR5),3.3 M3 (Neumann),,Infrastructure,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:32:01.94,9223372036854775807,issuemaster(issuemaster),,"0|i0c2nz:",9223372036854775807,9223372036854775807,,,Neumann M3,,,,,,,,,,,"31/Dec/20 10:32 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1840|https://github.com/spring-projects/spring-data-rest/issues/1840]. ",,,,,,,,,,,,,,,,,,,,,,,
Patch does not work when Lists occur somewhere in path and not at root,DATAREST-1479,85921,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,imaykay,imaykay,29/Jan/20 2:00 PM,31/Dec/20 10:32 AM,31/Dec/21 2:58 PM,27/Apr/20 9:53 PM,3.2.4 (Moore SR4),3.3 M3 (Neumann),,,3.1.17 (Lovelace SR17),3.2.7 (Moore SR7),3.3 RC2 (Neumann),,,,,0,,,,,"It seems to me that JsonPatch implementation in spring-data-rest-webmvc fails with an exception if the path contains a list but does not start with a list. See attached test cases for examples (first succeeds, second and third fail).

Since I am no Spring expert I did only some debugging but it might be that {code:java}org.springframework.data.rest.webmvc.json.patch.SpelPath.TypedSpelPath.SpelExpressionBuilder.nested(String){code} should determine the new type of the next segment.

There seem to be no issues if the path has the form {code}/list/index/anotherlist/anotherindex/value{code}",,,,,,,,,,,,,,,,,,,,,,,,,,"29/Jan/20 1:57 PM;imaykay;test.patch;https://jira.spring.io/secure/attachment/27691/test.patch",,,,,,2020-04-27 10:17:04.001,9223372036854775807,issuemaster(issuemaster),,"0|i0c2bz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"27/Apr/20 10:17 AM;kkonrad;I think I'm affected by the same problem in version *3.3.0.RC1*. In my case when I have wrapper class for objects that contain list it fails to operate on this list. Sample test that shows issue (in context of: spring-data-rest-webmvc/src/test/java/org/springframework/data/rest/webmvc/json/patch/AddOperationUnitTests.java) :
{code:java}
	@Test
	public void testInWrappersOperation() {
		List<Todo> todos = new ArrayList<>();
		todos.add(new Todo(1L, ""A"", false));
		todos.add(new Todo(2L, ""B"", false));

		TodoList todoList = new TodoList();
		todoList.setTodos(todos);
		TodoListWrapper outer = new TodoListWrapper(todoList);

		Todo newTodo = new Todo(3L, ""C"", false);
		AddOperation.of(""/todoList/todos/-"", newTodo).perform(outer, TodoListWrapper.class);

		assertThat(outer.todoList.getTodos()).containsExactly(todos.get(0), todos.get(1), newTodo);

	}
	@Data
	@AllArgsConstructor
	@NoArgsConstructor
	public static class TodoListWrapper {
		public TodoList todoList;
	}
{code}
It fails with:
{noformat}
org.springframework.data.rest.webmvc.json.patch.PatchException: Invalid path reference - on type class org.springframework.data.rest.webmvc.json.patch.AddOperationUnitTests$TodoListWrapper!

	at org.springframework.data.rest.webmvc.json.patch.SpelPath$TypedSpelPath$SpelExpressionBuilder.nested(SpelPath.java:534)
	at org.springframework.data.rest.webmvc.json.patch.SpelPath$TypedSpelPath$SpelExpressionBuilder.next(SpelPath.java:571)
	at org.springframework.data.rest.webmvc.json.patch.SpelPath$TypedSpelPath.lambda$nextOrCreate$9(SpelPath.java:486)
	at java.base/java.util.Optional.map(Optional.java:265)
	at org.springframework.data.rest.webmvc.json.patch.SpelPath$TypedSpelPath.nextOrCreate(SpelPath.java:486)
	at org.springframework.data.rest.webmvc.json.patch.SpelPath$TypedSpelPath.lambda$toSpel$6(SpelPath.java:474)
	at java.base/java.util.stream.ReduceOps$1ReducingSink.accept(ReduceOps.java:80)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:563)
	at org.springframework.data.rest.webmvc.json.patch.SpelPath$TypedSpelPath.toSpel(SpelPath.java:473)
	at org.springframework.data.rest.webmvc.json.patch.SpelPath$TypedSpelPath.<init>(SpelPath.java:178)
	at org.springframework.data.rest.webmvc.json.patch.SpelPath$TypedSpelPath.lambda$of$0(SpelPath.java:193)
	at java.base/java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:330)
	at org.springframework.data.rest.webmvc.json.patch.SpelPath$TypedSpelPath.of(SpelPath.java:193)
	at org.springframework.data.rest.webmvc.json.patch.SpelPath$UntypedSpelPath.bindTo(SpelPath.java:147)
	at org.springframework.data.rest.webmvc.json.patch.AddOperation.perform(AddOperation.java:49)
	at org.springframework.data.rest.webmvc.json.patch.AddOperationUnitTests.testInWrappersOperation(AddOperationUnitTests.java:155)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
Caused by: org.springframework.data.mapping.PropertyReferenceException: No property - found for type Todo! Did you mean 'id'? Traversed path: TodoListWrapper.todoList.todos.
	at org.springframework.data.mapping.PropertyPath.<init>(PropertyPath.java:94)
	at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:382)
	at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:358)
	at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:342)
	at org.springframework.data.mapping.PropertyPath.lambda$from$0(PropertyPath.java:314)
	at java.base/java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:330)
	at org.springframework.data.mapping.PropertyPath.from(PropertyPath.java:293)
	at org.springframework.data.mapping.PropertyPath.nested(PropertyPath.java:214)
	at org.springframework.data.rest.webmvc.json.patch.SpelPath$TypedSpelPath$SpelExpressionBuilder.nested(SpelPath.java:529)
	... 43 more
{noformat}","27/Apr/20 9:53 PM;olivergierke;That's fixed and backported.","31/Dec/20 10:32 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1806|https://github.com/spring-projects/spring-data-rest/issues/1806]. ",,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException in PersistentEntitiesResourceMappings,DATAREST-1460,85604,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,ptahchiev,ptahchiev,04/Dec/19 10:54 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,09/Dec/19 5:07 PM,3.2.3 (Moore SR3),,,,3.2.4 (Moore SR4),3.3 M1 (Neumann),,,,,,0,,,,,"Spring boot 2.2.0.RELEASE
Spring data rest 3.2.0.RELEASE
HTTP2 enabled

{code}
2019-12-04 12:46:28,113 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/storefront].[dispatcherServlet] [https-jsse-nio-127.0.0.1-8112-exec-11] ERROR: Servlet.service() for servlet [dispatcherServlet] in context with path [/storefront] threw exception [Request processing failed; nested exception is java.util.ConcurrentModificationException] with root cause
java.util.ConcurrentModificationException
	at java.base/java.util.HashMap$HashIterator.nextNode(HashMap.java:1493)
	at java.base/java.util.HashMap$ValueIterator.next(HashMap.java:1521)
	at org.springframework.data.rest.core.mapping.PersistentEntitiesResourceMappings.iterator(PersistentEntitiesResourceMappings.java:192)
	at java.base/java.lang.Iterable.spliterator(Iterable.java:101)
	at org.springframework.data.util.Streamable.stream(Streamable.java:87)
	at org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping$RepositoryCorsConfigurationAccessor.getResourceMetadata(RepositoryRestHandlerMapping.java:328)
	at org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping$RepositoryCorsConfigurationAccessor.findCorsConfiguration(RepositoryRestHandlerMapping.java:316)
	at org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.lambda$getCorsConfiguration$2(RepositoryRestHandlerMapping.java:234)
	at java.base/java.util.Optional.flatMap(Optional.java:294)
	at org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.getCorsConfiguration(RepositoryRestHandlerMapping.java:234)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:417)
	at org.springframework.data.rest.webmvc.support.DelegatingHandlerMapping$HandlerSelectionResult.from(DelegatingHandlerMapping.java:109)
	at org.springframework.data.rest.webmvc.support.DelegatingHandlerMapping.getHandler(DelegatingHandlerMapping.java:75)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:31:59.96,9223372036854775807,issuemaster(issuemaster),,"0|i0c0hr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1821|https://github.com/spring-projects/spring-data-rest/issues/1821]. ",,,,,,,,,,,,,,,,,,,,,,,
Must send only 1 link to update a property reference that isn't a List or a Map,DATAREST-1447,85295,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Duplicate,olivergierke,blured75,blured75,29/Oct/19 10:53 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,30/Oct/19 11:48 AM,,,,,,,,,API Documentation,,,0,,,,,"Hi,

There seems to be a bug or a change in the data rest api between 2.1.10.BUILD-SNAPSHOT and 2.2.0.RELEASE

[https://github.com/spring-projects/spring-boot/issues/18776] 

Following this tutorial [https://www.baeldung.com/spring-data-rest-relationships] I'm trying to reproduce the link creation onetoone between 2 entities with a rest put call.

However I've got the following error message when I try to link addresses/1 & libraries/1/libraryAddress curl -i -X PUT -d ""[http://localhost:8080/addresses/1]"" -H ""Content-Type:text/uri-list"" [http://localhost:8080/libraries/1/libraryAddress]

""Must send only 1 link to update a property reference that isn't a List or a Map""

It happens also with trying to update OneToMany relations.

It's working correctly with spring-boot 2.1.10.BUILD-SNAPSHOT but not 2.2.0.RELEASE

Is there a new way to generate the association with the 2.2.0.RELEASE ? Or is it a bug ?

Original question posted to stackoverflow : [https://stackoverflow.com/questions/58601905/create-relation-link-one-to-one-between-2-entities-using-spring-data-rest?noredirect=1#comment103517712_58601905]

Regards,
Denis.

 

PS : hope this is the right place to post those kind of bug",,,,,,,,,,,,,,,,DATAREST-1356,,,,,,,,,,,,,,,,2020-12-31 10:31:58.557,9223372036854775807,issuemaster(issuemaster),,"0|i0byxj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1808|https://github.com/spring-projects/spring-data-rest/issues/1808]. ",,,,,,,,,,,,,,,,,,,,,,,
DefaultExcerptProjector exposes projection present even if metadata returns Optional.empty(),DATAREST-1446,85292,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,28/Oct/19 1:55 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,28/Oct/19 2:33 PM,3.2 GA (Moore),,,,3.2.1 (Moore SR1),3.3 M1 (Neumann),,,Repositories,,,0,,,,,,,,,,,,,,,,,DATAREST-1435,DATAREST-1442,,,,,,,,,DATAREST-1443,,,,,,,,,,2020-12-31 10:31:58.393,9223372036854775807,issuemaster(issuemaster),,"0|i0bywv:",9223372036854775807,9223372036854775807,,,Moore SR1,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1805|https://github.com/spring-projects/spring-data-rest/issues/1805]. ",,,,,,,,,,,,,,,,,,,,,,,
Associated resources gets embedded and also linked,DATAREST-1443,85265,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,luvarqpp,luvarqpp,23/Oct/19 7:55 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,30/Oct/19 12:17 PM,3.2 GA (Moore),,,,3.2.1 (Moore SR1),3.3 M1 (Neumann),,,,,,1,,,,,"There is some regression between spring parent release 2.1.5 and 2.2.0. For example, have a look at [https://github.com/luvarqpp/poc-springHalRelations/tree/solution/extendedAccordingDannyLesnikAnswer] repository (note referenced branch and please ignore that given repo was created for another stackoverflow question; thus ignore its readme).

 

When you request [http://localhost:8080/api/publishers] url, you will get this:

with 2.1.5.RELEASE:
{code:java}
{
  ""_embedded"": {
    ""publishers"": [
      {
        ""name"": ""Publisher A"",
        ""_links"": {
          ""self"": {
            ""href"": ""http://localhost:8080/api/publishers/1""
          },
          ""publisher"": {
            ""href"": ""http://localhost:8080/api/publishers/1""
          },
          ""friends"": {
            ""href"": ""http://localhost:8080/api/publishers/1/friends""
          },
          ""createdBy"": {
            ""href"": ""http://localhost:8080/api/publishers/1/contact""
          }
        }
      }
    ]
  },
  ""_links"": {
    ""self"": {
      ""href"": ""http://localhost:8080/api/publishers{?page,size,sort}"",
      ""templated"": true
    },
    ""profile"": {
      ""href"": ""http://localhost:8080/api/profile/publishers""
    }
  },
  ""page"": {
    ""size"": 20,
    ""totalElements"": 1,
    ""totalPages"": 1,
    ""number"": 0
  }
}
{code}
with 2.2.0.RELEASE:
{code:java}
{
  ""_embedded"": {
    ""publishers"": [
      {
        ""name"": ""Publisher A"",
        ""_embedded"": {
          ""createdBy"": {
            ""loginName"": ""Master123"",
            ""email"": ""nbuMaster123@test.qpp.sk""
          }
        },
        ""_links"": {
          ""self"": {
            ""href"": ""http://localhost:8080/api/publishers/1""
          },
          ""publisher"": {
            ""href"": ""http://localhost:8080/api/publishers/1""
          },
          ""friends"": {
            ""href"": ""http://localhost:8080/api/publishers/1/friends""
          },
          ""createdBy"": {
            ""href"": ""http://localhost:8080/api/publishers/1/contact""
          }
        }
      }
    ]
  },
  ""_links"": {
    ""self"": {
      ""href"": ""http://localhost:8080/api/publishers{?page,size,sort}"",
      ""templated"": true
    },
    ""profile"": {
      ""href"": ""http://localhost:8080/api/profile/publishers""
    }
  },
  ""page"": {
    ""size"": 20,
    ""totalElements"": 1,
    ""totalPages"": 1,
    ""number"": 0
  }
}
{code}
I would expect that ""createdBy"" (ManyToOne mapping) relation will be as link only, or as embedded thing (projection?) only.

Sidenote: ""author"" is preferred over ""createdBy"" according [iana registry|https://www.iana.org/assignments/link-relations/link-relations.xhtml]. Are there any way how to detect/check for errors like this one? Some commonly used synonyms which have standardized equivalent?

 

PS: If you point me in some direction, I can try to make pull-request with fix. This problem bothers me a lot due failing tests (restdocs).",,,,,,,,,,,,,,,,,DATAREST-1446,,,,,,,,,,,,,,,2019-10-26 11:39:56.975,9223372036854775807,issuemaster(issuemaster),,"0|i0byqv:",9223372036854775807,9223372036854775807,https://stackoverflow.com/questions/58213756/associated-resources-are-embedded-after-upgrading-dependency,,,,,,,,,,,,,"26/Oct/19 11:39 AM;cjmjanssen;I have the exact same issue. All associations are being embedded by default after the upgrade. I tried adding the @JsonIgnore annotation to the associations, but the result is still the same. I noticed that the issue was introduced after version 2.2.0.M3. ","28/Oct/19 3:19 PM;luvarqpp;I would bet some pullrequests that [~alanhay] can bring here some light. Can you guess, in which module/class can foreigner search for problem?","29/Oct/19 3:02 PM;tfleis82;We have the same issue. Does anyone have a workaround? JsonBackReference is not working. We get an infinite loop.","30/Oct/19 12:16 PM;olivergierke;This seems to be a side-effect of the issue reported in DATAREST-1446. There was a but that caused the check for an available projection for a given type to always indicate that there's a projection available, even if it wasn't. The rendering code would then go on trying to eventually render the projection but falling back to render the entire object if no projection was in fact available.

I just tried your example on the latest snapshots (by upgrading {{spring-data-releasetrain.version}} to {{Moore-BUILD-SNAPSHOT}} and it again renders the resources as expected. Would you mind giving the snapshots a try yourself? We have a service release schedule for early next week and it would be cool if we could verify that the fix for DATAREST-1446 resolves this issue as well.","30/Oct/19 12:17 PM;olivergierke;Should be fixed with the fix for DATAREST-1446.","05/Nov/19 1:56 PM;luvarqpp;Seems OK for me. Thanks.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1802|https://github.com/spring-projects/spring-data-rest/issues/1802]. ",,,,,,,,,,,,,,,,,
Unable to fetch resource with LAZY property,DATAREST-1442,85259,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,osst,osst,22/Oct/19 11:51 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,28/Oct/19 2:36 PM,3.2 GA (Moore),,,,,,,,,,,0,,,,,"GET request for either a single resource or collection of resources fails with an exception if the resource has LAZY property.

Exception:
 com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$PersistentEntityResourceSerializer$1[""embedded""]->org.springframework.data.rest.webmvc.PersistentEntityResource$NoLinksResources[""_embedded""]->java.util.Collections$UnmodifiableMap[""entityA""]->com.codejig.resttest.EntityA$HibernateProxy$w8sAYhND[""hibernateLazyInitializer""])

Example entity:
{code:java}
@Entity
public class EntityB {

	@ManyToOne(fetch = FetchType.LAZY)
	private EntityA entityA;
	...
}
{code}
With FetchType.EAGER serialization does not fail but resulting JSON does contain unnecessary ""_embedded"" section.",,,,,,,,,,,,,,,,DATAREST-1446,,,,,,,,,,,,,,,,2019-10-28 14:36:05.529,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/365,"0|i0bypj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"28/Oct/19 2:36 PM;olivergierke;There was a [PR|https://github.com/spring-projects/spring-data-rest/pull/365] submitted which has been superseded by the fixes made for DATAREST-1446. Reading up the description I am not sure the proposed fix actually fixes the issue here. Still closing as duplicate. Feel free to reopen if you need further things to change.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1793|https://github.com/spring-projects/spring-data-rest/issues/1793]. ",,,,,,,,,,,,,,,,,,,,,,
Fields mapped with @JsonAnySetter are no longer updatable with http PATCH,DATAREST-1440,85245,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,sth77,sth77,18/Oct/19 9:33 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,04/Nov/19 8:17 AM,3.2 GA (Moore),,,,3.1.12 (Lovelace SR12),3.2.1 (Moore SR1),3.3 M1 (Neumann),,Repositories,,,0,regression,,,,"Since DATAREST-1383, JSON fields mapped via @JsonAnySetter can no longer be updated via an http PATCH request. 

I model i18n texts as simple JSON objects where the field name is the language tag and the field value the translation for that language, e.g.

{code:title=i18n.json|borderStyle=solid}
{
   ""de"": ""Hallo"",
   ""en"": ""Hello"",
   ""fr"": ""Bonjour""
}
{code}

In Java, I model this as a class I18nText which holds a Map of translations, which is mapped to JSON via @JsonAnyGetter / @JsonAnySetter annotations:
{code:title=I18nText.java|borderStyle=solid}
class I18nText {
  // JPA annotations, id field etc. ommitted for clarity
  private Map<String, String> translations = new HashMap<String, String>();

  @JsonAnySetter
  private void set(String languageTag, String translation) { 
    // ...
  }

  @JsonAnyGetter
  private Map<String, String> getTranslations() {
    // ...
  }
}
{code}

I18nText objects are then used in other entities, for example in a product:
{code:title=Product.java|borderStyle=solid}
class Product {
  @OneToOne(...)
  private I18nText name = new I18nText();
  // ...
}
{code}

Updating such an object with http PATCH no longer works. Sind commit [28787116|https://github.com/spring-projects/spring-data-rest/commit/28787116a67c408bb1498452205d97d047d21252#diff-c0e2abde43448fac54c2cc2af1265af7] DomainObjectReader#doMerge removes fields from the input JSON for which there are no persistent properties on the target object. In the above case, there is seemingly no persistent property for field ""de"" etc., and all translations (de, en, fr) get removed. As a consequence, the update gets lost. Furthermore, a custom JsonDeserializer  doesn't work either, as the relevant fields have already been removed when it gets called.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2019-10-25 11:14:14.509,9223372036854775807,issuemaster(issuemaster),,"0|i0bymf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"25/Oct/19 11:14 AM;evfool;I have also hit this issue, while trying to mask a nested mongodb object from the clients via a JSONAnySetter, which works flawlessly, except for the update not working at all due to this issue. 

 ","25/Oct/19 11:58 AM;evfool;As a (quite ugly) workaround I have set the Map<String,Object> field to public and set a @JsonFilter with SimpleBeanPropertyFilter.serializeAllExcept, it does the trick until there will be a proper fix for this.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1800|https://github.com/spring-projects/spring-data-rest/issues/1800]. ",,,,,,,,,,,,,,,,,,,,,
Bean is not created with class org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean in Java 11,DATAREST-1437,85229,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Invalid,olivergierke,vinkumar,vinkumar,15/Oct/19 6:30 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,30/Oct/19 11:45 AM,,,,,,,,,,,,0,,,,,"Getting the error in Spring 5.1.6 version while creating bean 

"" Lookup method resolution failed; nested exception is java.lang.IllegalStateException: Failed to introspect Class [org.springframework.remoting.jaxws.JaxWsPortClientInterceptor] from ClassLoader ""

 

Complete stack trace

 

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'defaultInterceptorRegistry' defined in class path resource [interceptor-spring.xml]: Unsatisfied dependency expressed through bean property 'interceptorMappings'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'CsCustomerEventPrepareInterceptorMapping' defined in class path resource [ticketsystem/ticketsystem-spring-
interceptors.xml]: Cannot resolve reference to bean 'CsCustomerEventPrepareInterceptor' while setting bean property 'interceptor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'CsCustomerEventPrepareInterceptor' defined in class path resource [ticketsystem/ticketsystem-spring-interceptors.xml]: Cannot resolve reference to bean 'ticketService' while setting bean property 'ticketService'; nested exception is org
.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultTicketService' defined in class path resource [ticketsystem/ticketsystem-spring-services.xml]: Cannot resolve reference to bean 'associatedTicketObjectResolverMap' while setting bean property 'associatedTicketObjectResolverMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultAssociatedTicketObjectResolverMapping':
Cannot resolve reference to bean 'cartResolver' while setting bean property 'sourceMap' with key [TypedStringValue: value [Cart], target type [null]]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultCartResolverForCustomerTicket' defined in class path resource [ticketsystem-spring.xml]: Cannot resolve reference to bean 'commerceCartService' while setting bean property 'commerceCartService'; nested except
ion is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultCommerceCartService' defined in class path resource [commerceservices-spring.xml]: Cannot resolve reference to bean 'cartValidationStrategy' while setting bean property 'cartValidationStrategy'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultCartValidationStrategy' defined in class path resource [commerc
eservices-spring.xml]: Cannot resolve reference to bean 'commerceStockService' while setting bean property 'commerceStockService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'pbyAvailabilityService' defined in class path resource [pepboyscore-spring.xml]: Cannot resolve reference to bean 'stockServiceFactory' while setting bean property 'stockServiceFactory'; nested exception is org.springframework.beans.fac
tory.BeanCreationException: Error creating bean with name 'pbyStockServiceFactory' defined in class path resource [pepboyscore-spring.xml]: Cannot resolve reference to bean 'pbyStockService' while setting bean property 'pbyStockService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'pbyStockService' defined in class path resource [pepboyscore-spring.xml]: Cannot resolve reference to bean 'pbyInventoryWebServic
e' while setting bean property 'enterpriseWebService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'pbyInventoryWebService' defined in class path resource [pepboysexternalintegration-spring.xml]: Cannot resolve reference to bean 'pbySourcingServicePort' while setting bean property 'enterpriseSourcingService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with
name 'pbySourcingServicePort': Lookup method resolution failed; nested exception is java.lang.IllegalStateException: Failed to introspect Class [org.springframework.remoting.jaxws.JaxWsPortClientInterceptor] from ClassLoader [de.hybris.bootstrap.loader.PlatformInPlaceClassLoader@3123ca85]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1515) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1395) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:849) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877) ~[spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at de.hybris.platform.core.HybrisContextFactory.refreshContext(HybrisContextFactory.java:95) [coreserver.jar:?]
at de.hybris.platform.core.HybrisContextFactory$ApplicationContextFactory.build(HybrisContextFactory.java:263) [coreserver.jar:?]
at de.hybris.platform.core.HybrisContextHolder.getApplicationInstance(HybrisContextHolder.java:85) [coreserver.jar:?]
at de.hybris.platform.core.AbstractTenant.createCoreApplicationContext(AbstractTenant.java:733) [coreserver.jar:?]
at de.hybris.platform.core.AbstractTenant.doStartupSafe(AbstractTenant.java:772) [coreserver.jar:?]
at de.hybris.platform.core.AbstractTenant.doStartUp(AbstractTenant.java:705) [coreserver.jar:?]
at de.hybris.platform.core.Registry.assureTenantStarted(Registry.java:659) [coreserver.jar:?]
at de.hybris.platform.core.Registry.activateTenant(Registry.java:720) [coreserver.jar:?]
at de.hybris.platform.core.Registry.setCurrentTenant(Registry.java:569) [coreserver.jar:?]
at de.hybris.platform.core.Registry.activateMasterTenant(Registry.java:628) [coreserver.jar:?]
at de.hybris.platform.core.Registry.startup(Registry.java:447) [coreserver.jar:?]
at de.hybris.platform.core.ClassLoaderUtils.executeWithWebClassLoaderParentIfNeeded(ClassLoaderUtils.java:42) [coreserver.jar:?]
at de.hybris.platform.spring.HybrisContextLoaderListener.startRegistry(HybrisContextLoaderListener.java:326) [coreserver.jar:?]
at de.hybris.platform.spring.HybrisContextLoaderListener.doInitWebApplicationContext(HybrisContextLoaderListener.java:212) [coreserver.jar:?]
at de.hybris.platform.spring.HybrisContextLoaderListener.initWebApplicationContext(HybrisContextLoaderListener.java:199) [coreserver.jar:?]
at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103) [spring-web-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at de.hybris.platform.spring.HybrisContextLoaderListener.contextInitialized(HybrisContextLoaderListener.java:95) [coreserver.jar:?]
at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4770) [catalina.jar:8.5.40]
at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5236) [catalina.jar:8.5.40]
at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) [catalina.jar:8.5.40]
at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1423) [catalina.jar:8.5.40]
at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1413) [catalina.jar:8.5.40]
at java.util.concurrent.FutureTask.run(FutureTask.java:264) [?:?]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
at java.lang.Thread.run(Thread.java:834) [?:?]
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'CsCustomerEventPrepareInterceptorMapping' defined in class path resource [ticketsystem/ticketsystem-spring-interceptors.xml]: Cannot resolve reference to bean 'CsCustomerEventPrepareInterceptor' while setting bean property 'interceptor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'CsCustomerEventPrepareIntercep
tor' defined in class path resource [ticketsystem/ticketsystem-spring-interceptors.xml]: Cannot resolve reference to bean 'ticketService' while setting bean property 'ticketService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultTicketService' defined in class path resource [ticketsystem/ticketsystem-spring-services.xml]: Cannot resolve reference to bean 'associatedTicketObjectResolverMap' while setting
bean property 'associatedTicketObjectResolverMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultAssociatedTicketObjectResolverMapping': Cannot resolve reference to bean 'cartResolver' while setting bean property 'sourceMap' with key [TypedStringValue: value [Cart], target type [null]]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultCa
rtResolverForCustomerTicket' defined in class path resource [ticketsystem-spring.xml]: Cannot resolve reference to bean 'commerceCartService' while setting bean property 'commerceCartService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultCommerceCartService' defined in class path resource [commerceservices-spring.xml]: Cannot resolve reference to bean 'cartValidationStrategy' while setting bean propert
y 'cartValidationStrategy'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultCartValidationStrategy' defined in class path resource [commerceservices-spring.xml]: Cannot resolve reference to bean 'commerceStockService' while setting bean property 'commerceStockService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'pbyAvailabilityService' define
d in class path resource [pepboyscore-spring.xml]: Cannot resolve reference to bean 'stockServiceFactory' while setting bean property 'stockServiceFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'pbyStockServiceFactory' defined in class path resource [pepboyscore-spring.xml]: Cannot resolve reference to bean 'pbyStockService' while setting bean property 'pbyStockService'; nested exception is org.springf
ramework.beans.factory.BeanCreationException: Error creating bean with name 'pbyStockService' defined in class path resource [pepboyscore-spring.xml]: Cannot resolve reference to bean 'pbyInventoryWebService' while setting bean property 'enterpriseWebService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'pbyInventoryWebService' defined in class path resource [pepboysexternalintegration-spring.xml]: Cannot res
olve reference to bean 'pbySourcingServicePort' while setting bean property 'enterpriseSourcingService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'pbySourcingServicePort': Lookup method resolution failed; nested exception is java.lang.IllegalStateException: Failed to introspect Class [org.springframework.remoting.jaxws.JaxWsPortClientInterceptor] from ClassLoader [de.hybris.bootstrap.loader.PlatformInPlace
ClassLoader@3123ca85]
at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:378) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1681) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1433) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1463) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1427) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1318) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1205) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE]
at ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2019-10-30 11:45:25.287,9223372036854775807,issuemaster(issuemaster),,"0|i0byiv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15/Oct/19 6:33 PM;vinkumar;I am stuck here from last 2-3 days can anyone help here urgently for this.
Thanks in advance.","17/Oct/19 5:35 AM;vinkumar;[~olivergierke]: Did you get chance to look into the above issue. Please help here. ","30/Oct/19 11:45 AM;olivergierke;{{org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean}} has got nothing to do with Spring Data REST. Please report in [Spring Framework's bugtracker|https://github.com/spring-projects/spring-framework].","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1797|https://github.com/spring-projects/spring-data-rest/issues/1797]. ",,,,,,,,,,,,,,,,,,,,
Embedded resources default serialisation with projector,DATAREST-1435,85192,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,genglefr,genglefr,04/Oct/19 11:26 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,30/Oct/19 11:23 AM,3.2 GA (Moore),,,,3.2.1 (Moore SR1),3.3 M1 (Neumann),,,Repositories,,,1,,,,,"When serializing a LAZY loadable embedded resource, there should be a way to configure that LAZY value should not be serialized.

For instance, when a @OneToMany association is considered, and the database call not triggered yet, the EmbeddedResourcesAssembler checks for a ExcerptProjection on the property, which will never be null as LAZY is not considered null:

*EmbeddedResourcesAssembler:74*
{code}
if (!projector.hasExcerptProjection(property.getActualType()))

{ return; }
{code}

*DefaultExcerptProjector:67*
{code}
return metadata == null ? false : metadata.getExcerptProjection() != null;
{code}
 

This causes the resolution of the LAZY property.

A potential bugfix could be:

*DefaultExcerptProjector:64*
{code}
@Override
public boolean hasExcerptProjection(Class<?> type) {
   ResourceMetadata metadata = mappings.getMetadataFor(type);
   return metadata == null ? false : metadata.getExcerptProjection() != null && metadata.getExcerptProjection().isPresent();
}
{code}",,,,,,,,,,,,,,,,DATAREST-1446,,,,,,,,,,,,,,,,2019-10-30 11:22:51.544,9223372036854775807,issuemaster(issuemaster),,"0|i0byan:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"17/Oct/19 3:27 PM;genglefr;Any update on this please?

It prevents me from updating to spring boot 2.2","30/Oct/19 11:22 AM;olivergierke;Looks like this is a duplicate of DATAREST-1446, which we had fixed a couple of days ago. Any chance you give the snapshots a try before the service release upcoming early next week?","07/Nov/19 10:08 AM;genglefr;I confirm the issue can be closed.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1795|https://github.com/spring-projects/spring-data-rest/issues/1795]. ",,,,,,,,,,,,,,,,,,,,
Pagination - Unable to override with Default or Custom provided inputs ,DATAREST-1406,84629,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Cannot Reproduce,mp911de,prateek512,prateek512,27/Jun/19 10:56 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,30/Mar/20 1:30 PM,,,,,,,,,,,,0,,,,,"I've explain the whole scenario here: [https://stackoverflow.com/questions/56786158/unable-to-override-defaults-of-pagination-in-spring-boot-2-1-5-release]

It look like Pagination override with defaults or from Swagger/Curl inputs not working either.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2019-07-05 10:53:04.401,9223372036854775807,issuemaster(issuemaster),,"0|i0bv53:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05/Jul/19 10:53 AM;mp911de;Care to provide a reproducible example? Please make sure to use the proper size parameter name. The linked post says {{size-parameter: 0}} which should be a query parameter name.","30/Mar/20 1:30 PM;mp911de;Closing due to lack of requested feedback. If you would like us to look at this issue, please provide the requested information and we will re-open the issue.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1765|https://github.com/spring-projects/spring-data-rest/issues/1765]. ",,,,,,,,,,,,,,,,,,,,,
Repository cors configurations are ignored unless there is a global cors configuration set ,DATAREST-1397,84563,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,paul_c_warren@yahoo.com,paul_c_warren@yahoo.com,15/Jun/19 5:38 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,21/Jun/19 1:47 PM,3.2 RC2 (Moore),,,,3.1.10 (Lovelace SR10),3.2 RC2 (Moore),,,Repositories,,,0,,,,,"Looks to me like spring-webmvc recently refactored their cors code and broke the cors functionality in spring-data-rest.

In [this commit|https://github.com/spring-projects/spring-framework/commit/d27b5d0ab6e8b91a77e272ad57ae83c7d81d810b#diff-eb14411c8f4556f42a94c6812fbf6e69] the {{getHandler}} method was refactored to call a new method {{hasCorsConfigurationSource(handler)}} instead of {{CorsUtils.isCorsRequest(request)}}.

{{hasCorsConfigurationSource(handler)}} only checks whether the handler is a {{CorsConfigurationSource}} or whether the handler mapping has a global cors configuration source set.  

Since this is a new method there is no overridden implementation in {{RepositoryRestHandlerMapping}}.

As a result repository cors configurations are ignored unless there is a global cors configuration set.

I have committed a spring boot app into [my github repo|https://github.com/paulcwarren/DATAREST-1397] that demonstrates the issue.

Had a quick look at the code.  If I were to submit a PR then I would probably modify the signature of {{hasCorsConfigurationSource(handler)}} to {{hasCorsConfigurationSource(handler, request)}}.  Before the refactor, handler mappings used the request to make cores decisions so maybe it is reasonable to reinstate this capability by having this method (in {{RepositoryRestHandlerMapping}}) {{return getCorsConfiguration(handler, request)}}.  But this fix span at least two repos (teams?) and also seems quite surgical.  I may not (probably not) seeing the bigger picture somewhere along the line.   

However, if that does seem appropriate and you want someone to do the grunt work then let me know and I will be happy to PR that.",n/a,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2019-06-21 08:24:09.881,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/357,"0|i0buqf:",9223372036854775807,9223372036854775807,https://github.com/paulcwarren/DATAREST-1397,,Moore RC2,,,,,,,,,,,"21/Jun/19 8:24 AM;mp911de;The changes in {{AbstractHandlerMethodMapping}} indeed break Spring Data REST's CORS discovery on repository interfaces. {{@RepositoryRestController}}'s are not affected. As you noted, we cannot determine a repository-bound CORS config solely based on the handler but we require path/request details.","21/Jun/19 9:07 AM;mp911de;We decided to override {{hasCorsConfigurationSource}} returning always {{true}} to align with Spring Framework's idea of the refactoring.","21/Jun/19 1:47 PM;olivergierke;That's merged and backported to 3.1 so that it works for Lovelace on Spring 5.2, too.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1756|https://github.com/spring-projects/spring-data-rest/issues/1756]. ",,,,,,,,,,,,,,,,,,,,
Deserializer customizations not propagated to Jackson creator properties,DATAREST-1393,84520,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Complete,olivergierke,fbiville,fbiville,12/Jun/19 10:57 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,25/Jun/19 2:06 PM,3.1.8 (Lovelace SR8),3.2 RC1 (Moore),,,3.1.10 (Lovelace SR10),3.2 RC2 (Moore),,,Repositories,,,0,kotlin,,,,"I have a simple Kotlin project, generated from start.spring.io, Spring Boot version `2.1.5.RELEASE`.

Two entities:
{code:java}
@Entity
class Venue(@Id @GeneratedValue(strategy = GenerationType.IDENTITY)
 var id: Long? = null,
 var name: String,
 var address: String){code}
and:
{code:java}
@Entity
class Session(@Id @GeneratedValue(strategy = GenerationType.IDENTITY)
 var id: Long? = null,
 var title: String,
 @Temporal(TemporalType.TIMESTAMP)
 var date: Date,
 @ManyToOne var venue: Venue){code}
As well as two basic exported repositories: 
{code:java}
interface VenueRepository : JpaRepository<Venue, Long> 
{code}
and:
{code:java}
@RepositoryRestResource(excerptProjection = SessionWithVenue::class)
interface SessionRepository : JpaRepository<Session, Long>{code}
I can save a venue without any problem.

 

However, when I try to save a new session with an existing venue, I get the following error:
{noformat}
2019-06-12 11:38:39.652 ERROR 29458 — [nio-8080-exec-2] o.s.d.r.w.RepositoryRestExceptionHandler : JSON parse error: Cannot construct instance of `net.hackergarten.sessionapi.venue.Venue` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('http://localhost:8080/api/venues/1'); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `net.hackergarten.sessionapi.venue.Venue` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('http://localhost:8080/api/venues/1')
 {{ at [Source: (org.apache.catalina.connector.CoyoteInputStream); line: 1, column: 68] (through reference chain: net.hackergarten.sessionapi.session.Session[""venue""])}}org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot construct instance of `net.hackergarten.sessionapi.venue.Venue` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('http://localhost:8080/api/venues/1'); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `net.hackergarten.sessionapi.venue.Venue` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('http://localhost:8080/api/venues/1')
 {{ at [Source: (org.apache.catalina.connector.CoyoteInputStream); line: 1, column: 68] (through reference chain: net.hackergarten.sessionapi.session.Session[""venue""])}}
 {{ at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:245) ~[spring-web-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readInternal(AbstractJackson2HttpMessageConverter.java:219) ~[spring-web-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.springframework.http.converter.AbstractHttpMessageConverter.read(AbstractHttpMessageConverter.java:199) ~[spring-web-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.read(PersistentEntityResourceHandlerMethodArgumentResolver.java:230) ~[spring-data-rest-webmvc-3.1.8.RELEASE.jar:3.1.8.RELEASE]}}
 {{ at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.lambda$read$7(PersistentEntityResourceHandlerMethodArgumentResolver.java:188) ~[spring-data-rest-webmvc-3.1.8.RELEASE.jar:3.1.8.RELEASE]}}
 {{ at java.base/java.util.Optional.orElseGet(Optional.java:369) ~[na:na]}}
 {{ at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.read(PersistentEntityResourceHandlerMethodArgumentResolver.java:188) ~[spring-data-rest-webmvc-3.1.8.RELEASE.jar:3.1.8.RELEASE]}}
 {{ at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.resolveArgument(PersistentEntityResourceHandlerMethodArgumentResolver.java:133) ~[spring-data-rest-webmvc-3.1.8.RELEASE.jar:3.1.8.RELEASE]}}
 {{ at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126) ~[spring-web-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167) ~[spring-web-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134) ~[spring-web-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) ~[spring-webmvc-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892) ~[spring-webmvc-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797) ~[spring-webmvc-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039) ~[spring-webmvc-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942) ~[spring-webmvc-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005) ~[spring-webmvc-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908) ~[spring-webmvc-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882) ~[spring-webmvc-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.19.jar:9.0.19]}}
 {{ at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92) ~[spring-web-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) ~[spring-web-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]}}
 {{ at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]}}
 {{ at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-9.0.19.jar:9.0.19]}}
 {{ at java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]}}
 Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `net.hackergarten.sessionapi.venue.Venue` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('http://localhost:8080/api/venues/1')
 {{ at [Source: (org.apache.catalina.connector.CoyoteInputStream); line: 1, column: 68] (through reference chain: net.hackergarten.sessionapi.session.Session[""venue""])}}
 {{ at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:63) ~[jackson-databind-2.9.8.jar:2.9.8]}}
 {{ at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1343) ~[jackson-databind-2.9.8.jar:2.9.8]}}
 {{ at com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(DeserializationContext.java:1032) ~[jackson-databind-2.9.8.jar:2.9.8]}}
 {{ at com.fasterxml.jackson.databind.deser.ValueInstantiator._createFromStringFallbacks(ValueInstantiator.java:371) ~[jackson-databind-2.9.8.jar:2.9.8]}}
 {{ at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromString(StdValueInstantiator.java:323) ~[jackson-databind-2.9.8.jar:2.9.8]}}
 {{ at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromString(BeanDeserializerBase.java:1373) ~[jackson-databind-2.9.8.jar:2.9.8]}}
 {{ at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:171) ~[jackson-databind-2.9.8.jar:2.9.8]}}
 {{ at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:161) ~[jackson-databind-2.9.8.jar:2.9.8]}}
 {{ at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:530) ~[jackson-databind-2.9.8.jar:2.9.8]}}
 {{ at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) ~[jackson-databind-2.9.8.jar:2.9.8]}}
 {{ at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) ~[jackson-databind-2.9.8.jar:2.9.8]}}
 {{ at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) ~[jackson-databind-2.9.8.jar:2.9.8]}}
 {{ at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) ~[jackson-databind-2.9.8.jar:2.9.8]}}
 {{ at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159) ~[jackson-databind-2.9.8.jar:2.9.8]}}
 {{ at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4013) ~[jackson-databind-2.9.8.jar:2.9.8]}}
 {{ at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3084) ~[jackson-databind-2.9.8.jar:2.9.8]}}
 {{ at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:239) ~[spring-web-5.1.7.RELEASE.jar:5.1.7.RELEASE]}}
 {{ ... 58 common frames omitted}}{noformat}
The workarounds consist in rewriting the entities as follows:
{code:java}
@Entity
class Session() {

 @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
 var id: Long? = null var title: String = """" @Temporal(TemporalType.TIMESTAMP)
 var date: Date = Date(0)
 @ManyToOne var venue: Venue = Venue()

}
{code}
{code:java}
@Entity
class Venue() {

 @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
 var id: Long? = null var name: String = """" var address: String = """"
}
{code}
The no-arg constructor generated by the JPA Kotlin compiler plugin should be enough. What does one need to write a no-arg constructor explicitly?
----
If you want to reproduce the issue, you can follow these steps:
{code:java}
$> git clone https://github.com/Agatesse/hackergarten-session.git -b jackson_bug
$> cd jackson_bug
$> mvn spring-boot:run{code}
In another terminal: 
{code:java}
$> venue_json=""{\""name\"": \""Pivotal France\"", \""address\"": \""33 rue La Fayette 75009 Paris\""}""
$> venue_uri=$(curl --request POST --header ""Content-Type:application/json"" --data ""${venue_json}"" http://localhost:8080/api/venues | jq --raw-output '._links.self.href')

$> now=$(date +%s000)
$> session_json=""{\""title\"": \""Hackergarten Paris 42\"", \""date\"": ${now}, \""venue\"": \""${venue_uri}\""}""
$> curl --request POST --header ""Content-Type:application/json"" --data ""${session_json}"" http://localhost:8080/api/sessions
{code}
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2019-06-24 18:08:23.377,9223372036854775807,issuemaster(issuemaster),,"0|i0bugv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"24/Jun/19 6:08 PM;olivergierke;I suspect that the Spring Data REST Jackson bean deserialization customization is broken for some reason. Usually it configures a dedicated serializer from URIs for properties that point to aggregate roots that have repositories exposed. That doesn't seem to kick in here and I suspect some Kotlin specific type visibility issues.

Is there a chance you formulate the HTTP interactions as integration tests so that I can properly debug the issue? I couldn't get the terminal interaction to work properly as the JSON broke (probably some escaping issues not working in Bash.

Oh, and it would be helpful to know if the example works OOTB if written in Java :).","24/Jun/19 7:59 PM;fbiville;I fixed the escaping for Bash (worked fine in Zsh).","24/Jun/19 8:13 PM;fbiville;Now you can just run {{mvn test -Dtest=""net.hackergarten.sessionapi.session.SessionApiTest#post a new session""}} and it will fail in the same way. (The test hardcodes a few things but it should be enough to reproduce).","24/Jun/19 8:19 PM;olivergierke;Lovely, Florent. Thanks. I'll have a look.","24/Jun/19 8:20 PM;olivergierke;Oh, wait. What do I actually run the command on? Do you have a sample project to share?

EDIT: Forgive my ignorance, I just saw your cloning instructions 🙄😬","24/Jun/19 8:27 PM;fbiville;Yes, as written above: {{git clone https://github.com/Agatesse/hackergarten-session.git -b jackson_bug}}

Pushed another branch where the entity is rewritten in Java, and there is no issue at all:
{code:java}
$> git checkout jackson_bug_java
$> mvn test -Dtest=""net.hackergarten.sessionapi.session.SessionApiTest#post a new session""
{code}
","24/Jun/19 8:28 PM;olivergierke;That's helpful, too, thanks.","25/Jun/19 10:53 AM;olivergierke;The situation is caused by the property customization being overridden by Jackson looking up creator properties via the registered {{ValueInstantiator}} and one creating new properties from the constructor of the owning type. I filed [a ticket|https://github.com/FasterXML/jackson-databind/issues/2367] for the problem and have a workaround that tweaks the constructor arguments via reflection here locally. About to polish and push.","25/Jun/19 10:58 AM;fbiville;Great news, thanks!","25/Jun/19 2:06 PM;olivergierke;That's fixed now. Your sample project builds successfully with the latest snapshots.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1752|https://github.com/spring-projects/spring-data-rest/issues/1752]. ",,,,,,,,,,,,,
Backend read-only properties overridden for PATCH requests,DATAREST-1383,84375,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,xhstormr,xhstormr,23/May/19 3:38 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,28/May/19 3:38 PM,,,,,3.1.9 (Lovelace SR9),3.2 RC1 (Moore),,,,,,0,,,,,"I have an Person entity like this:
{code:java}
@Entity
@DynamicInsert
@DynamicUpdate
class Person(
        @Column(nullable = false, unique = true, updatable = false)
        val name: String,
        @Column(nullable = false)
        var country: String
) : BaseSequenceEntity() {

    @OneToMany(mappedBy = ""person"", cascade = [CascadeType.PERSIST])
    var phones: MutableList<Phone> = mutableListOf()
}
{code}
Its name attribute is specified as not updatable.

I use the curl command to create a Person entity:
{code}
$ curl -sX POST \
>   http://127.0.0.1:8080/api/persons \
>   -H 'Content-Type: application/json' \
>   -d '{
>     ""name"": ""Dave"",
>     ""country"": ""USA""
> }' \
> | jq .
{
  ""name"": ""Dave"",
  ""country"": ""USA"",
  ""_links"": {
    ""self"": {
      ""href"": ""http://127.0.0.1:8080/api/persons/13""
    },
    ""person"": {
      ""href"": ""http://127.0.0.1:8080/api/persons/13""
    },
    ""phones"": {
      ""href"": ""http://127.0.0.1:8080/api/persons/13/phones""
    }
  }
}
{code}
When I modify the entity property using the http put method, the read-only property returns the correct value, the value of the name attribute is Dave:
{code}
$ curl -sX PUT \
>   http://127.0.0.1:8080/api/persons/13 \
>   -H 'Content-Type: application/json' \
>   -d '{
>     ""name"": ""123"",
>     ""country"": ""456""
> }' \
> | jq .
{
  ""name"": ""Dave"",
  ""country"": ""456"",
  ""_links"": {
    ""self"": {
      ""href"": ""http://127.0.0.1:8080/api/persons/13""
    },
    ""person"": {
      ""href"": ""http://127.0.0.1:8080/api/persons/13""
    },
    ""phones"": {
      ""href"": ""http://127.0.0.1:8080/api/persons/13/phones""
    }
  }
}
{code}
But when I modify the entity property using the http patch method, the read-only property returns the modified value, the value of the name attribute becomes 123:
{code}
$ curl -sX PATCH \
>   http://127.0.0.1:8080/api/persons/13 \
>   -H 'Content-Type: application/json' \
>   -d '{
>     ""name"": ""123"",
>     ""country"": ""456""
> }' \
> | jq .
{
  ""name"": ""123"",
  ""country"": ""456"",
  ""_links"": {
    ""self"": {
      ""href"": ""http://127.0.0.1:8080/api/persons/13""
    },
    ""person"": {
      ""href"": ""http://127.0.0.1:8080/api/persons/13""
    },
    ""phones"": {
      ""href"": ""http://127.0.0.1:8080/api/persons/13/phones""
    }
  }
}
{code}","spring-boot-starter-data-rest:2.1.5.RELEASE
kotlin 1.3.31
java 12",,,,,,,,,,,,,,,,,,,,,DATAREST-1524,,,,,,,,,,2019-05-23 08:23:17.93,9223372036854775807,issuemaster(issuemaster),,"0|i0btwn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"23/May/19 8:23 AM;olivergierke;This shouldn't actually happen and clearly needs investigating. However, you should be able to see this handled better is by using Jackson annotations and properly mark the property as read only. Without that in place, Jackson will bind the incoming data to the object's field as it doesn't know about JPA specific semantics. I'll still have to investigate why JPA is not properly rejecting to persist the field.

Can you clarify whether what you see is just the immediate response? Or has the data been changed persitedly? I.e. if you issue another GET request on the item resource, do you see the old or the new data. I am asking because here's what I think happens:

{{updatable}} is specified to simply exclude the field from update statements issue by the persistence provider. I.e. you can still set the value on the entity instance, it just will never get persisted. That's why what you see actually makes some sort of sense, at least in how the individual pieces are defined to work. That said, I can see why this is confusing.","23/May/19 10:18 AM;olivergierke;What still puzzles me is that Jackson apparently changes a {{val}} on an existing instance. 🤔","23/May/19 10:30 AM;xhstormr;I can confirm that the data in the database has not changed after sending the patch request. After sending the patch request, there is no update statement in the hibernate log. The Get request after the patch request returns the correct read-only attribute value. It seems that the value of the read-only property is changed only in the View layer.","23/May/19 12:26 PM;xhstormr;The PUT request will recognize the read-only attribute, but the PATCH request will not recognize the read-only attribute. I think it may be that some operations are missing from processing the PATCH request.","23/May/19 12:31 PM;olivergierke;In fact, it's the other way round: for PATCH, we rely on Jackson's {{ObjectMapper.readerForUpdating(…)}}. I guess we actively have to remove properties that the backend considers not writable from the source node tree and only forward that.","28/May/19 3:38 PM;olivergierke;That's fixed. Feel free to give the latest snapshots a try.","23/Sep/20 5:28 PM;olivergierke;We unfortunately need to revisit the fix for this here in the course of fixing  DATAREST-1524. I looks like inspecting the persistence configuration regarding updatability is the wrong place to start with as that can be at odds with what's expected to happen at the JSON binding level. For the latter, there actually *is* e.g. {{@JsonProperty(access = Access.READ_ONLY)}}. I.e. if you want to prevent the binding to it you actually would need to annotate it that way.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1743|https://github.com/spring-projects/spring-data-rest/issues/1743]. ",,,,,,,,,,,,,,,,
The id parameter of the fromRequestId method of the BackendIdConverter class specified as non-null is null,DATAREST-1382,84373,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,xhstormr,xhstormr,22/May/19 3:23 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,05/Jun/19 8:44 AM,3.1.8 (Lovelace SR8),3.2 M4 (Moore),,,3.1.9 (Lovelace SR9),3.2 RC1 (Moore),,,,,,0,,,,,"I have a class called HashIdConverter that implements the BackendIdConverter interface:
{code:java}
object HashIdConverter : BackendIdConverter {

    override fun fromRequestId(id: String, entityType: Class<*>) =
            HashIdFormatter.parse(id)

    override fun toRequestId(id: Serializable, entityType: Class<*>) =
            HashIdFormatter.print(id.toString().toLong())

    override fun supports(delimiter: Class<*>) =
            BaseSequenceEntity::class.java.isAssignableFrom(delimiter)
}
{code}
By the way, I write code in the kotlin language.

I have an Person entity like this:
{code:java}
@Entity
@DynamicInsert
@DynamicUpdate
class Person(
        @Column(nullable = false, unique = true, updatable = false)
        val name: String,
        @Column(nullable = false)
        var country: String
) : BaseSequenceEntity() {

    @OneToMany(mappedBy = ""person"", cascade = [CascadeType.PERSIST])
    var phones: MutableList<Phone> = mutableListOf()
}
{code}
But when I create an Person entity with the curl command:
{code:bash}
curl -X POST \
  http://127.0.0.1:8080/api/persons \
  -H 'Content-Type: application/json' \
  -d '{
    ""name"": ""Dave"",
    ""country"": ""USA""
}'
{code}
the code throws an exception:
{code:bash}
2019-05-22 23:09:56.454 ERROR 43368 --- [io-8080-exec-10] c.x.e.app.config.advice.ExceptionAdvice  : ---Exception Handler--- Host 127.0.0.1 invokes url POST /api/persons ERROR: Parameter specified as non-null is null: method com.xhstormr.erp.app.common.hashid.HashIdConverter.fromRequestId, parameter id
java.lang.IllegalArgumentException: Parameter specified as non-null is null: method com.xhstormr.erp.app.common.hashid.HashIdConverter.fromRequestId, parameter id
	at com.xhstormr.erp.app.common.hashid.HashIdConverter.fromRequestId(HashIdConverter.kt)
	at com.xhstormr.erp.app.common.hashid.HashIdConverter.fromRequestId(HashIdConverter.kt:11)
	at org.springframework.data.rest.webmvc.support.BackendIdHandlerMethodArgumentResolver.resolveArgument(BackendIdHandlerMethodArgumentResolver.java:101)
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.resolveArgument(PersistentEntityResourceHandlerMethodArgumentResolver.java:130)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.AbstractRequestLoggingFilter.doFilterInternal(AbstractRequestLoggingFilter.java:262)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:835)
2019-05-22 23:09:56.456  WARN 43368 --- [io-8080-exec-10] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.IllegalArgumentException: Parameter specified as non-null is null: method com.xhstormr.erp.app.common.hashid.HashIdConverter.fromRequestId, parameter id]
{code}
The key information of the exception is：
{code}
java.lang.IllegalArgumentException: Parameter specified as non-null is null: method com.xhstormr.erp.app.common.hashid.HashIdConverter.fromRequestId, parameter id
{code}
Since I write code in kotlin, kotlin automatically performs non-null checks on non-null parameters.
I checked the documentation for the BackendIdConverter interface, which says that the id parameter of the fromRequestId method is never null:
{code:java}
	/**
	 * Returns the id of the entity to be looked up eventually.
	 *
	 * @param id the source id as it was parsed from the incoming request, will never be {@literal null}.
	 * @param entityType the type of the object to be resolved, will never be {@literal null}.
	 * @return must not be {@literal null}.
	 */
	Serializable fromRequestId(String id, Class<?> entityType);
{code}
","spring-boot-starter-data-rest:2.1.5.RELEASE
kotlin 1.3.31
java 12",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:31:50.753,9223372036854775807,issuemaster(issuemaster),,"0|i0btw7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1742|https://github.com/spring-projects/spring-data-rest/issues/1742]. ",,,,,,,,,,,,,,,,,,,,,,,
Can't PUT single-link URI references,DATAREST-1356,84005,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Complete,gregturn,bvulaj,bvulaj,01/Apr/19 1:54 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,22/Oct/19 10:23 AM,3.2 GA (Moore),3.2 M2 (Moore),3.3 M1 (Neumann),,3.2.1 (Moore SR1),3.3 M1 (Neumann),,,,,,1,,,,,Bug introduced in 554d6cb2 as referenced,,,,,,,,,,,,DATAREST-1447,,,,,,,,,,,,,,,,,,,,2019-04-01 09:56:41.055,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/364,"0|i0brmn:",9223372036854775807,9223372036854775807,https://github.com/spring-projects/spring-data-rest/commit/554d6cb27b84cebedc651a5a25b10ccfb0cf8265#diff-1d7c16fe1992fef13a47fa8ab8599718L317,,,,,,,,,,,,,"01/Apr/19 9:56 AM;olivergierke;Thanks for taking this for an early spin, Brandon. I wonder if we should add a dedicated test for that somewhere? Feel free to give it a spin or leave a hint in case you want to opt out out. I'm gonna merge this this week after we're done with our upcoming service releases.","02/Apr/19 1:53 PM;bvulaj;Hey Oliver - no worries. There were some changes and upgrades in the M2 milestone that made it easier for us to go that route than picking and choosing which library versions were compatible here and there. But I guess these are the risks of using milestones :)
 You know, I attempted to add a test for this but wasn't quite sure how to instrument it. So, unfortunately not sure I am going to be able to commit to it - I apologize. Thanks for following up.","11/Oct/19 2:43 PM;luvarqpp;Why is module spring-data-rest-tests not listed in main pom of spring-data-rest-parent artifact?

How should I run tests (at least those sitting in spring-data-rest-tests-jpa artifact)? I get exception when trying to execute any of those tests. Stripped stacktrace:
{code:java}
java.lang.IllegalStateException: Failed to load ApplicationContext

Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in org.springframework.data.rest.webmvc.jpa.JpaRepositoryConfig: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean]: Factory method 'entityManagerFactory' threw exception; nested exception is java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException
{code}
EDIT: I got it. Java compatibility. Test module does run fine with java 8, but at least with 11 and 13 does not.","15/Oct/19 7:32 AM;luvarqpp;Hi here,

I have added duplicate pull request, which is basically identic. I have also added two tests to demonstrate its just a single character addition which can fix this annoying problem.

PS: IMHO there are missing many basics scenarios, thus low coverage of basic/trivial use-cases from wild is tested.","21/Oct/19 6:17 PM;gregturn;Fixed for Neumann.

Backported for Moore SR1","21/Oct/19 6:21 PM;gregturn;Thanks to all the efforts at testing what is a single-line error, we have been able to patch it and backport it to supported versions that also have this bug. Thanks.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1719|https://github.com/spring-projects/spring-data-rest/issues/1719]. ",,,,,,,,,,,,,,,,,
Custom serializer not applied anymore,DATAREST-1342,83743,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Works as Designed,olivergierke,drenda81,drenda81,08/Feb/19 10:59 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,21/Mar/19 3:26 PM,3.0.14 (Kay SR14),3.1.5 (Lovelace SR5),,,,,,,,,,0,regression,,,,"I'm using a custom JsonSerializer for javax.validation.ConstraintViolationException:

{code:java}
@Configuration
public class GlobalRepositoryRestConfigurer implements RepositoryRestConfigurer {

    @Autowired(required = false)
    private Jackson2ObjectMapperBuilder objectMapperBuilder;

    @Autowired
    private Validator validator;

 
    /**
     * ValidationException serialiazer
     *
     * @return
     */
    @Bean
    public ValidationExceptionSerializer validationExceptionSerializer() {
        return new ValidationExceptionSerializer();
    }

    @Bean
    public CustomValidationExceptionSerializer customValidationExceptionSerializer() {
        return new CustomValidationExceptionSerializer();
    }

    @Bean
    public ConstraintViolationExceptionSerializer constraintViolationExceptionSerializer() {
        return new ConstraintViolationExceptionSerializer();
    }

    /**
     * Customize Object Mapper
     */
    @Override
    public void configureJacksonObjectMapper(ObjectMapper objectMapper) {
        if (this.objectMapperBuilder != null) {
            /**
             * Custom serializer for ConstraintViolationException
             * (https://jira.spring.io/browse/DATAREST-593)
             */
            SimpleModule constraintExceptionModule = new SimpleModule();
            constraintExceptionModule.addSerializer(ConstraintViolationException.class, constraintViolationExceptionSerializer());

            constraintExceptionModule.addSerializer(ValidationException.class, validationExceptionSerializer());
            constraintExceptionModule.addSerializer(cloud.optix.server.exceptions.ValidationException.class, customValidationExceptionSerializer());
            objectMapper.registerModule(constraintExceptionModule);
            this.objectMapperBuilder.configure(objectMapper);
        }
    }

{code}


{code:java}
public class ConstraintViolationExceptionSerializer extends JsonSerializer<ConstraintViolationException> {

    @Override
    public void serialize(ConstraintViolationException value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        gen.writeStartObject(); // {

        gen.writeFieldName(""errors""); // ""errors"" :
        gen.writeStartArray(); // [
        Iterator<ConstraintViolation<?>> iterator = value.getConstraintViolations().iterator();
        while (iterator.hasNext()) {
            gen.writeStartObject(); // {

            ConstraintViolation<?> constraintViolation = iterator.next();

            gen.writeStringField(""entity"", constraintViolation.getRootBean().getClass().getName()); // ""entity"" : """"
            gen.writeStringField(""property"", constraintViolation.getPropertyPath().toString()); // ""property"" : """"
            gen.writeStringField(""invalidValue"", format(""%s"", constraintViolation.getInvalidValue())); // ""invalidValue"" : """"
            gen.writeStringField(""message"", constraintViolation.getMessage()); // ""message"" : """"

            gen.writeEndObject(); // }
        }

        gen.writeEndArray(); // ]

        gen.writeEndObject(); // }

        gen.close();

    }

}

{code}

This is the controller I called from the client:


{code:java}

@Api(tags = ""Document Entity"")
    @RepositoryRestController
    @PreAuthorize(""isAuthenticated()"")
    public class DocumentController {
    
    
    @PostMapping(path = ""/documents"")
    	public ResponseEntity<?> save(@RequestBody(required = true) @Valid DocumentJSON document, Locale locale,
    			PersistentEntityResourceAssembler resourceAssembler) {
    		Document documentObj = documentService.save(document);
    		return new ResponseEntity<Resource<?>>(resourceAssembler.toResource(documentObj), HttpStatus.CREATED);
    	}
    }

{code}

and the service where I do a custom validation check:


{code:java}
@Service
    @Transactional
    @PreAuthorize(""isAuthenticated()"")
    public class DocumentService {
        private Logger log = LogManager.getLogger();
        
        
          @Retryable(include = DataIntegrityViolationException.class, backoff = @Backoff(delay = 20, maxDelay = 1000, multiplier = 1.5), maxAttempts = 10)
        public Document save(DocumentJSON documentJson) {
            Locale locale = LocaleContextHolder.getLocale();
            
            
            //my logic here
            
            //CUSTOM VALIDATION ON NESTED BEANS
            Set<ConstraintViolation<DocumentRow>> constraintViolations = validator.validate(row);
            if (constraintViolations.size() > 0)
                throw new ConstraintViolationException(constraintViolations);
    
        }
{code}

Using last 3.0.14 release, my JsonSerializer is not used anymore and I get instead this exception when the javax.validation.ConstraintViolationException is tring to be serialized:


{code:java}
08/02/2019 23:40:28,027  WARN http-nio-8082-exec-1 ExceptionHandlerExceptionResolver:411 - Failed to invoke @ExceptionHandler method: public org.springframework.http.ResponseEntity<?> cloud.test.server.config.exceptions.ApplicationExceptionHandler.handleValidationException(javax.validation.ConstraintViolationException,javax.servlet.http.HttpServletRequest,java.util.Locale) throws java.lang.Exception
org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Index: -1, Size: 0; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Index: -1, Size: 0 (through reference chain: javax.validation.ConstraintViolationException[""constraintViolations""]->java.util.HashSet[0]->org.hibernate.validator.internal.engine.ConstraintViolationImpl[""propertyPath""]->org.hibernate.validator.internal.engine.path.PathImpl[""pathWithoutLeafNode""]->org.hibernate.validator.internal.engine.path.PathImpl[""pathWithoutLeafNode""])
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:296) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:102) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:272) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:224) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:119) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:404) [spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:61) [spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:139) [spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:78) [spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1255) [spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1062) [spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1008) [spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925) [spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974) [spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877) [spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851) [spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at cloud.test.server.filters.StoreFilter.doFilterInternal(StoreFilter.java:34) [classes/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:158) [spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE]
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:126) [spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE]
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:111) [spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90) [spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at cloud.test.server.filters.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:144) [classes/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at cloud.test.server.filters.TenantFilter.doFilterInternal(TenantFilter.java:30) [classes/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_181]
Caused by: com.fasterxml.jackson.databind.JsonMappingException: Index: -1, Size: 0 (through reference chain: javax.validation.ConstraintViolationException[""constraintViolations""]->java.util.HashSet[0]->org.hibernate.validator.internal.engine.ConstraintViolationImpl[""propertyPath""]->org.hibernate.validator.internal.engine.path.PathImpl[""pathWithoutLeafNode""]->org.hibernate.validator.internal.engine.path.PathImpl[""pathWithoutLeafNode""])
	at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:394) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:353) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(StdSerializer.java:316) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:727) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:719) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:719) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:719) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1396) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:913) ~[jackson-databind-2.9.8.jar:2.9.8]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:286) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	... 114 more
Caused by: java.lang.IndexOutOfBoundsException: Index: -1, Size: 0
	at java.util.ArrayList$SubList.rangeCheck(ArrayList.java:1225) ~[?:1.8.0_181]
	at java.util.ArrayList$SubList.get(ArrayList.java:1042) ~[?:1.8.0_181]
	at org.hibernate.validator.internal.engine.path.PathImpl.<init>(PathImpl.java:375) ~[hibernate-validator-6.0.10.Final.jar:6.0.10.Final]
	at org.hibernate.validator.internal.engine.path.PathImpl.getPathWithoutLeafNode(PathImpl.java:113) ~[hibernate-validator-6.0.10.Final.jar:6.0.10.Final]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_181]
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:688) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:719) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:719) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:719) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:719) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1396) ~[jackson-databind-2.9.8.jar:2.9.8]
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:913) ~[jackson-databind-2.9.8.jar:2.9.8]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:286) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	... 114 more
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,"18/Feb/19 2:54 PM;drenda81;debug.png;https://jira.spring.io/secure/attachment/26184/debug.png",,,,,,2019-02-11 08:17:43.252,9223372036854775807,issuemaster(issuemaster),,"0|i0bq0f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"11/Feb/19 8:17 AM;olivergierke;Which version did you see this working in before? I'm just trying to find out which of the changes we made could've caused this.","11/Feb/19 2:54 PM;drenda81;[~olivergierke] It works until spring-data-rest-core 3.0.8RELEASE. From 3.0.9RELEASE it doesn't work anymore. Thanks very much!","18/Feb/19 10:55 AM;drenda81;Hi [~olivergierke] as cross reference I link the issue I filed in Hibernate-Validator: https://hibernate.atlassian.net/browse/HV-1691","18/Feb/19 11:41 AM;olivergierke;It looks like our upgrade to Spring HATEOAS 0.25 is causing this in which we significantly changed the way the registration for {{ObjectMapper}} instances works. Do you still see the configuration code being executed? As far as I can see it should be. If so, in {{RepositoryRestMvcConfiguration.basicObjectMapper()}} do you see the {{objectMapper.getIfAvailable()}} return {{null}} or an existing instance?

A sample project reproducing the issue would be incredibly helpful.","18/Feb/19 2:55 PM;drenda81;[~olivergierke] you are right, the configuration code is executed. The objectMapper.getIfAvailable() returns an existing instance.  !debug.png|thumbnail! ","11/Mar/19 5:00 PM;drenda81;Is the screenshot posted useful in some way? Thanks","21/Mar/19 1:16 PM;olivergierke;Unfortunately it is not. I'm not quite sure the way you register the serializers is correct but I am not into the details of how Boot handles this. What I know for sure is that beans of type {{Module}} are registered with the default {{ObjectMapper}} created. I.e. have you tried to simply create an {{@Bean}} method that returns a module that has the serializers registered that you want to see applied?

My Spring RESTBucks example has this working as you can see [here|https://github.com/odrotbohm/spring-restbucks/blob/55eab9516a347b98a5d20bb76543e4393a760b75/src/main/java/org/springsource/restbucks/JacksonCustomizations.java#L66-L68].","21/Mar/19 2:21 PM;drenda81;[~olivergierke] as always you give incredible hints. It seems I solved the problem. Like you said I had to configure a Module in my RepositoryRestConfigurer impl in this way:

 

 
{code:java}
@Bean
public Module customJacksonModule() {
    SimpleModule customJacksonModule = new SimpleModule();
    customJacksonModule.addSerializer(ConstraintViolationException.class, constraintViolationExceptionSerializer());
    customJacksonModule.addSerializer(ValidationException.class, validationExceptionSerializer());
    customJacksonModule.addSerializer(cloud.optix.server.exceptions.ValidationException.class, customValidationExceptionSerializer());
    return customJacksonModule;
}
{code}
In fact you are right, from the documentation: ""Any beans of type {{com.fasterxml.jackson.databind.Module}} are automatically registered with the auto-configured {{Jackson2ObjectMapperBuilder}} and are applied to any {{ObjectMapper}} instances that it creates. This provides a global mechanism for contributing custom modules when you add new features to your application.""

Summarizing this is how my configuration looks like:

 
{code:java}
@Configuration
public class GlobalRepositoryRestConfigurer implements RepositoryRestConfigurer {
 private Logger log = LogManager.getLogger();
@Autowired
 private Validator validator;

 @Override
 public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {
 config.getCorsRegistry().addMapping(corsMapping).exposedHeaders(corsExposedHeaders).allowedOrigins(corsAllowedOrigins)
 .allowedHeaders(corsAllowedHeaders).allowedMethods(corsAllowedMethod).maxAge(corsMaxAge);
}
@Override
 public void configureConversionService(ConfigurableConversionService conversionService) {
}
/**
 * ValidationException serialiazer
 *
 * @return
 */
 @Bean
 public ValidationExceptionSerializer validationExceptionSerializer() {
 return new ValidationExceptionSerializer();
 }
@Bean
 public CustomValidationExceptionSerializer customValidationExceptionSerializer() {
 return new CustomValidationExceptionSerializer();
 }
@Bean
 public ConstraintViolationExceptionSerializer constraintViolationExceptionSerializer() {
 return new ConstraintViolationExceptionSerializer();
 }
/**
 * https://docs.spring.io/spring-boot/docs/current/reference/html/howto-spring-mvc.html#howto-customize-the-jackson-objectmapper
 * <p>
 * Any beans of type com.fasterxml.jackson.databind.Module are automatically registered with the auto-configured Jackson2ObjectMapperBuilder and are applied
 * to any ObjectMapper instances that it creates.
 * This provides a global mechanism for contributing custom modules when you add new features to your application.
 * <p>
 * Customize serializer for Spring's ObjectMapper
 *
 * @return
 */
 @Bean
 public Module customJacksonModule() {
 SimpleModule customJacksonModule = new SimpleModule();
 customJacksonModule.addSerializer(ConstraintViolationException.class, constraintViolationExceptionSerializer());
 customJacksonModule.addSerializer(ValidationException.class, validationExceptionSerializer());
 customJacksonModule.addSerializer(cloud.optix.server.exceptions.ValidationException.class, customValidationExceptionSerializer());
 return customJacksonModule;
 }
@Override
 public void configureValidatingRepositoryEventListener(ValidatingRepositoryEventListener validatingListener) {
 validatingListener.addValidator(""beforeCreate"", validator);
 validatingListener.addValidator(""beforeSave"", validator);
 // super.configureValidatingRepositoryEventListener(validatingListener);
 }
 
/**
 * Adding converter to donwload files in{@link org.springframework.web.bind.annotation.RestController}
 *
 * @param messageConverters
 */
 @Override
 public void configureHttpMessageConverters(List<HttpMessageConverter<?>> messageConverters) {
 // super.configureHttpMessageConverters(messageConverters);
 messageConverters.add(new ResourceHttpMessageConverter());
 }
}
{code}
 

 

 

*Very important*: I had to remove the declaration:

 
{code:java}
 @Autowired(required = false)
 private Jackson2ObjectMapperBuilder objectMapperBuilder;
{code}
otherwise I had always the same exception.

 

Does everything make sense to you?

 

Thanks

 

 ","21/Mar/19 2:38 PM;olivergierke;I still don't entirely get why working with the {{Jackson2ObjectMapperBuilder}} does not work. However, it's great to hear that you found a way to get it working and it's the way the documentation describes in the first place. I'd resolve this one as works as designed as you can now hopefully upgrade?","21/Mar/19 3:01 PM;drenda81;Yeah thanks I happily upgraded to Spring 2.1.3!","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1704|https://github.com/spring-projects/spring-data-rest/issues/1704]. ",,,,,,,,,,,,,
JSON patch doesn't update single Map's values,DATAREST-1338,83661,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,Kerruba,Kerruba,18/Jan/19 10:01 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,05/Mar/19 1:06 PM,,,,,3.1.6 (Lovelace SR6),3.2 M2 (Moore),,,,,,0,Json-patch,spring-data-rest,,,"*Steps to reproduce:*
{code:java}
//Here is my object
public class Book {
    public String author;
    public String ISBN;
    public Map<String, String> characters;
}

// Here I create a simple instance of the object
Book myBook = new Book();
myBook.author = ""Me""
myBook.ISBN = ""1234567890""
myBook.characters = new HashMap<>();
myBook.characters.put(""protagonist"", ""Pinco"");
myBook.characters.put(""antagonist"", ""Pallo"");
{code}
Here I create JSON patches
{code:java}
// Here the type of operations that work
[
    {""op"": ""replace"", ""path"": ""/author"", ""value"": ""NewAuthor""},
    {""op"": ""replace"", ""path"": ""/ISBN"", ""value"": 0987654321 },
]

// I can also modify completely the Map if I want
[
    {""op"": ""replace"", ""path"": ""/characters"", ""value"": {""protagonist"": ""Pallo"", ""antagonist"": ""Pinco""} }
]
  {code}

 Here the kind of operations that I would expect to work but do not work
{code:java}
// But I can't update a single value in the map 
[ 
{""op"": ""replace"", ""path"": ""/characters/protagonist"", ""value"": ""Pallo"" }, {""op"": ""replace"", ""path"": ""/characters/antagonist"", ""value"": ""Pinco"" } 
] 

// I've also tried weird stuff, but doesn't work 
[ {""op"": ""replace"", ""path"": ""/characters[antagonist]"", ""value"": ""Pinco""} ]  {code}
 
 *Expected result:*
 I would expect the replace operation on the nested map to work by checking the key.
  
 I think the issue is in the path->SpEL conversion, as the nested fields are automatically converted to properties updates.
  ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2019-01-18 11:34:41.718,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/305,"0|i0bpi7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18/Jan/19 11:34 AM;olivergierke;You're right, it's currently a limitation in our to SpEL translations. It's particularly tricky as we have to but by definition cannot statically verify the paths containing a {{Map}} traversal as it needs an object instance to be verified on. Our current verification algorithm can safely identify collection traversals as it can inspect numbers. For maps however it's not clear whether a segment is a map key until we bind the path against a type.

It looks like we need to improve {{TypedSpelPath.verifyPath(…)}} to not choke on the map key segment and {{TypedSpelPath(SpelPath, Class<?>)}} to rebuild the expression based on the type information so that segments are translated into map keys properly.","29/Jan/19 1:14 PM;olivergierke;Should be back-portable to 3.1 and 3.0 (latter optional).","06/Feb/19 2:46 PM;mle-enso;Wonderful, just verified this for our use-case to PATCH an entity like:
{code:java}
// some Lombok annotations
public class Product {
    private String id;
    private Map<Locale, String> names;
}
{code}
with the following change:
{code:java}
[{""op"", ""remove"", ""path"", ""names/fr""}]
{code}
…which did not work before.","05/Mar/19 1:06 PM;olivergierke;That's now merged for inclusion in Spring Data Moore M2 and Lovelace SR6. Backport to Kay unfortunately didn't work as the implementation was using API implemented in Spring Data Commons in Lovelace only.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1697|https://github.com/spring-projects/spring-data-rest/issues/1697]. ",,,,,,,,,,,,,,,,,,,
UnsupportedCassandraOperationException when exposing by rest cassandra repository,DATAREST-1337,83657,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Critical,Fixed,olivergierke,ragnor,ragnor,17/Jan/19 8:08 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,03/Mar/19 11:44 AM,3.1.4 (Lovelace SR4),,,,,,,,,,,0,,,,,"After migration from 3.0.9 to 3.1.4 below exception occurs:

{code:java}
org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.data.cassandra.core.mapping.UnsupportedCassandraOperationException: Cassandra does not support associations
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1013)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:645)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:71)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:750)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:166)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:182)
	at com.my.controller.MySampleControllerRestTest.findById(MySampleControllerRestTest.java:134)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:532)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:115)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:170)
	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:166)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:113)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:58)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:108)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1378)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:112)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1378)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:112)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:92)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$100(JUnitPlatformTestClassProcessor.java:77)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:73)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy2.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:131)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137)
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1135)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
	at java.base/java.lang.Thread.run(Thread.java:844)
Caused by: org.springframework.data.cassandra.core.mapping.UnsupportedCassandraOperationException: Cassandra does not support associations
	at org.springframework.data.cassandra.core.mapping.BasicCassandraPersistentEntity.doWithAssociations(BasicCassandraPersistentEntity.java:146)
	at org.springframework.data.mapping.context.PersistentPropertyPathFactory.from(PersistentPropertyPathFactory.java:265)
	at org.springframework.data.mapping.context.PersistentPropertyPathFactory.lambda$from$3(PersistentPropertyPathFactory.java:258)
	at org.springframework.data.mapping.model.BasicPersistentEntity.doWithProperties(BasicPersistentEntity.java:355)
	at org.springframework.data.mapping.context.PersistentPropertyPathFactory.from(PersistentPropertyPathFactory.java:262)
	at org.springframework.data.mapping.context.PersistentPropertyPathFactory.from(PersistentPropertyPathFactory.java:167)
	at org.springframework.data.mapping.context.AbstractMappingContext.doFindPersistentPropertyPaths(AbstractMappingContext.java:322)
	at org.springframework.data.mapping.context.AbstractMappingContext.findPersistentPropertyPaths(AbstractMappingContext.java:306)
	at org.springframework.data.auditing.MappingAuditableBeanWrapperFactory$MappingAuditingMetadata.findPropertyPaths(MappingAuditableBeanWrapperFactory.java:145)
	at org.springframework.data.auditing.MappingAuditableBeanWrapperFactory$MappingAuditingMetadata.<init>(MappingAuditableBeanWrapperFactory.java:119)
	at org.springframework.data.auditing.MappingAuditableBeanWrapperFactory.lambda$null$0(MappingAuditableBeanWrapperFactory.java:84)
	at java.base/java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:330)
	at org.springframework.data.auditing.MappingAuditableBeanWrapperFactory.lambda$null$1(MappingAuditableBeanWrapperFactory.java:83)
	at org.springframework.data.mapping.context.PersistentEntities.lambda$mapOnContext$4(PersistentEntities.java:115)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)
	at java.base/java.util.Spliterators$IteratorSpliterator.tryAdvance(Spliterators.java:1812)
	at java.base/java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:127)
	at java.base/java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:502)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:488)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:150)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:543)
	at org.springframework.data.mapping.context.PersistentEntities.mapOnContext(PersistentEntities.java:116)
	at org.springframework.data.auditing.MappingAuditableBeanWrapperFactory.lambda$getBeanWrapperFor$3(MappingAuditableBeanWrapperFactory.java:81)
	at java.base/java.util.Optional.flatMap(Optional.java:283)
	at org.springframework.data.auditing.MappingAuditableBeanWrapperFactory.getBeanWrapperFor(MappingAuditableBeanWrapperFactory.java:75)
	at org.springframework.data.rest.webmvc.HttpHeadersPreparer.getAuditableBeanWrapper(HttpHeadersPreparer.java:116)
	at org.springframework.data.rest.webmvc.HttpHeadersPreparer.getLastModifiedInMilliseconds(HttpHeadersPreparer.java:121)
	at org.springframework.data.rest.webmvc.HttpHeadersPreparer.prepareHeaders(HttpHeadersPreparer.java:83)
	at org.springframework.data.rest.webmvc.ResourceStatus.getStatusAndHeaders(ResourceStatus.java:71)
	at org.springframework.data.rest.webmvc.RepositoryEntityController.lambda$getItemResource$3(RepositoryEntityController.java:337)
	at java.base/java.util.Optional.map(Optional.java:254)
	at org.springframework.data.rest.webmvc.RepositoryEntityController.getItemResource(RepositoryEntityController.java:333)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	... 71 more
{code}

The exception occurs on a repository marked with @RepositoryRestResource that exposes cassandra entity/resource. ",,,,,,,,,,,,,,,,,,,,,,,,DATACASS-633,,,,,,,,2019-01-17 10:54:42.876,9223372036854775807,issuemaster(issuemaster),,"0|i0bphb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"17/Jan/19 10:54 AM;mp911de;If you would like us to spend some time helping you to diagnose the problem, please spend some time describing it and, ideally, providing a minimal sample that reproduces the problem.","18/Jan/19 8:32 AM;ragnor;I think that reason of the exception are changes in MappingAuditableBeanWrapperFactory in version 3.0.9 (spring-data-commons 2.0.x)  to check if @CreatedBy is used on entity such code is used: 
{code}
this.createdByProperty = Optional.ofNullable(entity.getPersistentProperty(CreatedBy.class));
{code}
in version 3.1.4 (spring-data-commons 2.1.x) AbstractMappingContext and PersistentPropertyPathFactory are used.

Changes were introduced in: https://github.com/spring-projects/spring-data-commons/commit/170c25d3555ee954e542e34442853d36122c3077#diff-b69b7f8521ff2164847e41eb5252a502","25/Feb/19 9:06 PM;mcarvalho;I have the same behavior

 

My entity:

 
{code:java}
//Language.java
@Table
public class Language {
   @PrimaryKey
   private UUID id = UUID.randomUUID();

   @Column
   private String code;

   @Column
   private String name;

//getters and setters
}{code}
 

My repository class:

 
{code:java}
@RepositoryRestResource
public interface LanguageRepository extends CassandraRepository<Language, UUID> {
}
{code}
 

The problem:
 # Sending a POST containing 
{code:java}
{""code"":""en"",""name"":""english""}{code}

 # The entity is successfully inserted, however the outcome of the request is: 
{code:java}
Status: 500

Body:

org.springframework.data.cassandra.core.mapping.UnsupportedCassandraOperationException: Cassandra does not support associations
	at org.springframework.data.cassandra.core.mapping.BasicCassandraPersistentEntity.doWithAssociations(BasicCassandraPersistentEntity.java:146) ~[spring-data-cassandra-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.data.mapping.context.PersistentPropertyPathFactory.from(PersistentPropertyPathFactory.java:265) ~[spring-data-commons-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.data.mapping.context.PersistentPropertyPathFactory.from(PersistentPropertyPathFactory.java:167) ~[spring-data-commons-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.data.mapping.context.AbstractMappingContext.doFindPersistentPropertyPaths(AbstractMappingContext.java:322) ~[spring-data-commons-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.data.mapping.context.AbstractMappingContext.findPersistentPropertyPaths(AbstractMappingContext.java:306) ~[spring-data-commons-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.data.auditing.MappingAuditableBeanWrapperFactory$MappingAuditingMetadata.findPropertyPaths(MappingAuditableBeanWrapperFactory.java:145) ~[spring-data-commons-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.data.auditing.MappingAuditableBeanWrapperFactory$MappingAuditingMetadata.<init>(MappingAuditableBeanWrapperFactory.java:119) ~[spring-data-commons-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.data.auditing.MappingAuditableBeanWrapperFactory.lambda$null$0(MappingAuditableBeanWrapperFactory.java:84) ~[spring-data-commons-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_201]
	at org.springframework.data.auditing.MappingAuditableBeanWrapperFactory.lambda$null$1(MappingAuditableBeanWrapperFactory.java:83) ~[spring-data-commons-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.data.mapping.context.PersistentEntities.lambda$mapOnContext$4(PersistentEntities.java:115) ~[spring-data-commons-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[na:1.8.0_201]
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[na:1.8.0_201]
	at java.util.Spliterators$IteratorSpliterator.tryAdvance(Spliterators.java:1812) ~[na:1.8.0_201]
	at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126) ~[na:1.8.0_201]
	at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498) ~[na:1.8.0_201]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) ~[na:1.8.0_201]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[na:1.8.0_201]
	at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152) ~[na:1.8.0_201]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[na:1.8.0_201]
	at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464) ~[na:1.8.0_201]
	at org.springframework.data.mapping.context.PersistentEntities.mapOnContext(PersistentEntities.java:116) ~[spring-data-commons-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.data.auditing.MappingAuditableBeanWrapperFactory.lambda$getBeanWrapperFor$3(MappingAuditableBeanWrapperFactory.java:81) ~[spring-data-commons-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at java.util.Optional.flatMap(Optional.java:241) ~[na:1.8.0_201]
	at org.springframework.data.auditing.MappingAuditableBeanWrapperFactory.getBeanWrapperFor(MappingAuditableBeanWrapperFactory.java:75) ~[spring-data-commons-2.1.4.RELEASE.jar:2.1.4.RELEASE]
	at org.springframework.data.rest.webmvc.HttpHeadersPreparer.getAuditableBeanWrapper(HttpHeadersPreparer.java:116) ~[spring-data-rest-webmvc-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.data.rest.webmvc.HttpHeadersPreparer.getLastModifiedInMilliseconds(HttpHeadersPreparer.java:121) ~[spring-data-rest-webmvc-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.data.rest.webmvc.HttpHeadersPreparer.prepareHeaders(HttpHeadersPreparer.java:83) ~[spring-data-rest-webmvc-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.data.rest.webmvc.HttpHeadersPreparer.lambda$prepareHeaders$0(HttpHeadersPreparer.java:62) ~[spring-data-rest-webmvc-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at java.util.Optional.map(Optional.java:215) ~[na:1.8.0_201]
	at org.springframework.data.rest.webmvc.HttpHeadersPreparer.prepareHeaders(HttpHeadersPreparer.java:62) ~[spring-data-rest-webmvc-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.data.rest.webmvc.RepositoryEntityController.createAndReturn(RepositoryEntityController.java:486) ~[spring-data-rest-webmvc-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.data.rest.webmvc.RepositoryEntityController.postCollectionResource(RepositoryEntityController.java:272) ~[spring-data-rest-webmvc-3.1.4.RELEASE.jar:3.1.4.RELEASE]
{code}","26/Feb/19 1:19 PM;olivergierke;[~mp911de] – Do you think we could we could soften that constraint to just let {{doWithAssociations(…)}} do nothing? I think the correct path to reject is adding an association, not traversing it. The former would be in fact invalid as Cassandra doesn't support associations. The latter however should be a safe operation as it will be a no-op by definition and clients calling the method shouldn't have to know whether they can call it or not. The {{MutablePersistentEntity}} interface is only seen during the initial construction of the entity anyway.","26/Feb/19 1:42 PM;mp911de;Yes, we should do that. I filed DATACASS-633 so we can close this ticket in favor of the new one.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1696|https://github.com/spring-projects/spring-data-rest/issues/1696]. ",,,,,,,,,,,,,,,,,,
NullPointerException in RepositoryRestHandlerMapping during preflight request,DATAREST-1332,83547,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,drenda81,drenda81,07/Jan/19 9:35 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,07/Feb/19 8:26 PM,3.0.13 (Kay SR13),,,,3.0.14 (Kay SR14),3.1.5 (Lovelace SR5),3.2 M2 (Moore),,,,,1,,,,,"I tried the 3.0.13 build that fixed a bug I reported: https://jira.spring.io/browse/DATAREST-1320.
Immediately I had another NullPointerException using some methods inside my Repository during preflight requests of the browser.

This is the repository I'm using:


{code:java}
@Transactional
@PreAuthorize(""isAuthenticated()"")
public interface ContactRepository extends JpaRepository<Contact, Long> {


	@Query(value = ""SELECT c FROM Contact c WHERE :searchString IS NULL OR (companyName LIKE CONCAT(:searchString,'%')) OR (CONCAT(lastName,' ',firstName) LIKE CONCAT(:searchString,'%')) OR (taxCode=:searchString)"")
	public Page<Contact> autocomplete(@Param(""searchString"") String searchString, Pageable pageable);
}
{code}

this is the exception:


{code:java}
07/01/2019 22:19:52,180 ERROR http-nio-8082-exec-7 [dispatcherServlet]:182 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.exposeEffectiveLookupPathKey(RepositoryRestHandlerMapping.java:264) ~[spring-data-rest-webmvc-3.0.13.BUILD-20190107.023034-47.jar:3.0.13.BUILD-SNAPSHOT]
	at org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.lookupHandlerMethod(RepositoryRestHandlerMapping.java:165) ~[spring-data-rest-webmvc-3.0.13.BUILD-20190107.023034-47.jar:3.0.13.BUILD-SNAPSHOT]
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:316) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:62) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:350) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.data.rest.webmvc.support.DelegatingHandlerMapping$HandlerSelectionResult.from(DelegatingHandlerMapping.java:108) ~[spring-data-rest-webmvc-3.0.13.BUILD-20190107.023034-47.jar:3.0.13.BUILD-SNAPSHOT]
	at org.springframework.data.rest.webmvc.support.DelegatingHandlerMapping.getHandler(DelegatingHandlerMapping.java:74) ~[spring-data-rest-webmvc-3.0.13.BUILD-20190107.023034-47.jar:3.0.13.BUILD-SNAPSHOT]
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1188) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:964) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doOptions(FrameworkServlet.java:913) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:670) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at cloud.test.server.filters.StoreFilter.doFilterInternal(StoreFilter.java:34) ~[classes/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:123) ~[spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE]
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:111) ~[spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90) ~[spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at cloud.test.server.filters.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:141) ~[classes/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at cloud.test.server.filters.TenantFilter.doFilterInternal(TenantFilter.java:30) ~[classes/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_181]

{code}

[Screenshot of the http request|https://snag.gy/v8LKOo.jpg]

[Debug screenshot 1 |https://snag.gy/MbVilp.jpg]

[Debug screenshot 2 |https://snag.gy/lJv1jL.jpg]

From debug's screenshots you see that mappingInfo is null. If you need more details please ask me.

Thanks
",,,,,,,,,,,,,,,,,,,,,,,,,,"07/Jan/19 9:34 PM;drenda81;Schermata 2019-01-07 alle 22.21.55.png;https://jira.spring.io/secure/attachment/26171/Schermata+2019-01-07+alle+22.21.55.png","07/Jan/19 9:34 PM;drenda81;Schermata 2019-01-07 alle 22.27.27.png;https://jira.spring.io/secure/attachment/26170/Schermata+2019-01-07+alle+22.27.27.png","07/Jan/19 9:34 PM;drenda81;Schermata 2019-01-07 alle 22.27.53.png;https://jira.spring.io/secure/attachment/26169/Schermata+2019-01-07+alle+22.27.53.png",,,,2019-01-25 12:23:41.58,9223372036854775807,issuemaster(issuemaster),,"0|i0bosv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"17/Jan/19 8:05 PM;drenda81;Hi, could someone confirm this bug please? Thanks","25/Jan/19 12:23 PM;Benoit Besson;I face the same problem.

In debug mode, I found that the exception is sent when called with :
 * header with ""Origin""
 * HTTP request of type OPTION
 * header with Access-Control-Request-Method

Consequently, the call to CorsUtils.isPreFlightRequest() returns true and disable filter when calling ProducesRequestCondition.getMatchingCondition() returning [] instead of [application/hal+json].

Then, the mappingInfo variable is returned as null.

Anybody can help with this ?

Thanks.","29/Jan/19 5:30 PM;beennnn;It is related to this commit when adding the method RepositoryRestHandlerMapping.exposeEffectiveLookupPathKey :

[https://github.com/spring-projects/spring-data-rest/commit/3f0eb17dcf2cc3aba29c55133a3793990fcf8858]","05/Feb/19 4:47 PM;drenda81;Does anyone has some news about this possible regression? Thanks","06/Feb/19 1:00 AM;beennnn;I succeeded with this fix :
{code:java}
private void exposeEffectiveLookupPathKey(HandlerMethod method, HttpServletRequest request, String repositoryBasePath) {
   RequestMappingInfo mappingInfo = getMappingForMethod(method.getMethod(), method.getBeanType());
   // QUICK FIX 
   if (mappingInfo != null) { 
     String pattern = mappingInfo.getPatternsCondition() // 
                                                  .getMatchingCondition(request)// 
                                                  .getPatterns() // 
                                                  .iterator().next(); 
     request.setAttribute(EFFECTIVE_LOOKUP_PATH_ATTRIBUTE, PARSER.parse(pattern.replace(""/{repository}"", repositoryBasePath)));
   }
 } {code}","06/Feb/19 8:01 AM;drenda81;Thanks for sharing [~beennnn]. I hope a fix will be released soon.","07/Feb/19 8:26 PM;olivergierke;This should be fixed and available in the latest snapshots for the methods marked as fixed. First upcoming release of the three is Lovelace 3.1.5 mid next week for inclusion in Boot 2.1.3.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1691|https://github.com/spring-projects/spring-data-rest/issues/1691]. ",,,,,,,,,,,,,,,,
Proxy class detection for Hibernate 5 fails,DATAREST-1322,83445,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,alienisty,alienisty,19/Dec/18 3:31 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,20/Dec/18 4:23 PM,3.1.3 (Lovelace SR3),,,,3.0.13 (Kay SR13),3.1.4 (Lovelace SR4),3.2 M2 (Moore),,,,,0,,,,,"Proxies in Hibernate are no longer created using CGLIB and they use a different class separator.

Becuase of that, Hibernate proxied classes are not unproxied when looking up, for example, for ResourceMetadata, and we get the wrong information back.

For example, hrefs for links of lazy loaded relationships end up using the default rel because the correct mapping is not found and, if we defined a custom rel in the repository, incorrect href will be generated.",,,,,,,,,,,,,,,,,,,,,,DATAREST-1325,,,,,,,,,,2018-12-20 16:23:38.66,9223372036854775807,issuemaster(issuemaster),,"0|i0bo6f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"19/Dec/18 5:53 AM;alienisty;I just found out that spring-data-common has the concept of ProxyDetectors, I think that the use of ClassUtils.getUserClass() should be replaced by ProxyUtils.getUserClass() across the board in spring-data.","19/Dec/18 11:28 PM;alienisty;I've also noted that the spring-data-rest-partent pom still references hibernate 4.3.10.Final as version to test against, it would probably be a good idea to upgrade that as well.","20/Dec/18 4:23 PM;olivergierke;That's in place. I've fixed the Hibernate upgrade in DATAREST-1325 as we cannot back-port this unfortunately. However, the fix for this ticket here can be back-ported and thus make Spring Data REST projects on Kay and Lovelace Hibernate 5.x compatible.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1681|https://github.com/spring-projects/spring-data-rest/issues/1681]. ",,,,,,,,,,,,,,,,,,,,
NullPointerException when ResourceMetadata not found for a specific type,DATAREST-1320,83420,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,drenda81,drenda81,14/Dec/18 11:46 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,21/Dec/18 2:15 PM,3.0.12 (Kay SR12),3.1.3 (Lovelace SR3),3.2 M1 (Moore),,3.0.13 (Kay SR13),3.1.4 (Lovelace SR4),3.2 M2 (Moore),,Infrastructure,,,0,,,,,"I'm incurring in a NullPointerException in my application. I described [here |https://stackoverflow.com/questions/53776735/spring-httpmessagenotwritableexception-could-not-write-json-nullpointerexceptio]my code and the Exception I got.
{code:java}
14/12/2018 09:51:58,550  INFO http-nio-8082-exec-5 FrameController:110 - Grouped result, size:40,total results: 8,  [47, 49, 50, 51, 52, 53, 55, 58]
14/12/2018 09:51:58,560 ERROR http-nio-8082-exec-5 ApplicationExceptionHandler:133 - 
org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: (was java.lang.NullPointerException); nested exception is com.fasterxml.jackson.databind.JsonMappingException: (was java.lang.NullPointerException) (through reference chain: org.springframework.hateoas.PagedResources[""_embedded""])
    at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:296) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:102) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:272) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:224) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.hateoas.mvc.ResourceProcessorHandlerMethodReturnValueHandler.handleReturnValue(ResourceProcessorHandlerMethodReturnValueHandler.java:114) ~[spring-hateoas-0.24.0.RELEASE.jar:?]
    at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:119) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991) [spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925) [spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974) [spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877) [spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:661) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851) [spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at cloud.test.server.filters.StoreFilter.doFilterInternal(StoreFilter.java:34) [classes/:?]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:158) [spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE]
    at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:126) [spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE]
    at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:111) [spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90) [spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at cloud.test.server.filters.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:141) [classes/:?]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at cloud.test.server.filters.TenantFilter.doFilterInternal(TenantFilter.java:30) [classes/:?]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_181]
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_181]
    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.31.jar:8.5.31]
    at java.lang.Thread.run(Thread.java:748) [?:1.8.0_181]
Caused by: com.fasterxml.jackson.databind.JsonMappingException: (was java.lang.NullPointerException) (through reference chain: org.springframework.hateoas.PagedResources[""_embedded""])
    at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:391) ~[jackson-databind-2.9.6.jar:2.9.6]
    at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:351) ~[jackson-databind-2.9.6.jar:2.9.6]
    at com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(StdSerializer.java:316) ~[jackson-databind-2.9.6.jar:2.9.6]
    at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:727) ~[jackson-databind-2.9.6.jar:2.9.6]
    at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155) ~[jackson-databind-2.9.6.jar:2.9.6]
    at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480) ~[jackson-databind-2.9.6.jar:2.9.6]
    at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319) ~[jackson-databind-2.9.6.jar:2.9.6]
    at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1396) ~[jackson-databind-2.9.6.jar:2.9.6]
    at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:913) ~[jackson-databind-2.9.6.jar:2.9.6]
    at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:286) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    ... 113 more
Caused by: java.lang.NullPointerException
    at org.springframework.data.rest.core.support.RepositoryRelProvider.getCollectionResourceRelFor(RepositoryRelProvider.java:52) ~[spring-data-rest-core-3.0.8.RELEASE.jar:3.0.8.RELEASE]
    at org.springframework.hateoas.core.DelegatingRelProvider.getCollectionResourceRelFor(DelegatingRelProvider.java:50) ~[spring-hateoas-0.24.0.RELEASE.jar:?]
    at org.springframework.hateoas.hal.HalEmbeddedBuilder.getDefaultedRelFor(HalEmbeddedBuilder.java:125) ~[spring-hateoas-0.24.0.RELEASE.jar:?]
    at org.springframework.hateoas.hal.HalEmbeddedBuilder.add(HalEmbeddedBuilder.java:78) ~[spring-hateoas-0.24.0.RELEASE.jar:?]
    at org.springframework.hateoas.hal.Jackson2HalModule$EmbeddedMapper.map(Jackson2HalModule.java:904) ~[spring-hateoas-0.24.0.RELEASE.jar:?]
    at org.springframework.hateoas.hal.Jackson2HalModule$HalResourcesSerializer.serialize(Jackson2HalModule.java:338) ~[spring-hateoas-0.24.0.RELEASE.jar:?]
    at org.springframework.hateoas.hal.Jackson2HalModule$HalResourcesSerializer.serialize(Jackson2HalModule.java:308) ~[spring-hateoas-0.24.0.RELEASE.jar:?]
    at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727) ~[jackson-databind-2.9.6.jar:2.9.6]
    at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:719) ~[jackson-databind-2.9.6.jar:2.9.6]
    at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155) ~[jackson-databind-2.9.6.jar:2.9.6]
    at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480) ~[jackson-databind-2.9.6.jar:2.9.6]
    at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319) ~[jackson-databind-2.9.6.jar:2.9.6]
    at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1396) ~[jackson-databind-2.9.6.jar:2.9.6]
    at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:913) ~[jackson-databind-2.9.6.jar:2.9.6]
    at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:286) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
    ... 113 more
14/12/2018 09:51:58,572 DEBUG http-nio-8082-exec-5 ApplicationExceptionHandler:263 - 
{code}
I found the problem is in org.springframework.data.rest.core.support.RepositoryRelProvider, line 52:

 
{code:java}
@Override
public String getCollectionResourceRelFor(Class<?> type) {
   return mappings.getObject().getMetadataFor(type).getRel();
}
{code}
The problem arises when mappings.getObject().getMetadataFor(type) is null. In my case the type is a String and it's not found a metadata for it.

With further investigation I discovered the problem happens IF I invoke the exposed endpoint:


{code:java}
@Transactional @PreAuthorize(""isAuthenticated()"") public interface ContactRepository extends JpaRepository {

 @Query(value = ""SELECT c FROM Contact c WHERE :searchString IS NULL OR (companyName LIKE CONCAT(:searchString,'%')) OR (CONCAT(lastName,' ',firstName) LIKE CONCAT(:searchString,'%'))"")
    public Page<Contact> autocomplete(@Param(""searchString"") String searchString, Pageable pageable);

}
{code}

In fact in this case in *RepositorySearchController.executeQueryMethod()* it detects the param is a String and it invokes *ResourceMetadata metadata = mappings.getMetadataFor(domainType.getType());* that in *PersistentEntitiesResourceMappings* put a null in the cache of *ResourceMetadata*.

Not sure if this is the cause of the bug of just a conseguence, but if I move my endpoint in a controller that invoke that repository, then everything is fine.
",,,,,,,,,,,,,,,,,DATAREST-1250,,,,,,,,,,,,,,,2018-12-21 14:15:55.484,9223372036854775807,issuemaster(issuemaster),,"0|i0bo0v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21/Dec/18 2:15 PM;olivergierke;That seems to be caused by {{PersistentEntitiesResourceMappings}} erroneously indicating it has a mapping for a type even if a previous resolution attempt has resulted in none being available. I've fixed the cache lookup. Would you mind giving the snapshots a try?","27/Dec/18 4:23 PM;drenda81;Hi [~olivergierke], sorry for the delay. I tried with 3.0.13.BUILD-SNAPSHOT in the same configuration I've now and I've another NullPointerException :


{code:java}
27/12/2018 17:16:41,021 DEBUG http-nio-8082-exec-5 QueryBuilder:194 - Values class class java.lang.String
27/12/2018 17:16:41,021 DEBUG http-nio-8082-exec-5 QueryBuilder:195 - Field class private cloud.test.server.model.enums.contacts.ContactType cloud.test.server.model.contacts.Contact.type
27/12/2018 17:16:45,306 ERROR http-nio-8082-exec-7 [dispatcherServlet]:182 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.exposeEffectiveLookupPathKey(RepositoryRestHandlerMapping.java:264) ~[spring-data-rest-webmvc-3.0.13.BUILD-20181227.023034-35.jar:3.0.13.BUILD-SNAPSHOT]
	at org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.lookupHandlerMethod(RepositoryRestHandlerMapping.java:165) ~[spring-data-rest-webmvc-3.0.13.BUILD-20181227.023034-35.jar:3.0.13.BUILD-SNAPSHOT]
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:316) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:62) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:350) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.data.rest.webmvc.support.DelegatingHandlerMapping$HandlerSelectionResult.from(DelegatingHandlerMapping.java:108) ~[spring-data-rest-webmvc-3.0.13.BUILD-20181227.023034-35.jar:3.0.13.BUILD-SNAPSHOT]
	at org.springframework.data.rest.webmvc.support.DelegatingHandlerMapping.getHandler(DelegatingHandlerMapping.java:74) ~[spring-data-rest-webmvc-3.0.13.BUILD-20181227.023034-35.jar:3.0.13.BUILD-SNAPSHOT]
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1188) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:964) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doOptions(FrameworkServlet.java:913) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:670) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at cloud.test.server.filters.StoreFilter.doFilterInternal(StoreFilter.java:34) ~[classes/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:123) ~[spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE]
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:111) ~[spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90) ~[spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at cloud.test.server.filters.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:141) ~[classes/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at cloud.test.server.filters.TenantFilter.doFilterInternal(TenantFilter.java:30) ~[classes/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) ~[spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.31.jar:8.5.31]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_181]
{code}


I saw you change and it was quite clear, not sure why I've this NullPointerException. It seems it is in _RepositoryRestHandlerMapping_ line 150 where *mappingInfo* is null.


{code:java}
private void exposeEffectiveLookupPathKey(HandlerMethod method, HttpServletRequest request, String repositoryBasePath) {
        RequestMappingInfo mappingInfo = this.getMappingForMethod(method.getMethod(), method.getBeanType());
        String pattern = (String)mappingInfo.getPatternsCondition().getMatchingCondition(request).getPatterns().iterator().next();
        request.setAttribute(EFFECTIVE_LOOKUP_PATH_ATTRIBUTE, PARSER.parse(pattern.replace(""/{repository}"", repositoryBasePath)));
    }
{code}

Thanks very much

","05/Jan/19 4:28 PM;drenda81;HI [~olivergierke], did you have time to take a look to the other NullPointerException. Thanks very much","07/Jan/19 9:16 AM;olivergierke;Would you mind opening another ticket and add a bit more information about the request that actually triggers that issue?","07/Jan/19 9:36 PM;drenda81;Sure, I opened bug https://jira.spring.io/browse/DATAREST-1332. Thanks","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1680|https://github.com/spring-projects/spring-data-rest/issues/1680]. ",,,,,,,,,,,,,,,,,,
sort repository return sort divided by sub class,DATAREST-1314,83258,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Works as Designed,olivergierke,sante851,sante851,05/Dec/18 11:57 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,05/Dec/18 1:15 PM,3.1.3 (Lovelace SR3),,,,,,,,Repositories,,,0,Spring,,,,"when i sort a superclass repository: EnvironmentRepository, I expect a global sorting and not a sort divided by subclass. There is a workaroud?

 

Thanks",linux,,,,,,,,,,,,,,,,,,,,,,,,,"05/Dec/18 11:56 AM;sante851;environment.tar.xz;https://jira.spring.io/secure/attachment/26139/environment.tar.xz","05/Dec/18 11:56 AM;sante851;sort issue class subclass.txt;https://jira.spring.io/secure/attachment/26140/sort+issue+class+subclass.txt",,,,,2018-12-05 13:15:23.993,9223372036854775807,issuemaster(issuemaster),,"0|i0bn0v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05/Dec/18 1:15 PM;olivergierke;For general questions, please use StackOverflow. What you see at play here is not Spring Data sorting by type but the result being arranged in a HAL-compliant way. The collections returned need a key within the {{_embedded}} clause and by default, that's the uncapitalized simple class name. You might want to use {{@Rel}} on the types involved to use the same relation. That would keep all results under a single key.","05/Dec/18 2:08 PM;sante851;ok, can you post an example?

 

i use

{color:#808000}@RepositoryRestResource
{color}{color:#000080}public interface {color}EnvironmentRepository {color:#000080}extends {color}PagingAndSortingRepository<Environment, Long>, JpaSpecificationExecutor<Environment> {

}","05/Dec/18 2:11 PM;olivergierke;Again, this is not a support forum, thanks.","05/Dec/18 2:14 PM;sante851;and for bug 1310, what are timings?","05/Dec/18 2:30 PM;sante851;i not kwon how to write problem in google...please give me a support such as a query to do","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1674|https://github.com/spring-projects/spring-data-rest/issues/1674]. ",,,,,,,,,,,,,,,,,,
One to Many put not change a collection,DATAREST-1311,83202,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Duplicate,olivergierke,sante851,sante851,29/Nov/18 11:17 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,29/Nov/18 11:37 AM,3.1.3 (Lovelace SR3),,,,,,,,Repositories,,,0,Data,Spring,,,"Hello everyone, got one (hah!) little problem of my own with Spring Data Rest... I've got a List<Child> children in my Father object, with @OneToMany(mappedBy=""father""). Together with the Repositories, this lead to the fact that I can PUT a [http://localhost:8080/children/1] text/uri-list to [http://localhost:8080/fathers/1/children] - and get a 204. But nothing changes, since the collection will be set correctly (by RepositoryPropertyReferenceController.createPropertyReference), but that doesn't change the Child.father reference. So, is there a way to automatically update it when a child is added to the list in Spring Data Rest? Or is there a way to make the thing fail at least, because atm it's failing but claiming to succeed, which is imho the worst thing possible...
 Of course, the basic problem is JPA based, since already there adding something to the list and then saving the father does not update the Child.father reference. But with Spring Data Rest, it looks like it works - but the result is wrong.",linux,,,,,,,,,,,,,,,DATAREST-1310,,,,,,,,,,,,,,,,2020-12-31 10:31:42.139,9223372036854775807,issuemaster(issuemaster),,"0|i0bmof:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1671|https://github.com/spring-projects/spring-data-rest/issues/1671]. ",,,,,,,,,,,,,,,,,,,,,,,
"PUT and PATCH don't work, when custom entity lookup is configured.",DATAREST-1304,82994,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,Wagener,Wagener,08/Nov/18 4:28 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,07/Mar/19 8:21 AM,3.0.11 (Kay SR11),,,,3.2 M2 (Moore),,,,Repositories,,,0,,,,,"Starting with version 3.0.0 save does not work correctly anymore , if a custom entity lookup strategy is configured. 



If we have an EntityLookupConfiguration like
{code:java}
@Configuration
public class RepositoryEntityLookupConfiguration extends RepositoryRestConfigurerAdapter {

    @Override
    public void configureRepositoryRestConfiguration(RepositoryRestConfiguration configuration) {
        configuration
                .withEntityLookup()
                .forRepository(SomeRepository.class, Some::getUid, SomeRepository::findByUid);
    }
}
{code}
assuming some Document like
{code:java}
@Document
public class Some {

    @Id
    String id;
    @NotBlank(message = ""uid may not be null, empty or blank"")
    @Indexed(unique = true)
    String uid;

    Programs programs;
    Bugs bugs;
}
{code}
then any update operation fails with 409.

Actually, when the frameworks tries to save (updates the persistent data), the id of the persistence layer (id in our case) is substituted by the lookup key (uid), and then the save operation inserts a new document with a uid forbidden by the unique id.

The ""bug"" is in PersistentEntityResourceHandlerMethodArgumentResolver#resolveArgument (lines 139-150), where the persistence-id-property is set.

 
{code:java}
     // here it is checked whether we have an update and the persistence-id-property is set to entity-id
            PersistentEntity<?, ?> entity = resourceInformation.getPersistentEntity();
            boolean forUpdate = objectToUpdate.isPresent();
            Optional<Object> entityIdentifier = objectToUpdate.map(it -> entity.getIdentifierAccessor(it).getIdentifier());

            entityIdentifier.ifPresent(it -> entity.getPropertyAccessor(obj).setProperty(entity.getRequiredIdProperty(),
                    entityIdentifier.orElse(null)));

            // unfortunately, here the correct value is overwritten (possibly with a wrong value, as in case custom lookup configuration)
            id.ifPresent(it -> {
                ConvertingPropertyAccessor accessor = new ConvertingPropertyAccessor(entity.getPropertyAccessor(obj),
                        conversionService);
                accessor.setProperty(entity.getRequiredIdProperty(), it);
            });
{code}
I'm not quite sure under with conditions the requiredIdProperty should be set;
perhaps only if (!forUpdate) or (!forUpdate && !noCustomLookupConfig) or something similar along the lines.

The result then may be something like:
{code:java}
if(!forUpdate) {
            id.ifPresent(it -> {
                ConvertingPropertyAccessor accessor = new ConvertingPropertyAccessor(entity.getPropertyAccessor(obj),
                        conversionService);
                accessor.setProperty(entity.getRequiredIdProperty(), it);
            });
        }
{code}
This is actually equivalent to what was implemented in 2.x.x branches. 

Note this does still not give a valid solution of the problem in the sense of the requirements in DATA-REST-1050 in case of EntityLookupConfiguration. This is because in case of creating a new resource, a lookup by the same custom key does not find the created resource in general.

But at least, it allows us to upgrade existing applications to Spring Boot 2.0, since we are not relying on an idempotent PUT anyway. With the current version, we see no way to upgrade to Spring Boot 2 at all.",,,,,,,,,,,DATAREST-1050,DATAREST-1224,,,,,,,,,,DATAREST-1405,DATAREST-1433,,,,,,,,,2018-12-13 10:45:25.058,9223372036854775807,issuemaster(issuemaster),,"0|i0ble7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"13/Dec/18 10:45 AM;olivergierke;I have a few tweaks ready to improve on this but I am puzzle by the last section of your summary. Even if we change the implementation to what you suggest, we'd still end up with the lookup key (your {{getUid()}}) being attempted to be set as the actual entity id, which is wrong, isn't it?

I think as long as we don't have means in place to set the correct property on the entity, we're going to have to disable entity creation via PUT completely. Thoughts?","13/Dec/18 2:18 PM;Wagener;Yes, you're correct.


The 2.x.x solution (conditional on !forUpdate) would work, if and only if PUT is used only for updates, and never for inserts in case of custom lookup keys. The client has to be aware of this. This would be the minimal requirement for us to use version 3.x.x (This is what version 2.x.x provided). We would be happy with this solution as a first step anyway.

A more reliable solution is probably to actively refuse inserts, when custom lookup is configured ( i.e. no upsert attempt as soon as custom lookup is configured for the entity class). To put it by other words: conditional on (!forUpdate) or (!forUpdate && !noCustomLookupConfig()) [Whatever may be an implementation of noCustomLookupConfig]

For a full solution, additional information for the entity in the LookupRegistrar is required. The identifierMapping retrieves the ID. What is needed additionally now is an ""businessIdentityToEntityMapping"", that fills the entity properties in the ""right"" places. I.e. such that the lookup on the given identifier retrieves exactly this entity.

In our example case above, that could simply something based on be Some#setUid(ID identity). In case of composite keys several entity attributes might be affected.

This kind of information can not retrieved from the identifierMapping and Lookup-Information though, i guess, but has to be provided by the programmer. This in turn breaks the existing API for providing ""businessIdentityToEntityMapping"" functions, ....","12/Feb/19 4:17 PM;sante851;i edit this in spring data jpa test

and resul test is in error

 

{color:#808000}@Test {color}{color:#808080}// DATAREST-523{color}{color:#000080}public void {color}augmentsOneToManyCollectionAssociationUsingPost() {color:#000080}throws {color}Exception {

List<Link> links = preparePersonOrderResources({color:#000080}new {color}Person({color:#008000}""Frodo""{color}, {color:#008000}""Baggins""{color}),
 {color:#000080}new {color}Order(), {color:#000080}new {color}Order());

Link frodosSiblingsLink = links.get({color:#0000ff}0{color}).expand();
 Link bilboLink = links.get({color:#0000ff}1{color});

{color:#000080}for {color}({color:#000080}int {color}i = {color:#0000ff}1{color}; i <= {color:#0000ff}2{color}; i++) {

{color:#660e7a}mvc{color}.perform(post(frodosSiblingsLink.getHref()).{color:#808080}//{color} content(bilboLink.getHref()).{color:#808080}//{color} contentType({color:#660e7a}TEXT_URI_LIST{color})).{color:#808080}//{color} andExpect(status().isNoContent());

{color:#660e7a}mvc{color}.perform(get(frodosSiblingsLink.getHref())).{color:#808080}//{color} andExpect(jsonPath({color:#008000}""$._embedded.people""{color}, hasSize(i)));
 }
 }","07/Mar/19 8:39 AM;sante851;Good morning,

I not use custom entity lookup;

this is my configuration

 

{color:#808000}@Configuration
{color}{color:#000080}public class {color}RepositoryConfiguration {color:#000080}implements {color}RepositoryRestConfigurer {

 {color:#808000}@Override
{color} {color:#000080}public void {color}configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {

 config.exposeIdsFor(Log.{color:#000080}class{color});
 config.exposeIdsFor(MessagePacket.{color:#000080}class{color});
 config.exposeIdsFor(RailwayStation.{color:#000080}class{color});
 config.exposeIdsFor(Session.{color:#000080}class{color});

 config.setReturnBodyOnCreate({color:#000080}true{color});
 config.setReturnBodyOnUpdate({color:#000080}true{color});
 }

 {color:#808000}@Override
{color} {color:#000080}public void {color}configureConversionService(ConfigurableConversionService service) {
 service.addConverter(stringURIToLongConverter());
 }

 {color:#808000}@Bean
{color} {color:#000080}public {color}Converter<String, Long> stringURIToLongConverter() {
 {color:#000080}return new {color}StringToLongConverter();
 }
}

{color:#000080}public class {color}StringToLongConverter {color:#000080}implements {color}Converter<String, Long> {
 {color:#808000}@Override
{color} {color:#000080}public {color}Long convert(String source) {
 {color:#000080}int {color}lastSlash = source.lastIndexOf({color:#008000}'/'{color});
 {color:#000080}if {color}(lastSlash != -{color:#0000ff}1{color})
 source = source.substring(lastSlash + {color:#0000ff}1{color});
 {color:#000080}return {color}Long.parseLong(source);
 }
}

 ","07/Mar/19 3:09 PM;Wagener;Thanks, looks nice!","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1664|https://github.com/spring-projects/spring-data-rest/issues/1664]. ",,,,,,,,,,,,,,,,,,
@JsonInclude(NON_EMPTY) not honored when serializing Resource with Spring HATEOAS,DATAREST-1299,82968,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Cannot Reproduce,olivergierke,crombach,crombach,05/Nov/18 3:10 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,13/Nov/18 5:07 PM,3.0.11 (Kay SR11),,,,,,,,Content negotiation,,,0,,,,,"I am using Spring HATEOAS 0.25.0.RELEASE along with Spring Data REST 3.0.11.RELEASE (via Spring Boot 2.0.6.RELEASE), and a component from Spring Data REST does not honor the Jackson settings for empty collections when the type contained in the collection is not a primitive or default type.

I have a domain class annotated with {{@JsonInclude(JsonInclude.Include.NON_EMPTY)}}. Let's say this class is called {{ExampleObject}} and it has 2 fields: {{label}}, a String, and {{nestedObjects}}, a Collection of {{ExampleObjects}}.

{code}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class ExampleObject {

  private String label;
  private Collection<ExampleObject> nestedObjects;

  public ExampleObject() {
    nestedObjects = new ArrayList<ExampleObject>();
  }
 
  // Getters and setters

}
{code}

A default Jackson {{ObjectMapper}} will omit fields for which the value is an empty collection or array in the JSON output when an {{ExampleObject}} is serialized (i.e., if I {{Accept}} {{application/json}} from one of my REST endpoints). See the below mock example, assuming I am retrieving an {{ExampleObject}} with an empty {{nestedObjects}} Collection.

{code}
{
  ""label"" : ""Example Object""
}
{code}

However, the combination of Spring HATEOAS and Spring Data REST does not seem to honor either of the above Jackson configuration methods. If I {{Accept}} {{application/hal+json}}, empty arrays and collections are always serialized as ""[ ]"". See the below mock example, which uses the same {{ExampleObject}} as above (wrapped in a {{Resource}}).

{code}
{
  ""label"" : ""Example Object"",
  ""nestedObjects"" : [ ],
  ""_links"" : {
    ""ex:example"" : {
      ""href"" : ""http://localhost:8080/example""
    },
    ""self"" : {
      ""href"" : ""http://localhost:8080""
    },
    ""curies"" : [ {
      ""href"" : ""http://example.com/{rel}"",
      ""name"" : ""ex"",
      ""templated"" : true
    } ]
  }
}
{code}

I'd expect to see something more like this (note the omitted ""nestedObjects"" field):

{code}
{
  ""label"" : ""Example Object"",
  ""_links"" : {
    ""ex:example"" : {
      ""href"" : ""http://localhost:8080/example""
    },
    ""self"" : {
      ""href"" : ""http://localhost:8080""
    },
    ""curies"" : [ {
      ""href"" : ""http://example.com/{rel}"",
      ""name"" : ""ex"",
      ""templated"" : true
    } ]
  }
}
{code}

I believe the cause of this behavior is possibly related to {{NestedEntitySerializer}}, which is defined in  [PersistentEntityJackson2Module|https://github.com/spring-projects/spring-data-rest/blob/3.0.x/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/json/PersistentEntityJackson2Module.java].

{{NestedEntitySerializer}} extends {{com.fasterxml.jackson.databind.JsonSerializer}}, which has a method called {{isEmpty(SerializerProvider provider, T value)}}. The default implementation simply checks if {{value}} is {{null}}.

{{NestedEntitySerializer#isEmpty(SerializerProvider provider, T value)}} is being called by {{com.fasterxml.jackson.databind.ser.BeanPropertyWriter#serializeAsField(Object bean, JsonGenerator gen, SerializerProvider prov)}} when serializing a {{Resource}}.

A potential way to properly honor the {{@JsonInclude}} annotation and the {{WRITE_EMPTY_JSON_ARRAYS}} serialization feature is for {{NestedEntitySerializer}} to override the default implementation of {{isEmpty(SerializerProvider provider, T value)}} and check for empty collections, arrays, maps, and strings in addition to null values.

However, the real problem may be that {{NestedEntitySerializer}} is being used in the first place and another Serializer should be used instead in this case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2018-11-08 18:12:03.941,9223372036854775807,issuemaster(issuemaster),,"0|i0bl8f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05/Nov/18 6:14 PM;crombach;Spring HATEOAS issue here: https://github.com/spring-projects/spring-hateoas/issues/748","08/Nov/18 6:12 PM;gregturn;I need a more precise entity definition, because what I've whipped up doesn't repeat your conditions.

{code}
@Entity
@Data
@JsonInclude(JsonInclude.Include.NON_EMPTY)
class ExampleObject {

    private @Id @GeneratedValue Long id;
    private String label;

    @OneToMany(fetch = FetchType.EAGER)
    private Collection<ExampleObject> nestedObjects;

    ExampleObject() {
        this.nestedObjects = new ArrayList<>();
    }

    ExampleObject(String label) {
        this();
        this.label = label;
    }
}
{code}

Loaded like this:
{code}
@Configuration
@Slf4j
public class DatabaseLoader {

    @Bean
    CommandLineRunner init(ExampleObjectRepository repository) {
        return args -> {
            ExampleObject foo = repository.save(new ExampleObject(""foo""));
            ExampleObject bar = repository.save(new ExampleObject(""bar""));

            foo.setNestedObjects(Arrays.asList(bar));
            foo = repository.save(foo);

            log.debug(""Created "" + foo);
            log.debug(""Created "" + bar);
        };
    }

}
{code}

And it produces this:
{code}
$ curl -v localhost:8080/exampleObjects
*   Trying ::1...
* TCP_NODELAY set
* Connected to localhost (::1) port 8080 (#0)
> GET /exampleObjects HTTP/1.1
> Host: localhost:8080
> User-Agent: curl/7.54.0
> Accept: */*
> 
< HTTP/1.1 200 
< Content-Type: application/hal+json;charset=UTF-8
< Transfer-Encoding: chunked
< Date: Thu, 08 Nov 2018 18:09:52 GMT
< 
{
  ""_embedded"" : {
    ""exampleObjects"" : [ {
      ""label"" : ""foo"",
      ""_links"" : {
        ""self"" : {
          ""href"" : ""http://localhost:8080/exampleObjects/1""
        },
        ""exampleObject"" : {
          ""href"" : ""http://localhost:8080/exampleObjects/1""
        },
        ""nestedObjects"" : {
          ""href"" : ""http://localhost:8080/exampleObjects/1/nestedObjects""
        }
      }
    }, {
      ""label"" : ""bar"",
      ""_links"" : {
        ""self"" : {
          ""href"" : ""http://localhost:8080/exampleObjects/2""
        },
        ""exampleObject"" : {
          ""href"" : ""http://localhost:8080/exampleObjects/2""
        },
        ""nestedObjects"" : {
          ""href"" : ""http://localhost:8080/exampleObjects/2/nestedObjects""
        }
      }
    } ]
  },
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/exampleObjects""
    },
    ""profile"" : {
      ""href"" : ""http://localhost:8080/profile/exampleObjects""
    }
  }
* Connection #0 to host localhost left intact
}
{code}","13/Nov/18 4:28 PM;crombach;I was hoping to create a GitHub repository I could share, but I have also been unable to reproduce the error using a simple Spring project with a MongoDB repository.

Unfortunately, I cannot share the source code of the project that is experiencing the issue. It may be notable that the actual project uses both Elasticsearch and MongoDB, though. Maybe there is some kind of conflict going on. It is also entirely possible that there is a configuration issue somewhere that is causing {{NestedEntitySerializer#isEmpty()}} to be called instead of the seemingly correct {{Jackson2HalModule.HalResourcesSerializer#isEmpty()}} that is being called in my sample project.

It is probably safe to close this issue. I will come back and reopen it if I am able to reproduce the issue in a sample project.","13/Nov/18 5:07 PM;gregturn;If you rediscover the issue, please reopen this issue and we attack it again.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1659|https://github.com/spring-projects/spring-data-rest/issues/1659]. ",,,,,,,,,,,,,,,,,,,
Patching a collection element at a position greater than 9 fails,DATAREST-1274,81990,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,brodziakm,brodziakm,08/Aug/18 5:13 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,08/Aug/18 8:16 AM,2.6.14 (Ingalls SR14),3.0.9 (Kay SR9),3.1 RC1 (Lovelace),,2.6.15 (Ingalls SR15),3.0.10 (Kay SR10),3.1 RC2 (Lovelace),,,,,0,,,,,"When applying a json/patch operation to replace an attribute of an entity in an indexed collection through Spring Data Rest, the operation fails if the collection element is at index 10 or greater.

The issue appears to arise in method
{code:java}
SpelPath.TypedSpelPath.verifyPath(String path, Class<?> type){code}
and it appears to be in this part of the path source filtering expression:
{code:java}
...
.filter(it -> !it.matches(""\\d"")) // no digits
...{code}
The fix that seems to resolve the issue is:
{code:java}
...
.filter(it -> !it.matches(""\\d+"")) // no digits
...{code}
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2018-08-08 08:16:15.938,9223372036854775807,issuemaster(issuemaster),,"0|i0bft3:",9223372036854775807,9223372036854775807,,,Lovelace RC1,,,,,,,,,,,"08/Aug/18 8:16 AM;olivergierke;Good catch, that's fixed! Thanks!","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1636|https://github.com/spring-projects/spring-data-rest/issues/1636]. ",,,,,,,,,,,,,,,,,,,,,,
Append-PATCHing a collection via index fails,DATAREST-1273,81963,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,06/Aug/18 12:15 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,29/Aug/18 9:42 AM,,,,,2.6.15 (Ingalls SR15),3.0.10 (Kay SR10),3.1 RC2 (Lovelace),,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:31:37.789,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/299,"0|i0bfn3:",9223372036854775807,9223372036854775807,,,Lovelace RC1,Lovelace GA,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1635|https://github.com/spring-projects/spring-data-rest/issues/1635]. ",,,,,,,,,,,,,,,,,,,,,,,
@BasePathAwareController disables DTO validation,DATAREST-1266,81831,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,caparzo,caparzo,25/Jul/18 9:41 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,07/Aug/18 9:44 AM,,,,,,,,,,,,0,,,,,"Given I have web application based on Spring Data REST and following DTO and controller mapping (I kept only important information)
{code:java}
@Getter
@Setter
public class UpstreamEvent {
    @NotNull    
    @DateTimeFormat(iso = DATE)    
    private LocalDate transactionDate;
}

@BasePathAwareController
@RestController
public class ProcessEventController {
    @PutMapping(path = ""/process-event"") 
    public PagedResources<Resource<Merchant>> processEvent(
                               @Valid @RequestBody UpstreamEvent event) { 
    } 
} 
{code}
When I don't have @BasePathAwareController, Spring validation kicks in.

When I do have, it's not working

 ",,,,,,,,,,,,,,,,DATAREST-593,,,,,,,,,,,,,,,,2020-12-31 10:31:36.865,9223372036854775807,issuemaster(issuemaster),,"0|i0betr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1604|https://github.com/spring-projects/spring-data-rest/issues/1604]. ",,,,,,,,,,,,,,,,,,,,,,,
java.lang.ClassNotFoundException: org.springframework.context.EnvironmentAware,DATAREST-1263,81773,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Invalid,olivergierke,ravik2196,ravik2196,19/Jul/18 6:48 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,06/Aug/18 3:20 PM,,,,,,,,,,,,0,,,,,"I have imported a Restful web services using springs in Eclipse and it is getting an exception   

 

SEVERE: Servlet [springrest] in web application [/SpringRestfulWebServicesCRUDExample] threw load() exceptionSEVERE: Servlet [springrest] in web application [/SpringRestfulWebServicesCRUDExample] threw load() exceptionjava.lang.ClassNotFoundException: org.springframework.context.EnvironmentAware at java.net.URLClassLoader.findClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(Unknown Source) at java.security.SecureClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.access$100(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(Unknown Source) at java.security.SecureClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.access$100(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(Unknown Source) at java.security.SecureClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.access$100(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Unknown Source) at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1294) at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1136) at org.apache.catalina.core.DefaultInstanceManager.loadClass(DefaultInstanceManager.java:544) at org.apache.catalina.core.DefaultInstanceManager.loadClassMaybePrivileged(DefaultInstanceManager.java:525) at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:150) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1044) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:983) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4978) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5290) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1421) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1411) at java.util.concurrent.FutureTask.run(Unknown Source) at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) at java.lang.Thread.run(Unknown Source)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2018-08-06 12:21:03.414,9223372036854775807,issuemaster(issuemaster),,"0|i0begv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06/Aug/18 12:21 PM;florianluediger;I don't think the stack trace yields enough information to work out the issue here. Please provide instructions to reproduce the issue or upload an example project to GitHub or add it to the attachments here.","06/Aug/18 3:20 PM;olivergierke;It's quite likely there's something wrong with your dependency setup. From the title it looks like you're missing {{spring-context}} on the classpath. As that's not even part of Spring Data REST, I'll resolve this as invalid for now. Feel free to reopen with further information but please make sure you've actually set up the project correctly first.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1626|https://github.com/spring-projects/spring-data-rest/issues/1626]. ",,,,,,,,,,,,,,,,,,,,,
UnwrappingRepositoryInvoker.invokeFindById(…) falls back to findById(…) even if a custom lookup is present,DATAREST-1261,81714,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,12/Jul/18 8:19 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,12/Jul/18 9:02 PM,3.0.8 (Kay SR8),3.1 M3 (Lovelace),,,3.0.9 (Kay SR9),3.1 RC1 (Lovelace),,,,,,0,,,,,"{{UnwrappingRepositoryInvoker.invokeFindById(…)}} improperly evaluates the different {{Optionals}} so that the default lookup is triggered, even if a custom one is registered but it returns an empty result.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:31:36.412,9223372036854775807,issuemaster(issuemaster),,"0|i0be3r:",9223372036854775807,9223372036854775807,https://stackoverflow.com/questions/51312045/spring-data-rest-spring-still-calls-fndbyid-despite-my-providing-a-custom-enti?utm_source=dlvr.it&utm_medium=twitter,,Lovelace RC1,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1624|https://github.com/spring-projects/spring-data-rest/issues/1624]. ",,,,,,,,,,,,,,,,,,,,,,,
Spring Data Projection doesn't work when using with Page,DATAREST-1257,81588,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Duplicate,olivergierke,snoobvn,snoobvn,28/Jun/18 5:45 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,02/Jul/18 9:23 AM,3.0.8 (Kay SR8),,,,,,,,,,,0,,,,,"Assume I have this respository: 
{code:java}
@RepositoryRestResource
public interface UserRepository extends PagingAndSortingRepository<User,Integer>{
 UserDTO findByUsername(@Param(""username"") String username, Pageable page);
 Page<UserDTO> findAllByUsername(@Param(""username"") String username, Pageable page);
}{code}
In the findByUsername method, it works fine, but in the findAllByUsername, when i try to access 
{code:java}
users/search/findAllByUsername?username=...{code}
it returns this error:
{code:java}
{""cause"":null,""message"":""Couldn't find PersistentEntity for type class com.sun.proxy.$Proxy187!""}{code}
 When I tried to use findAllByUsername via my service instead of the rest it works though.
 I can use excerptProjection like this to fix the problem:
{code:java}
@RepositoryRestResource(excerptProjection = UserDTO.class)
public interface UserRepository extends PagingAndSortingRepository<User,Integer>{
 User findByUsername(@Param(""username"") String username, Pageable page);
 Page<User> findAllByUsername(@Param(""username"") String username, Pageable page);
}{code}
But this way I can't use Spring Data projections, and since excerptProjection only works at class level I can not use different projection for different method.

Here is the full log of the error:
{code:java}
 2018-06-29 00:53:22.100 DEBUG 3224 --- [tp1604621845-90] org.hibernate.SQL                        : 2018-06-29 00:53:22.100 DEBUG 3224 --- [tp1604621845-90] org.hibernate.SQL                        :     select        user0_.id as col_0_0_,        user0_.username as col_1_0_,        user0_.avatar as col_2_0_     from        users user0_     where        user0_.username=? limit ?2018-06-29 00:53:22.106 ERROR 3224 --- [tp1604621845-90] o.s.d.r.w.RepositoryRestExceptionHandler : Couldn't find PersistentEntity for type class com.sun.proxy.$Proxy187!
java.lang.IllegalArgumentException: Couldn't find PersistentEntity for type class com.sun.proxy.$Proxy187! at org.springframework.data.mapping.context.PersistentEntities.lambda$getRequiredPersistentEntity$2(PersistentEntities.java:78) ~[spring-data-commons-2.0.8.RELEASE.jar:2.0.8.RELEASE] at java.base/java.util.Optional.orElseThrow(Optional.java:397) ~[na:na] at org.springframework.data.mapping.context.PersistentEntities.getRequiredPersistentEntity(PersistentEntities.java:77) ~[spring-data-commons-2.0.8.RELEASE.jar:2.0.8.RELEASE] at org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler.wrap(PersistentEntityResourceAssembler.java:72) ~[spring-data-rest-webmvc-3.0.8.RELEASE.jar:3.0.8.RELEASE] at org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler.toResource(PersistentEntityResourceAssembler.java:55) ~[spring-data-rest-webmvc-3.0.8.RELEASE.jar:3.0.8.RELEASE] at org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler.toResource(PersistentEntityResourceAssembler.java:38) ~[spring-data-rest-webmvc-3.0.8.RELEASE.jar:3.0.8.RELEASE] at org.springframework.data.web.PagedResourcesAssembler.createResource(PagedResourcesAssembler.java:208) ~[spring-data-commons-2.0.8.RELEASE.jar:2.0.8.RELEASE] at org.springframework.data.web.PagedResourcesAssembler.toResource(PagedResourcesAssembler.java:120) ~[spring-data-commons-2.0.8.RELEASE.jar:2.0.8.RELEASE] at org.springframework.data.rest.webmvc.AbstractRepositoryRestController.lambda$entitiesToResources$3(AbstractRepositoryRestController.java:95) ~[spring-data-rest-webmvc-3.0.8.RELEASE.jar:3.0.8.RELEASE] at java.base/java.util.Optional.orElseGet(Optional.java:358) ~[na:na] at org.springframework.data.rest.webmvc.AbstractRepositoryRestController.entitiesToResources(AbstractRepositoryRestController.java:95) ~[spring-data-rest-webmvc-3.0.8.RELEASE.jar:3.0.8.RELEASE] at org.springframework.data.rest.webmvc.AbstractRepositoryRestController.toResources(AbstractRepositoryRestController.java:78) ~[spring-data-rest-webmvc-3.0.8.RELEASE.jar:3.0.8.RELEASE] at org.springframework.data.rest.webmvc.RepositorySearchController.lambda$toResource$1(RepositorySearchController.java:209) ~[spring-data-rest-webmvc-3.0.8.RELEASE.jar:3.0.8.RELEASE] at java.base/java.util.Optional.map(Optional.java:254) ~[na:na] at org.springframework.data.rest.webmvc.RepositorySearchController.toResource(RepositorySearchController.java:206) ~[spring-data-rest-webmvc-3.0.8.RELEASE.jar:3.0.8.RELEASE] at org.springframework.data.rest.webmvc.RepositorySearchController.executeSearch(RepositorySearchController.java:190) ~[spring-data-rest-webmvc-3.0.8.RELEASE.jar:3.0.8.RELEASE] at jdk.internal.reflect.GeneratedMethodAccessor198.invoke(Unknown Source) ~[na:na] at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.__invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na] at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:45009) ~[na:na] at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:45012) ~[na:na] at java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na] at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:866) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:687) ~[javax.servlet-api-3.1.0.jar:3.1.0] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) ~[javax.servlet-api-3.1.0.jar:3.1.0] at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:865) [jetty-servlet-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1655) [jetty-servlet-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.websocket.server.WebSocketUpgradeFilter.doFilter(WebSocketUpgradeFilter.java:215) [websocket-server-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) [jetty-servlet-9.4.11.v20180605.jar:9.4.11.v20180605] at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:158) [spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:126) [spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:111) [spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) [jetty-servlet-9.4.11.v20180605.jar:9.4.11.v20180605] at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90) [spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) [jetty-servlet-9.4.11.v20180605.jar:9.4.11.v20180605] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:150) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:206) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) [jetty-servlet-9.4.11.v20180605.jar:9.4.11.v20180605] at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) [jetty-servlet-9.4.11.v20180605.jar:9.4.11.v20180605] at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) [jetty-servlet-9.4.11.v20180605.jar:9.4.11.v20180605] at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) [jetty-servlet-9.4.11.v20180605.jar:9.4.11.v20180605] at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) [jetty-servlet-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533) [jetty-servlet-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146) [jetty-server-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548) [jetty-security-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) [jetty-server-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257) [jetty-server-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595) [jetty-server-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255) [jetty-server-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.server.handler.ContextHandler.__doHandle(ContextHandler.java:1317) [jetty-server-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:42020) [jetty-server-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203) [jetty-server-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473) [jetty-servlet-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564) [jetty-server-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201) [jetty-server-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1219) [jetty-server-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144) [jetty-server-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) [jetty-server-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.server.Server.handle(Server.java:531) [jetty-server-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352) [jetty-server-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260) [jetty-server-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281) [jetty-io-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102) [jetty-io-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118) [jetty-io-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333) [jetty-util-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310) [jetty-util-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168) [jetty-util-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126) [jetty-util-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366) [jetty-util-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:762) [jetty-util-9.4.11.v20180605.jar:9.4.11.v20180605] at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:680) [jetty-util-9.4.11.v20180605.jar:9.4.11.v20180605] at java.base/java.lang.Thread.run(Thread.java:844) [na:na]{code}",,,,,,,,,,,,,,,,DATAREST-841,,,,,,,,,,,,,,,,2018-07-02 09:23:41.231,9223372036854775807,issuemaster(issuemaster),,"0|i0bdcn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02/Jul/18 9:23 AM;olivergierke;Repository methods that return projections are currently not (yet) supported. Please follow DATAREST-841 for progress on that.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1620|https://github.com/spring-projects/spring-data-rest/issues/1620]. ",,,,,,,,,,,,,,,,,,,,,,
ResourceMetadataHandlerMethodArgumentResolver.supports(…) not working for ResourceMetadata,DATAREST-1250,81333,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,jiachengYang,jiachengYang,02/Jun/18 1:23 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,05/Jun/18 8:15 AM,2.6.12 (Ingalls SR12),3.0.7 (Kay SR7),3.1 M3 (Lovelace),,2.6.13 (Ingalls SR13),3.0.8 (Kay SR8),3.1 RC1 (Lovelace),,,,,0,,,,,"{{ResourceMetadataHandlerMethodArgumentResolver}} supports parameter's predicate is parameterType should assignable to {{RepositoryInformation.class}}.

but argumentResolver process return type is {{ResourceMetadata}}

so when i definition RepositoryInformation type argument in controller，throw missMatcher param exception, or i definition ResourceMetadata type argument in controller, no {{HandlerMethodArgumentResolver}} support.",jdk1.8、spring tools suite、spring boot,,,,,,,,,,,,,,,,,,,,,DATAREST-1320,,,,,,,,,,2020-12-31 10:31:34.907,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/296,"0|i0bbrz:",9223372036854775807,9223372036854775807,https://github.com/spring-projects/spring-data-rest/blob/master/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/config/ResourceMetadataHandlerMethodArgumentResolver.java,,Lovelace RC1,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1612|https://github.com/spring-projects/spring-data-rest/issues/1612]. ",,,,,,,,,,,,,,,,,,,,,,,
HttpMessageNotReadableException caused by NPE,DATAREST-1249,81297,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,wyatt,wyatt,30/May/18 3:08 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,30/May/18 9:18 AM,3.0.7 (Kay SR7),3.1 M3 (Lovelace),,,3.0.8 (Kay SR8),3.1 RC1 (Lovelace),,,,,,0,,,,,"I have a very simple server that hosts contacts just like on your phone. I am trying to update a Contact by sending a PATCH to the contact's endpoint, but it is failing with the exception below. I have also attached the body of my request and the models I use below. I have spent quite a while trying to figure out how the NPE happens, but I can no seem to get it. I know I am sending some information that can not be updated (like date modified, formattedName which is generated and not stored), but I would not expect that to cause this exception, and if it does, I'd expect it to have a descriptive message. NOTE: Gradle tells me I am using version 3.0.6, but Jira doesn't seem to have it as a version tag.
{code:java}
org.springframework.http.converter.HttpMessageNotReadableException: Could not read an object of type class one.rizzo.backend.contacts.domain.Contact from the request!; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: Could not read payload!; nested exception is java.lang.NullPointerException
at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.readPutForUpdate(PersistentEntityResourceHandlerMethodArgumentResolver.java:222) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.lambda$read$6(PersistentEntityResourceHandlerMethodArgumentResolver.java:187) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
at java.base/java.util.Optional.map(Optional.java:257) ~[na:na]
at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.read(PersistentEntityResourceHandlerMethodArgumentResolver.java:187) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.resolveArgument(PersistentEntityResourceHandlerMethodArgumentResolver.java:133) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:124) ~[spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:161) ~[spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:131) ~[spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102) ~[spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877) ~[spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783) ~[spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991) ~[spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925) ~[spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974) [spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:888) [spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at javax.servlet.http.HttpServlet.service(HttpServlet.java:664) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851) [spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.5.29.jar!/:8.5.29]
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.springframework.security.oauth2.client.filter.OAuth2ClientContextFilter.doFilter(OAuth2ClientContextFilter.java:60) [spring-security-oauth2-2.2.1.RELEASE.jar!/:na]
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) [spring-security-oauth2-2.2.1.RELEASE.jar!/:na]
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167) [na:na]
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641) [na:na]
at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
at java.base/java.lang.Thread.run(Thread.java:844) [na:na]
Caused by: org.springframework.http.converter.HttpMessageNotReadableException: Could not read payload!; nested exception is java.lang.NullPointerException
at org.springframework.data.rest.webmvc.json.DomainObjectReader.readPut(DomainObjectReader.java:119) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
at org.springframework.data.rest.webmvc.config.JsonPatchHandler.applyPut(JsonPatchHandler.java:99) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.readPutForUpdate(PersistentEntityResourceHandlerMethodArgumentResolver.java:219) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
... 90 common frames omitted
Caused by: java.lang.NullPointerException: null
at org.springframework.data.rest.webmvc.json.DomainObjectReader.asCollection(DomainObjectReader.java:485) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
at org.springframework.data.rest.webmvc.json.DomainObjectReader.lambda$mergeCollections$6(DomainObjectReader.java:446) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
at java.base/java.util.Optional.map(Optional.java:257) ~[na:na]
at org.springframework.data.rest.webmvc.json.DomainObjectReader.mergeCollections(DomainObjectReader.java:443) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
at org.springframework.data.rest.webmvc.json.DomainObjectReader.access$200(DomainObjectReader.java:68) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
at org.springframework.data.rest.webmvc.json.DomainObjectReader$MergingPropertyHandler.doWithPersistentProperty(DomainObjectReader.java:646) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
at org.springframework.data.mapping.model.BasicPersistentEntity.doWithProperties(BasicPersistentEntity.java:342) ~[spring-data-commons-2.0.6.RELEASE.jar!/:2.0.6.RELEASE]
at org.springframework.data.rest.webmvc.json.DomainObjectReader.lambda$mergeForPut$0(DomainObjectReader.java:145) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
at java.base/java.util.Optional.map(Optional.java:257) ~[na:na]
at org.springframework.data.rest.webmvc.json.DomainObjectReader.mergeForPut(DomainObjectReader.java:141) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
at org.springframework.data.rest.webmvc.json.DomainObjectReader.readPut(DomainObjectReader.java:116) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
... 92 common frames omitted
{code}
BODY (Some data sanitized):
{code:java}
{
  ""filename"": ""f4b9fee681865fa1f4e32133245ec6b5821f9dd1eca535e64f9782db1c21ec06.vcf"",
  ""dateCreated"": null,
  ""dateModified"": null,
  ""addresses"": [
    {
      ""streetAddress"": ""123 Home"",
      ""locality"": ""SF"",
      ""region"": ""CA"",
      ""country"": ""United States"",
      ""zipcode"": null,
      ""type"": ""WORK""
    }
  ],
  ""anniversary"": null,
  ""birthday"": {
    ""date"": 1234
  },
  ""categories"": [
    ""category one""
  ],
  ""emails"": [
    {
      ""email"": ""work@work.com"",
      ""type"": ""PERSONAL""
    }
  ],
  ""phoneNumbers"": [],
  ""gender"": null,
  ""name"": {
    ""firstName"": ""Test"",
    ""middleName"": ""middleTest"",
    ""lastName"": ""User"",
    ""nickname"": ""nick"",
    ""formattedName"": null
  },
  ""addressbook"": ""http:\/\/10.42.173.198:8080\/addressbooks\/5aeca47fd25b0e000bbfe04e""
}
{code}
Data. NOTE: All models have generated getters and setters with lombok
{code:java}
public class Contact extends BaseDomainObject {

    private String filename; // Used for webdav
    private List<Address> addresses;
    private ContactDate anniversary;
    private ContactDate birthday;
    private List<String> categories;
    private List<Email> emails;
    private List<PhoneNumber> phoneNumbers;
    private String gender;
    private Name name;
    @Version
    private Long version;
    @DBRef
    private Addressbook addressbook;
    @JsonIgnore // Add link instead.
    private String userId;
}
public class Address extends BaseDomainObject {

    String streetAddress;
    String locality;
    String region;
    String country;
    String zipcode;
    AddressType type;

    public enum AddressType {
        HOME, WORK, POSTAL
    }
}
public class Email {

    private String email;
    private EmailType type;

    enum EmailType {
        PERSONAL, WORK
    }
}
public class PhoneNumber {

    private String number;
    private NumberType type;


    enum NumberType {
        PERSONAL, WORK
    }
}
public class Name {

    private String firstName;
    private String middleName;
    private String lastName;
    private String nickname;

    public String getFormattedName() {
        return String.format(""%s %s %s (%s)"", firstName, middleName, lastName, nickname);
    }
}
{code}nu","Docker, openjdk:9-jdk-slim-sid",,,,,,,,,,,DATAREST-1239,,,,,,,,,,,,,,,,,,,,2018-05-30 07:18:14.817,9223372036854775807,issuemaster(issuemaster),,"0|i0bbjz:",9223372036854775807,9223372036854775807,,,Lovelace RC1,,,,,,,,,,,"30/May/18 7:18 AM;olivergierke;Thanks for bringing this up. Indeed it looks like {{DomainObjectReader.asCollection(…)}} doesn't handle {{null}} values properly. We certainly need to fix that. You should be able to work around this problem by initializing the collections in your domain objects to empty collections (a good practice anyway).","30/May/18 9:18 AM;olivergierke;That should be fixed. Looks like the problem got introduced in our move to 3.0. I back-ported the test case to 2.6 as well to prevent regressions going forward.","30/May/18 4:14 PM;wyatt;I had assumed this was called by a null collection, so I began initializing all collections in the constructor. In my request, I have some null values, but I don't see any that are Collections, they are all either Long, String, or a ContactDate (Something I created, just an object wrapping a Long). I don't see any Collections left to initialize.","30/May/18 5:11 PM;olivergierke;Would you mind trying the latest snapshots to see whether they fix the original issue?","30/May/18 5:38 PM;wyatt;It still appears to be an issue. I removed my gradle import for data rest and added:
{code:groovy}
compile 'org.springframework.data:spring-data-rest-webmvc:3.0.8.BUILD-SNAPSHOT'
{code}

and url:
{code:groovy}
maven { url 'https://repo.spring.io/libs-snapshot' }
{code}","30/May/18 5:44 PM;olivergierke;I guess I'm gonna need an example project that reproduces the problem on the current snapshots. The stack trace clearly reveals {{DomainObjectReader.asCollection(…)}} as the problem which we have fixed in the commits linked in this ticket.

{noformat}
Caused by: java.lang.NullPointerException: null
at org.springframework.data.rest.webmvc.json.DomainObjectReader.asCollection(DomainObjectReader.java:485) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
{noformat}","30/May/18 10:24 PM;wyatt;Hmm... I am trying to extract the relevant code to make a simple and concise application that exposes this bug, but it works correctly when I do this. My actual application is still having this problem, so I will continue looking into this and I will update the ticket if I get useful information.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1611|https://github.com/spring-projects/spring-data-rest/issues/1611]. ",,,,,,,,,,,,,,,,
Cannot sort by property marked with JsonProperty.Access.READ_ONLY,DATAREST-1248,81282,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,nsomlai@gmail.com,nsomlai@gmail.com,28/May/18 11:32 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,07/Aug/18 2:48 PM,2.6.14 (Ingalls SR14),3.0.7 (Kay SR7),3.1 RC1 (Lovelace),,2.6.15 (Ingalls SR15),3.0.10 (Kay SR10),3.1 RC2 (Lovelace),,Repositories,,,0,,,,,"If an entity field is marked read-only, sorting does not work.

For example:
{code:java}
public class User {
   ...
   @JsonProperty(access = JsonProperty.Access.READ_ONLY)
   private String name;
}
{code}
then api call
{noformat}
.../api/users?sort=name,desc{noformat}
does not sort by name.

Removing the annotation makes sorting work again.

This problem has also been mentioned in a comment under DATAREST-976, but with an embedded property. It happens for non-embedded properties as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2018-07-30 14:00:10.036,9223372036854775807,issuemaster(issuemaster),,"0|i0bbgn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"30/Jul/18 2:00 PM;florianluediger;I would like to work on this issue, however I get stuck because of the following issue.

The error occurs in [this line|https://github.com/spring-projects/spring-data-rest/blob/master/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/json/MappedProperties.java#L73] because the set of {{ignoredPropertyNames}} in the {{BeanDescription}} contains the attributes marked as read only, so the loop continues and the corresponding property is not added to the result set.

Debugging brought me to the strange behavior, you can reproduce as follows.
0. Simulate the error by including {{@JsonProperty(access = JsonProperty.Access.READ_ONLY)}} above [this line|https://github.com/spring-projects/spring-data-rest/blob/master/spring-data-rest-tests/spring-data-rest-tests-jpa/src/main/java/org/springframework/data/rest/webmvc/jpa/Book.java#L44]
1. Create a breakpoint at [this line|https://github.com/spring-projects/spring-data-rest/blob/master/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/json/MappedProperties.java#L100]
2. Step into the {{INTROSPECTOR.forDeserialization}} method
3. Step until you reach the last line with the return statement
4. When you evaluate {{desc.getIgnoredPropertyNames()}} here, you get an empty set.
5. When you make another step now, you should be back in the {{fromJacksonProperties}} method and should now have the {{desc}} instance returned to the local {{description}} variable.
6. I would expect that evaluating {{description.getIgnoredPropertyNames()}} now should return the same result as in step 4, however it returns a HashSet containing my two read only variables ""isbn"" and ""title"".

Can somebody explain this behavior to me or give me a heads up on how I can find the actual root of this error?","07/Aug/18 2:48 PM;olivergierke;That's in place now. We're now using the Jackson serialization configuration of an entity instead of the deserialization one (the latter not including read-only properties).

I guess the reason you see those properties change is that Jackson very often defers the calculation of information until it's actually needed. Some intermediate operation might just trigger the initialization of that field.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1610|https://github.com/spring-projects/spring-data-rest/issues/1610]. ",,,,,,,,,,,,,,,,,,,,,
NullPointerException using PUT for a resource with a null target collection,DATAREST-1239,80966,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Duplicate,olivergierke,gpoulos,gpoulos,30/Apr/18 4:46 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,06/Aug/18 12:43 PM,3.0.6 (Kay SR6),,,,,,,,,,,0,,,,,"When updating a collection property on a resource using PUT, if the source has a non-null value and the target has a null value, a NullPointerException will be thrown.  See referenced gist URL for a test that demonstrates the problem. This is reproducible in 3.0.6.RELEASE and 3.1.0.BUILD-SNAPSHOT of spring-data-rest-webmvc.

This seems to be an issue with {{DomainObjectReader#asCollection(Object)}} which gets passed the null collection.
{code:java}
Collection<Object> targetCollection = asCollection(target.orElse(null));
{code}
Full stack trace here:
{code:java}
2018-04-26 09:31:53.079 ERROR 10739 --- [io-8105-exec-10] o.s.d.r.w.RepositoryRestExceptionHandler : Could not read an object of type class com.example.ExampleResource from the request!; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: Could not read payload!; nested exception is java.lang.NullPointerException

org.springframework.http.converter.HttpMessageNotReadableException: Could not read an object of type class com.example.ExampleResource from the request!; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: Could not read payload!; nested exception is java.lang.NullPointerException
        at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.readPutForUpdate(PersistentEntityResourceHandlerMethodArgumentResolver.java:222) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
        at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.lambda$read$6(PersistentEntityResourceHandlerMethodArgumentResolver.java:187) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
        at java.util.Optional.map(Optional.java:215) ~[na:1.8.0_161]
        at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.read(PersistentEntityResourceHandlerMethodArgumentResolver.java:187) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
        at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.resolveArgument(PersistentEntityResourceHandlerMethodArgumentResolver.java:133) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
        at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:124) ~[spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:161) ~[spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:131) ~[spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102) ~[spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877) ~[spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783) ~[spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991) ~[spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925) ~[spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974) [spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:888) [spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:664) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851) [spring-webmvc-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:158) [spring-boot-actuator-2.0.1.RELEASE.jar!/:2.0.1.RELEASE]
        at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:126) [spring-boot-actuator-2.0.1.RELEASE.jar!/:2.0.1.RELEASE]
        at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:111) [spring-boot-actuator-2.0.1.RELEASE.jar!/:2.0.1.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:84) [spring-boot-actuator-2.0.1.RELEASE.jar!/:2.0.1.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) [spring-security-web-5.0.4.RELEASE.jar!/:5.0.4.RELEASE]
        at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.springframework.session.web.http.SessionRepositoryFilter.doFilterInternal(SessionRepositoryFilter.java:146) [spring-session-core-2.0.2.RELEASE.jar!/:2.0.2.RELEASE]
        at org.springframework.session.web.http.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:81) [spring-session-core-2.0.2.RELEASE.jar!/:2.0.2.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.5.RELEASE.jar!/:5.0.5.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:677) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_161]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_161]
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.29.jar!/:8.5.29]
        at java.lang.Thread.run(Thread.java:748) [na:1.8.0_161]
Caused by: org.springframework.http.converter.HttpMessageNotReadableException: Could not read payload!; nested exception is java.lang.NullPointerException
        at org.springframework.data.rest.webmvc.json.DomainObjectReader.readPut(DomainObjectReader.java:119) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
        at org.springframework.data.rest.webmvc.config.JsonPatchHandler.applyPut(JsonPatchHandler.java:99) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
        at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.readPutForUpdate(PersistentEntityResourceHandlerMethodArgumentResolver.java:219) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
        ... 103 common frames omitted
Caused by: java.lang.NullPointerException: null
        at org.springframework.data.rest.webmvc.json.DomainObjectReader.asCollection(DomainObjectReader.java:485) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
        at org.springframework.data.rest.webmvc.json.DomainObjectReader.lambda$mergeCollections$6(DomainObjectReader.java:446) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
        at java.util.Optional.map(Optional.java:215) ~[na:1.8.0_161]
        at org.springframework.data.rest.webmvc.json.DomainObjectReader.mergeCollections(DomainObjectReader.java:443) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
        at org.springframework.data.rest.webmvc.json.DomainObjectReader.access$200(DomainObjectReader.java:68) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
        at org.springframework.data.rest.webmvc.json.DomainObjectReader$MergingPropertyHandler.doWithPersistentProperty(DomainObjectReader.java:646) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
        at org.springframework.data.mapping.model.BasicPersistentEntity.doWithProperties(BasicPersistentEntity.java:342) ~[spring-data-commons-2.0.6.RELEASE.jar!/:2.0.6.RELEASE]
        at org.springframework.data.rest.webmvc.json.DomainObjectReader.lambda$mergeForPut$0(DomainObjectReader.java:145) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
        at java.util.Optional.map(Optional.java:215) ~[na:1.8.0_161]
        at org.springframework.data.rest.webmvc.json.DomainObjectReader.mergeForPut(DomainObjectReader.java:141) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
        at org.springframework.data.rest.webmvc.json.DomainObjectReader.readPut(DomainObjectReader.java:116) ~[spring-data-rest-webmvc-3.0.6.RELEASE.jar!/:3.0.6.RELEASE]
        ... 105 common frames omitted
{code}",,,,,,,,,,,,,,,,DATAREST-1249,,,,,,,,,,,,,,,,2018-05-01 17:33:16.457,9223372036854775807,issuemaster(issuemaster),,"0|i0b9in:",9223372036854775807,9223372036854775807,https://gist.github.com/geopoulos/51d5430b5d00386695bacb2c74012171,,,,,,,,,,,,,"01/May/18 5:33 PM;Jroetman;I don't have much spring experience but would like to start somewhere. This issue seems fairly straightforward, and low priority. Think I could tackle this?","06/Aug/18 11:45 AM;florianluediger;The test case you provided passes for me, is this still an issue?","06/Aug/18 12:41 PM;olivergierke;Looks like a duplicate of DATAREST-1249, which is already fixed. Feel free to re-open if you find anything not working anymore.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1599|https://github.com/spring-projects/spring-data-rest/issues/1599]. ",,,,,,,,,,,,,,,,,,,,
Spring Data REST with Custom Resource URI Fails on PUT/PATCH,DATAREST-1224,80426,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,chrismarth,chrismarth,03/Apr/18 4:09 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,27/Jun/19 2:53 PM,3.0.5 (Kay SR5),,,,,,,,,,,8,,,,,See the referenced StackOverflow question for details...,,,,,,,,,,,,,,,,DATAREST-1304,,,,,,,,,,,,,,,,2018-04-03 16:12:37.295,9223372036854775807,issuemaster(issuemaster),,"0|i0b7dj:",9223372036854775807,9223372036854775807,https://stackoverflow.com/questions/49620237/spring-data-rest-with-custom-resource-uri-fails-on-put-patch-spring-boot-2-0,,,,,,,,,,,,,"03/Apr/18 4:12 PM;olivergierke;Please make sure you copy the relevant information over to this ticket, potentially augmented with a sample project showing the problem. StackOverflow questions are fine but don't serve well as context for bug fixing as we control the lifecycle of the information on a third party website.","11/Jul/18 1:12 PM;benco03;Using the 'spring-data-examples' repository, I have recreated this problem in an integration test. I've created a fork here:

[https://github.com/benco03/spring-data-examples]

Commit which added the example: [https://github.com/benco03/spring-data-examples/commit/9079c21a1513baf6f39c66e1e448e92d19a6adae]

I have run into this issue while migrating a Spring Boot 1.5.8 application to Spring Boot 2.0.2.

This code will work using Spring Boot 1.5.8, but breaks in Spring Boot 2.0.2 onwards.

As far as I can tell:
 * PersistentEntityResourceHandlerMethodArgumentResolver:130 

 ** idResolver.resolveArgument finds mapping of /\{repository}/\{id} for request of '/users/oliviergierke'
 ** Returns 'oliviergierke' as ID
 * PersistentEntityResourceHandlerMethodArgumentResolver:149
 ** tries to set 'oliviergierke' into the ID field identified by @Id
 ** Entity has @Id annotation on UUID field
 ** Tries to convert 'oliviergierke' to UUID and throws an exception

 ","14/May/19 4:53 PM;sullrich;Seems to be fixed with Spring Data REST 2.2.0 M2.","27/Jun/19 2:53 PM;olivergierke;This seems to duplicate DATAREST-1304 and thus be fixed with the fix for that. Please give the latest milestones a try and report your findings. Resolving for now.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1583|https://github.com/spring-projects/spring-data-rest/issues/1583]. ",,,,,,,,,,,,,,,,,,,
Patch request on an Entity with @Version/ETag fails when using a projection,DATAREST-1213,80142,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,darioseidl,darioseidl,13/Mar/18 10:52 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,26/Oct/20 9:38 PM,3.0.5 (Kay SR5),,,,3.2.11 (Moore SR11),3.3.5 (Neumann SR5),3.4 GA (2020.0.0),,,,,4,,,,,"Hello!

I have a Spring Boot 2 project, with Spring Data Rest 3.0.5.

When I create an Entity with a @Version field to generate ETags, and I make a patch request on that entity with a projection, I get the following error from an assertion in ETag.getVersionInformation:

{code}
2018-03-13 11:37:57.459 ERROR 3951 --- [o-auto-1-exec-2] o.s.d.r.w.RepositoryRestExceptionHandler : Target bean of type com.sun.proxy.$Proxy129 is not of type of the persistent entity (at.darioseidl.etagdemo.Child)!

java.lang.IllegalArgumentException: Target bean of type com.sun.proxy.$Proxy129 is not of type of the persistent entity (at.darioseidl.etagdemo.Child)!
	at org.springframework.util.Assert.isTrue(Assert.java:134)
	at org.springframework.data.mapping.model.BasicPersistentEntity.getPropertyAccessor(BasicPersistentEntity.java:427)
	at org.springframework.data.rest.webmvc.support.ETag.getVersionInformation(ETag.java:170)
	at org.springframework.data.rest.webmvc.support.ETag.from(ETag.java:88)
	at org.springframework.data.rest.webmvc.HttpHeadersPreparer.prepareHeaders(HttpHeadersPreparer.java:80)
	at org.springframework.data.rest.webmvc.HttpHeadersPreparer.lambda$prepareHeaders$0(HttpHeadersPreparer.java:62)
	at java.util.Optional.map(Optional.java:215)
	at org.springframework.data.rest.webmvc.HttpHeadersPreparer.prepareHeaders(HttpHeadersPreparer.java:62)
	at org.springframework.data.rest.webmvc.RepositoryEntityController.saveAndReturn(RepositoryEntityController.java:452)
	at org.springframework.data.rest.webmvc.RepositoryEntityController.patchItemResource(RepositoryEntityController.java:397)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:870)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:776)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:978)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:852)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
{code}

I understand that a projection would not affect the patch, but when using return-body-on-update, it would make sense to use a projection to determine the result body of a patch. 

I have created a sample project on Github. Simply run the tests to see the problem.

This looks very similar to bug report DATAREST-581, but this one has been marked as resolved a long time ago.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2019-05-26 19:53:14.042,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/355,"0|i0b5mf:",9223372036854775807,9223372036854775807,https://github.com/darioseidl/etagdemo,,,,,,,,,,,,,"09/May/19 3:00 PM;darioseidl;In the last project, we managed to work around this issue by avoiding patch with projections.

Now I'm facing the problem again in a different project after upgrading to Spring Boot 2. This time we don't even have any @Version or @LastModifiedDate on our entities and don't need/want any ETag headers, but the assertion still ETag.getVersionInformation fails.

Is there a way to disable the HttpHeadersPreparer or the ETag altogether?","26/May/19 7:53 PM;olivergierke;I'm not sure I want to go forward with this. As of now (and [documented|https://docs.spring.io/spring-data/rest/docs/current/reference/html/#repository-resources.item-resource] PATCH and PUT requests are not even supposed to support projections and even with this one fixed, I am pretty sure there are many other parts of the codebase that break trying to use them for those. You might get them to work in simple cases but e.g. open projections clearly won't work as the contain synthetic properties. I am even pretty sure that you'd never even get a properly projected instance created for a PUT request based on the current code, i.e. the assumption in your tests that the payload would consist of a projection instance is invalid in the first place. The {{PersistentEntityResource payload}} is created by {{PersistentEntityResourceHandlerMethodArgumentResolver}} and that one doesn't even know about projections in the first place.

To handle the situation better I'd like to find out what's causing the instance returned by {{payload.getContent()}} to be a proxy in the first place. For updates we actually trigger a by-id lookup which usually does not return proxies in the first place *unless* you've done something special to the repositories, altered that lookup or the like. Can you elaborate on that please?","28/May/19 1:44 PM;darioseidl;Thank you for the answer.

I understand not wanting to support this if it is not supposed to work. However, it did work in previous versions, and seems to work with some adjustments. I'd be happy to look some more into it.

I narrowed down where the proxy is created. You're right the {{PersistentEntityResource}} that is created by the {{PersistentEntityResourceHandlerMethodArgumentResolver}} is unaffected by the peojection and is never a proxy.

In the end, in {{RepositoryEntityController.saveAndReturn}} called by both {{putItemResource}} and {{patchItemResource}}, the {{PersistentEntityResourceAssembler}} has the information about the projection and in {{assembler.toFullResource}} the proxy is created/returned (calling {{ProxyProjectionFactory.createProjection}} internally).

I don't know about all cases, but patch and put with open projections (with a {{@Value}} property) do seem to work, except for this ETag/proxy issue. I don't see why it wouldn't be supposed to work?

Please take a the linked etagdemo project. It's a very simple project with a few tests to reproduce the issue. There is nothing special done to the repositories there, AFAIK.  In this project I have only customized the {{HttpHeadersPreparer}} to workaround the issue. When using the default {{HttpHeadersPreparer}} the tests will fail, with the {{CustomHttpHeadersPreparer}} they succeed.","28/May/19 2:41 PM;darioseidl;I have updated the pull request with web tests and moved the the code to unproxy the JDK proxy to the {{HttpHeadersPreparer}}. I believe this works and shouldn't break anything, but I guess the unproxy part can still be considered hacky. At least it should show clearly where to problem is:

In {{RepositoryEntityController.saveAndReturn}}, {{assembler.toFullResource}} returns a proxy and the proxy is passed to {{headersPreparer.prepareHeaders}}.

Maybe you have another idea how this could be solved in a cleaner way?","28/May/19 4:01 PM;olivergierke;I think I now better understand the situation and you're basically right: {{PersistentEntityResourceAssembler}} encapsulates the process of applying a projection which evaluates the request parameter and thus creates a proxy. {{PersistentEntityResource}} still carries the correct {{PersistentEntity}} but {{HttpHeadersPreparer}} takes them apart and {{….prepareHeaders(PersistentEntity, Object)}} assumes the latter to be matching the former which in case of projections is not given.

I think it's fair to assume that for that particular overload this is totally fine and we should probably add an assertion for this to make sure we fail earlier. I think adding a {{getTargetEntity(…)}} method to {{PersistentEntityResource}} that does the deep lookup and using that from {{prepareHeaders(PersistentEntityResource)}} is the best way to fix the issue as that would allow code using {{PER}} to make use of the unwapping effectively.

Feel free to update the PR accordingly or ping me in case you want me to take over. Happy to take it from here. Thanks for the vey helpful ping pong already!","04/Jun/19 10:36 AM;darioseidl;OK, great! I've updated the pull request with the getter and an assertion in {{prepareHeaders}}. I'd be glad if you could take another look at it and take it from there.","24/Jul/19 10:21 AM;darioseidl;Hello, just checking in to ask if this is ready to be merged? Let me know if you need something else from me.","16/Sep/19 5:10 PM;joshwand;This is biting us on upgrading our project too. [~olivergierke] would appreciate reviewing/merging the PR! 

Thanks!","16/Sep/19 6:18 PM;prashant121212;Hi Its failing for 

RepositoryEntityController.createAndReturn(RepositoryEntityController.java:486) if we give projection in POST call

prepareHeaders code need to be change for this Error:

-*public* HttpHeaders prepareHeaders(Optional<PersistentEntityResource> resource) {-

 -- 

-*return* resource//-

-.map(it -> prepareHeaders(it.getPersistentEntity(), it.getContent()))//-

-.orElseGet(() -> *new* HttpHeaders());-

-}-

*public* HttpHeaders prepareHeaders(Optional<PersistentEntityResource> resource)

{   *return* resource// .map(it -> prepareHeaders(it.getPersistentEntity(), it.getTargetEntity()))// .orElseGet(() -> *new* HttpHeaders()); }","07/Oct/20 4:31 PM;fisha;[~olivergierke] This issue is hitting us on the Sakai project. We just updated to Spring 5 and data rest 3.3.4 and our patch updates to our entities are failing to return our projected JSON. Same error as above.

[~darioseidl]'s PR looks sensible to me. If it can't just be merged, is there a workaround?","14/Oct/20 2:31 PM;fisha;[~mp911de] Do you have any insight into this issue? The manifestation of this is that projected entities can't have the request body returned because of a mismatch between a proxied and an unproxied entity. It seems to me that I can either run a patched spring data rest (don't want to) or rewrite my client side components to just not expect a body returned, and disable body returning on the server. Another option would be to be able to just turn etag generation off, make it configurable, but I can't find any docs on whether that's possible. In other words, just duck that entity comparison. [~darioseidl]'s patch works, or worked, but maybe the team wants to dig a little deeper.","20/Oct/20 6:12 PM;fisha;Any update on this? Unless this gets fixed I'm going to have to rewrite a chunk of code, just because we upgraded to the latest data rest. I'm sure there are others in the same boat.","22/Oct/20 1:44 PM;darioseidl;It's been a while since I've dealt with this, but we are also still affected in one project by this bug.

From what I remember: there is no way to generally disable ETags, at least not in a way that would workaround this issue. If an entity doesn't have a `@Version`, no ETag headers will be generated, but that doesn't help here.

We had a relatively big project without `@Version` or Etags, that relied on return-body-on-update, and when we upgraded it to Spring Boot 2 all PATCH and PUT requests with projetions stopped working.

The only way we found to make it work again was applying the workaround, that I have submitted as a patch here too. Otherwise we would have to rewrite all PATCHes and PUTs to be followed by a GET to get the updated version.

So we would too be very happy if this could be merged or resolved in another way. For what it's worth, our project has been running with that patch for 2+ years without issues now.","22/Oct/20 2:17 PM;olivergierke;Sorry for the unusually long delay. I think I can get this integrated into the services releases coming up next week.","22/Oct/20 5:36 PM;fisha;That's great news! Thanks.","26/Oct/20 9:38 PM;olivergierke;That's in place now. Feel free to give the snapshots a spin. Release due on Wednesday.","06/Nov/20 12:33 PM;darioseidl;Great, thank you! I gave it a quick try with Spring Boot 2.3.5 and Data Rest 3.3.5 and it seems to be working fine. :)","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1573|https://github.com/spring-projects/spring-data-rest/issues/1573]. ",,,,,,
Validation fails vith wrong error message. @NotNull fails with JSR-303 validated property does not have a corresponding accessor,DATAREST-1203,79943,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,vdanyliuk,vdanyliuk,22/Feb/18 2:21 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,20/May/18 1:51 PM,,,,,,,,,,,,0,,,,,"After field validation when resolving message it tries to get field value but fails with NotReadablePropertyException.


{code:java}
private static Object getValue(Object source, Optional<? extends PersistentProperty<?>> property, String segment,
			String name) {

		return property.map(it -> {

			ConfigurablePropertyAccessor accessor = it.usePropertyAccess()
					? PropertyAccessorFactory.forBeanPropertyAccess(source)
					: PropertyAccessorFactory.forDirectFieldAccess(source);

			return accessor.getPropertyValue(segment);

		}).orElseThrow(() -> new NotReadablePropertyException(source.getClass(), name));
	}
{code}

This code throws exception if field has null value, but should just return this null
",,,,,,,,,,,,,,,,DATAREST-1163,,,,,,,,,,,,,,,,2020-12-31 10:31:29.475,9223372036854775807,issuemaster(issuemaster),,"0|i0b4e7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"22/Feb/18 3:15 PM;vdanyliuk;It's duplicate to DATAREST-1163 and already fixed. Close it, please. ","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1564|https://github.com/spring-projects/spring-data-rest/issues/1564]. ",,,,,,,,,,,,,,,,,,,,,,
"Possible incompatibility between Cassandra, REST, and Kotlin",DATAREST-1183,79565,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Works as Designed,mp911de,fmarino,fmarino,19/Jan/18 8:05 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,02/May/18 1:02 PM,3.0.2 (Kay SR2),,,,,,,,Repositories,,,0,Spring,,,,"Hi all,
I'm working on a very simple application that scan a public service for data and loads it into a cassandra database. Then I want to export it via a rest interface.
The code is available on github, and with it I have faced two major problem:

The first one is that this snippet cause the application to crash at startup.  
{code}@RepositoryRestResource(collectionResourceRel = ""product"", path = ""product"")
interface ProductRepository: PagingAndSortingRepository<Product, UUID>

org.springframework.data.mapping.PropertyReferenceException: No property findAll found for type Product!
	at org.springframework.data.mapping.PropertyPath.<init>(PropertyPath.java:77) ~[spring-data-commons-1.13.9.RELEASE.jar:na]
	at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:329) ~[spring-data-commons-1.13.9.RELEASE.jar:na]
...
{code}
Apparently while scanning the classpath it looks for a property named findAll into my persistent entity, but this property obviously does not exists and it fails. 

If I switch to a CrudRepository the application starts correctly but still it gives me another error while I try to fetch something. Apparently during the serialization phase it try to resolve the start property of my persistent entity as it is a persistent entity, while instead is just a LocalDateTime value, and so it fails.


To reproduce, you have to provide your own cassandra instance. Also if you want some sample data, set autoStart to true into the DhusPolling class. The remote resource he is going to scan is public so there are no problems.

Thank you for your patience and your great work on this project!

Fernando

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2018-01-19 08:10:09.628,9223372036854775807,issuemaster(issuemaster),,"0|i0b22f:",9223372036854775807,9223372036854775807,https://github.com/fer-marino/copernicus-statistics,,,,,,,,,,,,,"19/Jan/18 8:10 AM;mp911de;Spring Data Cassandra does not support {{PagingAndSortingRepository}}, only {{CrudRepository}}. The error message reports that it cannot derive a query from {{PagingAndSortingRepository}}'s {{findAll}} method. Please use {{CrudRepository}} instead.","19/Jan/18 8:58 AM;mp911de;Can you please split the two issues? I'd propose to close this one as works as designed regarding {{PagingAndSortingRepository}}. Please include additional details such as stack trace and relevant code snippets in the new ticket to assist with discoverability.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1548|https://github.com/spring-projects/spring-data-rest/issues/1548]. ",,,,,,,,,,,,,,,,,,,,,
Potential NullPointerException in JsonLateObjectEvaluator.evaluate(…),DATAREST-1181,79518,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,ASimon,ASimon,16/Jan/18 10:37 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,18/Jan/18 12:59 PM,2.6.9 (Ingalls SR9),,,,2.6.10 (Ingalls SR10),3.0.3 (Kay SR3),3.1 M1 (Lovelace),,,,,0,,,,,"In the {{JsonLateObjectEvaluator}} class the line {{return mapper.readValue(valueNode.traverse(), type);}} might throw a NullPointer.

The {{traverse()}} method instantiate a {{TreeTraversingParser}} with a null {{ObjectCodec}}. JacksonModule depending on this ObjectCodec (such as JTS https://github.com/bedatadriven/jackson-datatype-jts) are going to throw a {{NullPointerException}}.

A simple fix seems to update this line from :

{code:java}
return mapper.readValue(valueNode.traverse(), type);
{code}

to

{code:java}
return mapper.readValue(valueNode.traverse(mapper.getFactory().getCodec()), type);
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2018-01-16 13:19:32.368,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/287,"0|i0b1rz:",9223372036854775807,9223372036854775807,,,Lovelace M1,,,,,,,,,,,"16/Jan/18 1:19 PM;olivergierke;Thanks for reporting this. Wouldn't mind to see a pull request. Do you think you can craft a test case for that as well?","16/Jan/18 1:45 PM;ASimon;No problem: I opened a pull request here https://github.com/spring-projects/spring-data-rest/pull/287

Since this is my first PR for a Spring Project, I'm not really sure how to proceed for the test case.

Should I put a test scoped dependency on https://github.com/bedatadriven/jackson-datatype-jts and write a new test class for it?","16/Jan/18 1:58 PM;olivergierke;Thanks for that and welcome to the party. At a second glance, it looks like we're working around a Jacks API usage glitch here which is quite hard to test for unless we actually set up Jackson in a very specific way, which I'd like to avoid. I guess I'll take from here then.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1546|https://github.com/spring-projects/spring-data-rest/issues/1546]. ",,,,,,,,,,,,,,,,,,,,
Adapt WrappedProperties to changed defaults in Lombok 1.16.20,DATAREST-1174,79469,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,10/Jan/18 11:41 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,10/Jan/18 11:54 AM,,,,,2.6.10 (Ingalls SR10),3.0.3 (Kay SR3),3.1 M1 (Lovelace),,Infrastructure,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:31:26.01,9223372036854775807,issuemaster(issuemaster),,"0|i0b1h3:",9223372036854775807,9223372036854775807,,,Lovelace M1,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1540|https://github.com/spring-projects/spring-data-rest/issues/1540]. ",,,,,,,,,,,,,,,,,,,,,,,
Errors.reject() fails with NotReadablePropertyException when rejecting 'null' values,DATAREST-1163,79169,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,davidsiro,davidsiro,28/Nov/17 8:25 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,29/Nov/17 9:29 AM,3.0.2 (Kay SR2),,,,3.0.3 (Kay SR3),3.1 M1 (Lovelace),,,,,,0,,,,,"Any validation that rejects _null_ value subsequently fails when building the validation output.

The problem could be hunted down to [org.springframework.data.rest.core.ValidationErrors#getValue|https://github.com/spring-projects/spring-data-rest/blob/4ba413d0847339be501504e7f07f61e0413ffa5c/spring-data-rest-core/src/main/java/org/springframework/data/rest/core/ValidationErrors.java#L109] that throws above-mentioned exception when _PropertyAccessor_ reads the _null_ value.

",,,,,,,,,,,,DATAREST-1203,,,,,,,,,,,,,,,,,,,,2017-11-29 09:29:17.662,9223372036854775807,issuemaster(issuemaster),,"0|i0azmf:",9223372036854775807,9223372036854775807,,,Kay SR1,,,,,,,,,,,"29/Nov/17 9:29 AM;olivergierke;Thanks for spotting this. Should be fixed in Kay and Lovelace branches.","29/Nov/17 1:47 PM;davidsiro;Great, thank you for the fix, when do you expect 3.0.3 (Kay SR3) to be released?","29/Nov/17 1:53 PM;olivergierke;We're usually tying bugfix releases to the Spring Boot ones. Unfortunately SR2 was just release two days ago, so it might take a while :/.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1529|https://github.com/spring-projects/spring-data-rest/issues/1529]. ",,,,,,,,,,,,,,,,,,,,
Adapt test cases to new CORS defaults in Spring 5.0.2,DATAREST-1160,79121,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,26/Nov/17 6:53 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,27/Nov/17 10:10 AM,3.0.1 (Kay SR1),,,,3.0.2 (Kay SR2),3.1 M1 (Lovelace),,,Infrastructure,,,0,,,,,,,,,,,,,,,,,,,,,,SPR-16130,,,,,,,,,,,,,,,2020-12-31 10:31:24.305,9223372036854775807,issuemaster(issuemaster),,"0|i0azbr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1527|https://github.com/spring-projects/spring-data-rest/issues/1527]. ",,,,,,,,,,,,,,,,,,,,,,,
All patch operations should verify paths before application,DATAREST-1137,78408,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,25/Sep/17 4:11 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,25/Sep/17 5:21 PM,2.6.7 (Ingalls SR7),3.0 RC3 (Kay),,,2.6.8 (Ingalls SR8),3.0 GA (Kay),,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:31:21.728,9223372036854775807,issuemaster(issuemaster),,"0|i0avfz:",9223372036854775807,9223372036854775807,,,Kay RC3,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1498|https://github.com/spring-projects/spring-data-rest/issues/1498]. ",,,,,,,,,,,,,,,,,,,,,,,
@BasePathAwareController detection fails for CGLib-proxied controllers,DATAREST-1132,78261,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,caparzo,caparzo,13/Sep/17 3:56 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,25/Sep/17 10:04 AM,2.5.11 (Hopper SR11),2.6.7 (Ingalls SR7),3.0 RC3 (Kay),,2.6.8 (Ingalls SR8),3.0 GA (Kay),,,Infrastructure,,,0,,,,,"I have very basic controller in my project which I annotated with {{@BasePathAwareController}}

{code:java}
@BasePathAwareController
public class MyBasePathAwareController {
    @GetMapping(value = ""/strings"")
    @ResponseBody
    public List<String> getStrings() {
        return Arrays.asList(""base"", ""path"", ""aware"");
    }
}
{code}

When I add this controller to my bigger spring boot project, it does not recognize any annotations, so code in {{BasePathAwareHandlerMapping}} returns false


{code:java}
	@Override
	protected boolean isHandler(Class<?> beanType) {
		return beanType.getAnnotation(BasePathAwareController.class) != null;
	}
{code}

but code from {{RepositoryRestHandlerMapping}} returns true

{code:java}
	@Override
	protected boolean isHandler(Class<?> beanType) {
		return AnnotationUtils.findAnnotation(beanType, RepositoryRestController.class) != null;
	}
{code}

I also see that the {{MyBasePathAwareController}} in my bigger spring boot project is cglib-backed proxy with no annotations and it is normal bean in smaller spring boot project

Can't we use 


{code:java}
	@Override
	protected boolean isHandler(Class<?> beanType) {
		return AnnotationUtils.findAnnotation(beanType, BasePathAwareController.class) != null;
	}
{code}
in {{BasePathAwareHandlerMapping}} as well?

It is also strange that the same controller is cglib-backed proxy (annotations information is not retained) in one project and in the other not.

See screenshots",,,,,,,,,,,,,,,,,,,,,,,,,,"13/Sep/17 3:56 PM;caparzo;no-base-path-aware-annotations-found-cglib-proxy.PNG;https://jira.spring.io/secure/attachment/25099/no-base-path-aware-annotations-found-cglib-proxy.PNG","13/Sep/17 3:56 PM;caparzo;smaller-boot-project-base-path-aware-annotations-found.PNG;https://jira.spring.io/secure/attachment/25098/smaller-boot-project-base-path-aware-annotations-found.PNG",,,,,2017-09-24 08:08:31.725,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/281,"0|i0aujb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"24/Sep/17 8:08 AM;anton.liauchuk;https://github.com/spring-projects/spring-data-rest/pull/281","25/Sep/17 10:04 AM;olivergierke;That's in place. The PR suggested didn't work as it changes the way {{@BasePathAwareController}} was detected on meta-annotations. Feel free to give the snapshots a try.","12/Jan/18 11:01 AM;caparzo;I confirm it works as expected now.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1488|https://github.com/spring-projects/spring-data-rest/issues/1488]. ",,,,,,,,,,,,,,,,,,,,
Path expressions in JSON Patch allow references to non-properties,DATAREST-1127,78187,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Critical,Fixed,olivergierke,olivergierke,olivergierke,07/Sep/17 4:18 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,08/Sep/17 10:40 AM,2.5.11 (Hopper SR11),2.6.6 (Ingalls SR6),3.0 RC2 (Kay),,2.5.12 (Hopper SR12),2.6.7 (Ingalls SR7),3.0 RC3 (Kay),,,,,0,,,,,,,,,,,,,,Public,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:31:20.452,9223372036854775807,issuemaster(issuemaster),,"0|i0au33:",9223372036854775807,9223372036854775807,,,Kay RC3,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1487|https://github.com/spring-projects/spring-data-rest/issues/1487]. ",,,,,,,,,,,,,,,,,,,,,,,
Last modification header detection fails for projected query method executions,DATAREST-1121,78083,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,israel.boiko,israel.boiko,24/Aug/17 6:07 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,25/Aug/17 8:56 AM,2.6.6 (Ingalls SR6),3.0 RC2 (Kay),,,2.6.7 (Ingalls SR7),3.0 RC3 (Kay),,,,,,0,,,,,"Example:
{code:java}
@Query(""select user.lastAccess from user where user.id = :id"")
LocalDateTime lastAccess(@Param(""id"") Long id);
{code}

Caused by {{RepositorySearchController.java}} on Versioned Entity

{code:java}
	protected ResponseEntity<?> toResource(final Object source, final PersistentEntityResourceAssembler assembler,
			Class<?> domainType, Link baseLink, HttpHeaders headers, RootResourceInformation information) {

		if (source instanceof Iterable) {
			return ResponseEntity.ok(toResources((Iterable<?>) source, assembler, domainType, baseLink));
		} else if (source == null) {
			throw new ResourceNotFoundException();
		} else if (ClassUtils.isPrimitiveOrWrapper(source.getClass())) {
{code}
{quote}Only primitive types have direct return{quote}
{code:java}
			return ResponseEntity.ok(source);
		}

		PersistentEntity<?, ?> entity = information.getPersistentEntity();

		return resourceStatus.getStatusAndHeaders(headers, source, entity).toResponseEntity(//
				new Supplier<PersistentEntityResource>() {

					@Override
					public PersistentEntityResource get() {
						return assembler.toFullResource(source);
					}
				});
	}
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-08-25 08:56:29.534,9223372036854775807,issuemaster(issuemaster),,"0|i0atfz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"25/Aug/17 8:56 AM;olivergierke;That's in place. We now skip the entire last modified header detection in case the value returned from a query method is not compatible with the aggregate's type.","25/Aug/17 10:30 AM;israel.boiko;Thank you very much.(y)","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1482|https://github.com/spring-projects/spring-data-rest/issues/1482]. ",,,,,,,,,,,,,,,,,,,,,
HttpMessageNotWritableException for all non string attributes,DATAREST-1103,77581,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,engma,engma,02/Jul/17 11:52 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,06/Jul/17 7:20 AM,3.0 M4 (Kay),,,,,,,,,,,0,,,,,"I was using Spring-Data-REST 3.0 m4 and I had an issue retrieving any JSON data from my repositories when the model contains any non String attributes, like int or long. Those attributes fail during JSON conversion phase giving me error like 

{code}
{
	""timestamp"": 1499039285110,
	""status"": 500,
	""error"": ""Internal Server Error"",
	""message"": ""Could not write JSON: java.lang.Integer cannot be cast to java.lang.String; nested exception is com.fasterxml.jackson.databind.JsonMappingException: java.lang.Integer cannot be cast to java.lang.String (through reference chain: org.springframework.hateoas.PagedResources[\""_embedded\""]->java.util.Collections$UnmodifiableMap[\""className\""]->java.util.ArrayList[0]->org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$PersistentEntityResourceSerializer$1[\""content\""]->s.s.ClassName[\""field\""])"",
	""path"": ""/sales-promotions/""
}
{code}

here the stop order field is an Integer, removing this field works, also reverting to an older version of spring works.

my dependencies are 
{code:xml}
       <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-rest</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-hateoas</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.retry</groupId>
            <artifactId>spring-retry</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>
{code}",,,,,,,,,,,,,,,,DATAREST-1060,,,,,,,,,,,,,,,,2017-07-03 08:26:18.31,9223372036854775807,issuemaster(issuemaster),,"0|i0aqcv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03/Jul/17 8:26 AM;olivergierke;This suspiciously sounds like a duplicate of DATAREST-1060. The root cause has been a change in Jackson that messed up the assigned (de)serializers when properties were programatically filtered. This has already been fixed in the snapshots. Care to give them a try?","06/Jul/17 1:26 AM;engma;Ok I will try the snapshots and tell you the results","06/Jul/17 2:26 AM;engma;I tried it with snapshots and seems to be working fine, I think we can close this issue now, thanks @Oliver","06/Jul/17 7:20 AM;olivergierke;Great to hear we got it working for you.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1466|https://github.com/spring-projects/spring-data-rest/issues/1466]. ",,,,,,,,,,,,,,,,,,,
Creating associations with nested URI's.,DATAREST-1102,77577,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Works as Designed,olivergierke,Herbie Porter,Herbie Porter,02/Jul/17 3:17 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,05/Jul/17 10:48 AM,2.6.4 (Ingalls SR4),,,,,,,,,,,0,,,,,"Sending an HTTP POST request fails when the JSON contains a URI of an associated entity.  This fails for top level relationships as well as nested relationships in @Embedded @Embeddable objects or lists of @Embeddable objects in a @ElementCollection.

I believe this should work as shown in this Jira - https://jira.spring.io/browse/DATAREST-262

A demo app can be found here with CURL scripts which demostrate the issue. 

https://github.com/HerbiePorter/spring-data-rest-embeddable-test
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-07-02 16:37:19.466,9223372036854775807,issuemaster(issuemaster),,"0|i0aqbz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02/Jul/17 4:37 PM;olivergierke;Looks like you're running into a variant of [this ticket|https://github.com/FasterXML/jackson-databind/issues/1239] in Jackson. The workaround documented there is to set up Lombok to not generate constructor property annotations. I verified your first test case working with {{lombok.anyConstructor.suppressConstructorProperties = true}} in {{lombok.config}}.","02/Jul/17 9:25 PM;Herbie Porter;Thanks for such a quick response Oliver. That's working perfectly now!","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1465|https://github.com/spring-projects/spring-data-rest/issues/1465]. ",,,,,,,,,,,,,,,,,,,,,
MoveOperationUnitTests fail on Spring 5 RC1,DATAREST-1092,77385,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,14/Jun/17 7:55 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,14/Jun/17 1:39 PM,,,,,2.5.12 (Hopper SR12),2.6.5 (Ingalls SR5),3.0 M4 (Kay),,,,,0,,,,,"Spring 5 RC1 slightly changed the way that SpEL expressions report the attempt to set {{null}} for a value that's not nullable (e.g. {{boolean}}). On Spring 4.3, that attempt results in a {{NullPointerException}} that's handled by {{PatchOperation}}. On Spring 5, that case is reported through a {{SpelEvaluationException}}.",,,,,,,,,,,,,,,,DATAREST-1088,,,,,,,,,,,,,,,,2020-12-31 10:31:16.484,9223372036854775807,issuemaster(issuemaster),,"0|i0ap5b:",9223372036854775807,9223372036854775807,,,Kay M3,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1457|https://github.com/spring-projects/spring-data-rest/issues/1457]. ",,,,,,,,,,,,,,,,,,,,,,,
Spring 5 BUILD-SNAPSHOT breaks Spring Data REST,DATAREST-1088,77311,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Duplicate,gregturn,gregturn,gregturn,07/Jun/17 3:33 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,14/Jun/17 1:39 PM,,,,,,,,,,,,0,,,,,"Spring 5's shift toward NPEs is causing issues in Spring Data REST.

* Fix the problem in SDR
* Introduce a spring5-next profile to better discover these issues",,,,,,,,,,,,DATAREST-1092,,,,,,,,,,,,,,,,,,,,2020-12-31 10:31:16.009,9223372036854775807,issuemaster(issuemaster),,"0|i0aoov:",9223372036854775807,9223372036854775807,,,Kay M3,,,,,,,,,,,"07/Jun/17 4:12 PM;gregturn;Depends on https://github.com/spring-projects/spring-hateoas/issues/594 being patched and released.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1453|https://github.com/spring-projects/spring-data-rest/issues/1453]. ",,,,,,,,,,,,,,,,,,,,,,
HAL Browser: Custom Request Headers are lost in NON-GET requests,DATAREST-1077,77095,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Complete,gregturn,gregorycfrank,gregorycfrank,16/May/17 5:43 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,17/May/17 1:36 AM,,,,,3.0 M4 (Kay),,,,,,,0,,,,,"In the HAL Browser custom post code, headers added in the Custom Request Headers are not included in NON-GET requests.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-05-16 17:54:14.866,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/267,"0|i0and3:",9223372036854775807,9223372036854775807,,,Kay M3,,,,,,,,,,,"16/May/17 5:54 PM;olivergierke;Can you elaborate? What exactly are you doing?","16/May/17 6:06 PM;gregorycfrank;I use Oauth2 (via Auth0) for authorization and have rules setup so that {{GET}} requests are available to all but any unsafe operations require a specific role. I have security rules to selectively allow access to {{/api/browser/**}} so I can get to the HAL Browser (my base path is set to {{/api}}) and I can make {{GET}} requests in the HAL Browser, but whenever I try to do a NON-GET request I get an authentication error.

If I use a REST client to get my auth token and I put a custom request header {{Authorization: bearer <token>}}, the {{GET}} requests use the custom header. The reason the NON-GET requests fail is the custom Authorization header is not included in the request.

I have forked the project, made a [commit|https://github.com/gregorycfrank/spring-data-rest/commit/7dd055f26aeacd15a6e60a30961c807ab2c315c7], and am setting up a pull request with a simple fix. ","16/May/17 6:11 PM;olivergierke;That sounds reasonable. Fix looks good, too. Would like to get [~gregturn]'s eyes on the PR for review and merge.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1442|https://github.com/spring-projects/spring-data-rest/issues/1442]. ",,,,,,,,,,,,,,,,,,,,
AnnotatedEventHandlerInvoker registers event handler twice with Mockito2 and SpyBean,DATAREST-1075,77092,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,mduesterhoeft,mduesterhoeft,16/May/17 3:34 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,06/Jul/17 11:40 AM,2.5.11 (Hopper SR11),2.6.4 (Ingalls SR4),3.0 M3 (Kay),,2.5.12 (Hopper SR12),2.6.5 (Ingalls SR5),3.0 RC1 (Kay),,,,,0,,,,,"I came across an issue when testing invocations of {{RepositoryEventHandler}} together with {{SpyBean}} and mockito 2.

In such situations I use the spy to verify that the event handler has been invoked. With mockito2 I always end up with two invocations (with the prior version of mockito it works fine).

The mockito 2 documentation says:
{quote}Mockito switched from CGLIB to the great library ByteBuddy to make mocks. This change allows Mockito to make better mocks (like copying the annotations of the mocked type). {quote}

So with mockito 2 also the annotations are present on the spy so that {{AnnotatedEventHandlerInvoker#postProcessAfterInitialization}} is called twice - once with the spy instance and once with the original object. Both instances receive the event. 

It is interesting that both invocations of {{AnnotatedEventHandlerInvoker#postProcessAfterInitialization}} hand in the same bean name. 

Please see my sample project to reproduce the issue https://github.com/mduesterhoeft/mockito2-event-handler-bug",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-05-16 16:00:01.287,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/268,"0|i0ancf:",9223372036854775807,9223372036854775807,https://github.com/mduesterhoeft/mockito2-event-handler-bug,,,,,,,,,,,,,"16/May/17 3:37 PM;mduesterhoeft;I think we should just register an {{EventHandlerMethod}} once for a bean name. So at the time of handler registration, we could check if there is already an {{EventHandlerMethod}} of this bean name. If so we do not add the handler","16/May/17 4:00 PM;olivergierke;Are you saying the {{postProcessAfterInitialization(…)}} method is called twice for the same bean name? That sounds weird to me. It might have to do with the way the spy support in Boot is implemented but this feels a bit like a violation of the {{BeanPostProcessor}} contract. We can definitely put the extra check in place but I'd rather have the calling side behave properly that guarding against invalid invocations of the {{BPP}}.","16/May/17 6:40 PM;mduesterhoeft;Exactly - it is called twice with the same bean name. Once with the spy instance and once with the original event handler instance. 

I think the {{org.springframework.boot.test.mock.mockito.MockitoPostProcessor.SpyPostProcessor}} is also a kind of {{BeanPostProcessor}} which actually returns the spy instance rather than the {{bean}} parameter that is passed in {{postProcessAfterInitialization}}. 

What would you suggest - you rather see this as an issue in spring-boot-test. Should I address it there?","18/May/17 2:05 PM;olivergierke;I've filed [a ticket|https://github.com/spring-projects/spring-boot/issues/9268] with Spring Boot.","22/May/17 10:42 AM;awilkinson;I don't think this has anything to do with Spring Boot. As far as I can tell, the bean post processor is only called once and, when it's called, it's passed the spy. It's the introspection of the spy that is faulty as it finds two methods (one on the spy and one on the superclass).

Here's a simplified reproduction that doesn't involve Boot at all:

{noformat}
package com.example;

import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

import org.junit.Test;
import org.springframework.data.rest.core.annotation.HandleAfterCreate;
import org.springframework.data.rest.core.annotation.RepositoryEventHandler;
import org.springframework.data.rest.core.event.AfterCreateEvent;
import org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker;

public class AnnotatedEventHandlerInvokerTests {

	@Test
	public void mockitoSpyIsHandledCorrectly() {
		Foo foo = spy(new Foo());
		AnnotatedEventHandlerInvoker invoker = new AnnotatedEventHandlerInvoker();
		invoker.postProcessAfterInitialization(foo, ""foo"");
		Bar bar = new Bar();
		invoker.onApplicationEvent(new AfterCreateEvent(bar));
		verify(foo, times(1)).doAfterCreate(bar);
	}

	@RepositoryEventHandler
	static class Foo {

		@HandleAfterCreate
		public void doAfterCreate(Bar bar) {

		}

	}

	static class Bar {

	}

}
{noformat}","22/May/17 11:30 AM;mduesterhoeft;must have been a false assumption on my side then - sorry for the confusion.

It seems that {{AnnotatedEventHandlerInvoker}} is finding two methods on the spy (the different classes here made me think it is different beans - where it is just an inner subclass)

public void com.example.mockito2eventhandler.ThingRepositoryEventHandler$MockitoMock$1033608712.doAfterCreate(com.example.mockito2eventhandler.Thing)

public void com.example.mockito2eventhandler.ThingRepositoryEventHandler.doAfterCreate(com.example.mockito2eventhandler.Thing)","22/May/17 11:45 AM;mduesterhoeft;Actually the comment on {{ReflectionUtils#doWithMethods}} gives the hint:

{code}
The same named method occurring on subclass and superclass will appear twice, unless excluded by the specified {@link MethodFilter}.
{code}","22/May/17 12:21 PM;mduesterhoeft;To clarify - this test fails
{code:java}
public class DoWithMethodsTest {


    static class SomeHandler {
        public void doSomething() {}
    }

    static class SomeHandlerSub extends SomeHandler {
        public void doSomething() {}
    }

    @Test
    public void should_do_once() {

        List<Method> foundMethods = new ArrayList<>();
        
        ReflectionUtils.doWithMethods(SomeHandlerSub.class,
                foundMethods::add,
                method -> method.getName().equals(""doSomething""));

        then(foundMethods).hasSize(1);
    }
}
{code}

{code}
java.lang.AssertionError: 
Expected size:<1> but was:<2> in:
<[public void com.example.mockito2eventhandler.DoWithMethodsTest$SomeHandlerSub.doSomething(),
    public void com.example.mockito2eventhandler.DoWithMethodsTest$SomeHandler.doSomething()]>
{code}

So I guess the solution would be to filter out the methods overridden by a handler subclass.","06/Jul/17 11:40 AM;olivergierke;We now rather resort to Spring's {{ReflectionUtils.getUniqueDeclaredMethods(…)}} to find methods to register for invocation in the first place.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1440|https://github.com/spring-projects/spring-data-rest/issues/1440]. ",,,,,,,,,,,,,,
self references generated incorrectly when id contains colons,DATAREST-1074,77086,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Invalid,olivergierke,t.prebble,t.prebble,16/May/17 8:40 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,16/May/17 11:19 AM,,,,,,,,,Content negotiation,Repositories,,0,,,,,"When the self ref is being generated for an entity with an id containing colons (e.g.  SDN:P02::ASAM), the id is not appended to the entities base url 

*Example*  - option Entity containing ID SDN:P02::ASAM

*Expected self ref*
http://<host>:<port>/option/SDN:P02::ASAM
*Actual self ref*
http://<host>:<port>/option

self ref for an id with no colons http://<host>:<port>/option/SDNP02ASAM

*Initial Analysis*

Caused by UriComponentsBuilder.fromUriString(path) in LinkBuilderSupport. When the RepositoryLinkBuilder delegates the slash method call to its parent, LinkBuilderSupport calls UriComponentsBuilder.fromUriString. the URI_PATTERN matches everything before the first colon to the scheme and the remaining section to ssp. The below test recreates the issue within the UriComponentsBuilder. Is there a reason the slash method calls fromUriString instead of fromPath? 
 
{code:java}
import org.junit.Test;
import org.springframework.web.util.UriComponents;
import org.springframework.web.util.UriComponentsBuilder;

import static org.junit.Assert.assertEquals;

public class UriComponentsBuilderTest {

    @Test
    public void fromUriStringWithColon() throws Exception {
        String pathWithColon = ""SDN:P02::ASAM"";
        UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(pathWithColon);
        UriComponents components = builder.build();
        assertEquals(pathWithColon, components.getPath());
    }

    @Test
    public void fromUriStringWithoutColon() throws Exception {
        String pathWithColon = ""SDNP02ASAM"";
        UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(pathWithColon);
        UriComponents components = builder.build();
        assertEquals(pathWithColon, components.getPath());
    }

    @Test
    public void fromPAthWithColon() throws Exception {
        String pathWithColon = ""SDN:P02::ASAM"";
        UriComponentsBuilder builder = UriComponentsBuilder.fromPath(pathWithColon);
        UriComponents components = builder.build();
        assertEquals(pathWithColon, components.getPath());
    }

}
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-05-16 09:53:16.983,9223372036854775807,issuemaster(issuemaster),,"0|i0anb3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16/May/17 9:53 AM;olivergierke;Yes, the reason is that {{slash(…)}} can also take segments that contain request parameters (e.g. {{foo?bar=foobar}}). It looks like there's no real alternative to using {{fromUriString(…)}} as there's no factory method that allows parsing request parameters except that one. [~rstoya05-aop], can you advise?","16/May/17 11:18 AM;olivergierke;It looks like the test passes if I prepend the input value with a {{/}}. That apparently triggers the regex to match in the expected way. I've [filed and fixed a ticket|{https://github.com/spring-projects/spring-hateoas/issues/582] in Spring HATEOAS to tweak {{LinkBuilderSupport}} accordingly.

","16/May/17 11:19 AM;olivergierke;Closing as invalid, as the root cause has been fixed in Spring HATEOAS.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1439|https://github.com/spring-projects/spring-data-rest/issues/1439]. ",,,,,,,,,,,,,,,,,,,,
RepositoryRestMvcConfiguration declares a bean of name `config` ,DATAREST-1070,76921,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Duplicate,olivergierke,mgrzejszczak,mgrzejszczak,09/May/17 9:36 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,09/May/17 10:21 AM,2.6.3 (Ingalls SR3),,,,,,,,,,,0,,,,,"I guess it's pretty standard approach that when you create a test configuration you call the class `Config`

{code:java}
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Config.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class Issue585Tests {

...

}

@SpringBootApplication
class Config {
    ...
}
{code}

the problem with that is that if you do that you get an excpetion

{code:java}
Caused by: java.lang.IllegalStateException: @Bean method RepositoryRestMvcConfiguration.config called as a bean reference for type [org.springframework.data.rest.core.config.RepositoryRestConfiguration] but overridden by non-compatible bean instance of type [org.springframework.cloud.sleuth.instrument.web.client.exceptionresolver.Config$$EnhancerBySpringCGLIB$$e818849f]. Overriding bean of same name declared in: null
{code}

I guess it's not a good idea to name a bean `config`...",,,,,,,,,,,,,,,,DATAREST-540,,,,,,,,,,,,,,,,2017-06-20 11:05:27.92,9223372036854775807,issuemaster(issuemaster),,"0|i0amrj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"20/Jun/17 11:05 AM;olivergierke;Hey Marcin, fix is in place with DATAREST-540 in the latest snapshots. Should be fine for 3.0.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1435|https://github.com/spring-projects/spring-data-rest/issues/1435]. ",,,,,,,,,,,,,,,,,,,,,,
DomainObjectReader throws UnsupportedOperationException on PATCH request when altering the size of existing Array,DATAREST-1068,76898,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,quazard,quazard,05/May/17 5:32 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,26/Feb/20 9:30 AM,2.6.1 (Ingalls SR1),,,,3.1.16 (Lovelace SR16),3.2.5 (Moore SR5),3.3 M4 (Neumann),,Repositories,,,0,,,,,"When sending a PATCH request with some fields to update an existing entity, if one of the fields is an array, and the size of the array is different from the existing property array, handleArrayNode method from DomainObjectReader class throws an UnsupportedOperationException.

Package: org.springframework.data.rest.webmvc.json
Class name: DomainObjectReader

When debugging all the way down into DomainObjectReader class, the handleArrayNode method seems to be called from handleArray method, which is sending a Collection as parameter after calling ifCollection(source) method. This ifCollection method is returning a fixed size List (from Arrays.asList) which eventually, handleArrayNode method is trying to alter in size with .add or .remove methods on the given Collection, and here is where the UnsupportedOperationException is thrown.

I am using Spring Boot 1.5.2-RELEASE. But i see no changes in Spring Data Rest repository on these methods class for latest branches/tags.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-02-16 01:58:15.237,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/371,"0|i0ammf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16/Feb/20 1:58 AM;mdfrostt;DomainObjectReader still contains this flaw as of today's build of version 3.3.0.BUILD-SNAPSHOT. I have created a a unit test that demonstrates the problem and the code to fix it. But I have no clue how to create a branch on which to submit a PR. I'd be happy to upload what I have if someone could assist with the branch permissions.","19/Feb/20 1:44 AM;mdfrostt;[PR 371|https://github.com/spring-projects/spring-data-rest/pull/371] has been submitted.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1433|https://github.com/spring-projects/spring-data-rest/issues/1433]. ",,,,,,,,,,,,,,,,,,,,,
Executing a search query returns 404 when a query method returns an entity but no result is returned,DATAREST-1066,76857,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Works as Designed,olivergierke,pstreef,pstreef,03/May/17 1:12 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,07/Aug/18 9:35 AM,2.6.3 (Ingalls SR3),,,,,,,,Repositories,,,0,repository,repository-rest-resource,,,"When using MongoDB (3.4.4) in combination with RepositoryRestResource a query returning a single Object returns a 404 not found. When the query returns a List<Object> it works as expected. The endpoints are registered (visible in http://localhost:8080/persons/search/) but when you navigate to the endpoint the server returns 404

with the following repo:

{code:java}
@RepositoryRestResource
public interface Repository extends MongoRepository<Person, String>
{
    Person findFirstByName(@Param(""name"") String name);
    List<Person> findByName(@Param(""name"") String name);
}
...
@Document
public class Person
{
    @Id
    String id;
    String name;
}

{code}

output of http://localhost:8080/persons/search/

{noformat}
{
  ""_links"" : {
    ""findByName"" : {
      ""href"" : ""http://localhost:8080/persons/search/findByName{?name}"",
      ""templated"" : true
    },
    ""findFirstByName"" : {
      ""href"" : ""http://localhost:8080/persons/search/findFirstByName{?name}"",
      ""templated"" : true
    },
    ""self"" : {
      ""href"" : ""http://localhost:8080/persons/search/""
    }
  }
}
{noformat}

endpoint http://localhost:8080/persons/search/findByName returns an empty list (since the repo is empty)


{noformat}
{
  ""_embedded"" : {
    ""persons"" : [ ]
  },
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/persons/search/findByName""
    }
  }
}
{noformat}

but the findFirstByName endpoint returns the 404 error



The query itself works fine when I run it directly on the repository


{code:java}
@Autowired
Repository repository;

@Test
public void contextLoads() {
	Person person = new Person();
	person.name = ""bla"";
	repository.save(person);
	Person person1 = repository.findFirstByName(""bla"");
	assertEquals(person.id,person1.id);
	repository.delete(person);
}
{code}

Here is the log output (org.springframework.web set to debug logging)

{noformat}

2017-05-03 15:17:53.059 DEBUG 2508 --- [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Looking up handler method for path /persons/search/findFirstByName
2017-05-03 15:17:53.064 DEBUG 2508 --- [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Did not find handler method for [/persons/search/findFirstByName]
2017-05-03 15:17:53.081 DEBUG 2508 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Last-Modified value for [/persons/search/findFirstByName] is: -1
2017-05-03 15:17:53.219  INFO 2508 --- [nio-8080-exec-1] org.mongodb.driver.connection            : Opened connection [connectionId{localValue:4, serverValue:1864}] to mongodb:27017
2017-05-03 15:17:53.252 DEBUG 2508 --- [nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolving exception from handler [public org.springframework.http.ResponseEntity<?> org.springframework.data.rest.webmvc.RepositorySearchController.executeSearch(org.springframework.data.rest.webmvc.RootResourceInformation,org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>,java.lang.String,org.springframework.data.rest.webmvc.support.DefaultedPageable,org.springframework.data.domain.Sort,org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler,org.springframework.http.HttpHeaders)]: org.springframework.data.rest.webmvc.ResourceNotFoundException: Resource not found!
2017-05-03 15:17:53.252 DEBUG 2508 --- [nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolving exception from handler [public org.springframework.http.ResponseEntity<?> org.springframework.data.rest.webmvc.RepositorySearchController.executeSearch(org.springframework.data.rest.webmvc.RootResourceInformation,org.springframework.util.MultiValueMap<java.lang.String, java.lang.Object>,java.lang.String,org.springframework.data.rest.webmvc.support.DefaultedPageable,org.springframework.data.domain.Sort,org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler,org.springframework.http.HttpHeaders)]: org.springframework.data.rest.webmvc.ResourceNotFoundException: Resource not found!
2017-05-03 15:17:53.254 DEBUG 2508 --- [nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Invoking @ExceptionHandler method: org.springframework.http.ResponseEntity<?> org.springframework.data.rest.webmvc.RepositoryRestExceptionHandler.handleNotFound(org.springframework.data.rest.webmvc.ResourceNotFoundException)
2017-05-03 15:17:53.282 DEBUG 2508 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Null ModelAndView returned to DispatcherServlet with name 'dispatcherServlet': assuming HandlerAdapter completed request handling
2017-05-03 15:17:53.282 DEBUG 2508 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Successfully completed request
{noformat}
","Windows 10, running with intellij idea",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-05-04 08:47:46.048,9223372036854775807,issuemaster(issuemaster),,"0|i0amdb:",9223372036854775807,9223372036854775807,http://stackoverflow.com/questions/43754675/spring-rest-repository-resource-return-single-object-in-search,,,,,,,,,,,,,"04/May/17 8:47 AM;olivergierke;Maybe I am missing something, but the absence of a result (a {{null}} value), implies the absence of a resource, i.e. I'd argue 404 is the correct status code.

What status code and response would you expect in case the execution of a query returns {{null}} and why?","04/May/17 11:18 AM;pstreef;You are totally right. Clear case of tunnel vision... I'm unsure why I came upon this error in the first place, but I've been trying to figure out why it did not map the resource without supplying the actual search parameters, always ending up with the 404.

So sorry for wasting your time. My app is working as intended, I just didn't know it! I don't think I can close this myself so please can you please do that for me?","31/Jul/18 7:48 PM;hgsaldanha;I'm still having a question about this behavior. When the method returns an empty list, the status code is 200. Is that correct?","31/Jul/18 8:48 PM;pstreef;An empty list is an object, so sounds correct to me.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1431|https://github.com/spring-projects/spring-data-rest/issues/1431]. ",,,,,,,,,,,,,,,,,,,
HttpMessageNotWritableException when JPA entity has enum attribute,DATAREST-1060,76726,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,ptahchiev,ptahchiev,20/Apr/17 8:58 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,19/Jun/17 4:07 PM,3.0 M1 (Kay),3.0 M2 (Kay),,,2.5.12 (Hopper SR12),2.6.5 (Ingalls SR5),3.0 RC1 (Kay),,,,,0,,,,,"Hi guys,
this is my entity:
{code}
@Entity
public class ProductEntity {

    public static final String NAME = ""product"";

    @Id
    private long id;

    @Column
    private String test;

    @Column
    private Status status;

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getTest() {
        return test;
    }

    public void setTest(String test) {
        this.test = test;
    }

    public Status getStatus() {
        return status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }
}
{code}

this is my enum:
{code}
public enum Status {
    OK,
    FAILED
}
{code}

I also have a {{JpaRepository}} and I try to {{findAll}} products or create a new one, but I get the following exception:
{code}
{
  ""timestamp"": 1492678694676,
  ""status"": 500,
  ""error"": ""Internal Server Error"",
  ""exception"": ""org.springframework.http.converter.HttpMessageNotWritableException"",
  ""message"": ""Could not write JSON document: java.lang.String cannot be cast to java.lang.Enum (through reference chain: org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$PersistentEntityResourceSerializer$1[\""content\""]->com.example.ProductEntity[\""test\""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: java.lang.String cannot be cast to java.lang.Enum (through reference chain: org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$PersistentEntityResourceSerializer$1[\""content\""]->com.example.ProductEntity[\""test\""])"",
  ""path"": ""/product/""
}
{code}

Works fine with {{Ingalls}} and {{Hopper}} releases. I will provide a test-project.",,,,,,,,,,,,DATAREST-1103,,,,,,,,,,,,,,,,,,,,2017-04-24 05:08:16.126,9223372036854775807,issuemaster(issuemaster),,"0|i0alkn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"20/Apr/17 9:00 AM;ptahchiev;Here's the test project: https://github.com/ptahchiev/DATAREST-1060/","24/Apr/17 5:08 AM;stolbovd;Try add {{@Enumerated(EnumType.STRING)}} to enumeration attribute {{private Status status}}.

{code:java}
@Column
@Enumerated(EnumType.STRING)
private Status status;
{code}","24/Apr/17 6:41 AM;ptahchiev;Hi Dmitry,

I already have this annotation - still doesn't work. I also updated the demo project with this annotation - it fails again.","24/Apr/17 10:01 AM;stolbovd;Hello, Petar!
It looks like bug. Testes are working with {{Spring Boot 1.5.3.RELEASE}}.","16/Jun/17 9:01 AM;olivergierke;This is a bug in Jackson 2.9. See the [ticket I filed|https://github.com/FasterXML/jackson-databind/issues/1664] here.","19/Jun/17 12:55 PM;olivergierke;Looks like we can work around this by implementing {{BeanSerializerModifier.changeProperties(…)}} instead of {{….updateBuilder(…)}}. See the linked ticket in Jackson for details.","19/Jun/17 4:07 PM;olivergierke;This should be in place now, fixed exactly like imagined above. The provided sample project now works. I've backported the fix to Ingalls and Hopper for general Spring 5 compatibility.","21/Jun/17 1:05 PM;awilkinson;To hopefully help someone join some dots, another symptom of this issue appears to be a failure that looks like this:

{noformat}
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Invalid type definition for type sample.secure.oauth2.Flight: Failed to construct BeanSerializer for [simple type, class sample.secure.oauth2.Flight]: (java.lang.IllegalStateException) Mismatch between `properties` size (6), `filteredProperties` (7): should have as many (or `null` for latter)
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:72)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadTypeDefinition(SerializerProvider.java:1163)
	at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructBeanSerializer(BeanSerializerFactory.java:527)
	at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanSerializer(BeanSerializerFactory.java:284)
	at com.fasterxml.jackson.databind.ser.BeanSerializerFactory._createSerializer2(BeanSerializerFactory.java:236)
	at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer(BeanSerializerFactory.java:170)
	at com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(SerializerProvider.java:1385)
	at com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(SerializerProvider.java:1336)
	at com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(SerializerProvider.java:580)
	at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$PersistentEntityResourceSerializer.hasScalarSerializer(PersistentEntityJackson2Module.java:220)
	at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$PersistentEntityResourceSerializer.serialize(PersistentEntityJackson2Module.java:181)
	at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$PersistentEntityResourceSerializer.serialize(PersistentEntityJackson2Module.java:151)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:481)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:320)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1396)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:913)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:292)
	... 83 more
{noformat}

It's fixed in the latest Kay snapshots.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1398|https://github.com/spring-projects/spring-data-rest/issues/1398]. ",,,,,,,,,,,,,,,
Deserialization of request body for creating PUT requests has to consider identifier derived from the URI,DATAREST-1050,76527,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,easen,easen,07/Apr/17 8:30 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,11/Apr/17 6:45 AM,2.5.8 (Hopper SR8),2.6.1 (Ingalls SR1),,,2.5.9 (Hopper SR9),2.6.2 (Ingalls SR2),3.0 M3 (Kay),,Content negotiation,,,0,,,,,"Within the RepositoryEntityController the  _putItemResource()_ method will check to see if an item exists, if it does not it will proceed to create it. This is not idempotent/safe.

This bug was invoked by using _@RepositoryRestResource_ which uses the _RepositoryEntityController_ behind the scenes.

In the scenario where the entity/resource has a auto generated ID, the putItemResource() is able to create multiple items. 

RFC2616 section 9.1.2 (https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html) states: ""_Methods can also have the property of ""idempotence"" in that (aside from error or expiration issues) the side-effects of N > 0 identical requests is the same as for a single request. The methods GET, HEAD, PUT and DELETE share this property. _""

The change in PUT functionality from being update only to create or update can be traced back to ""DATAREST-348 - Support for json-patch+json and merge-patch+json media types""",Impacts all,,,,,,,,,DATAREST-1304,,,,,,,,,,,,,,,,,,,,,,2017-04-10 15:02:07.584,9223372036854775807,issuemaster(issuemaster),,"0|i0akcf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"10/Apr/17 3:02 PM;olivergierke;I'm not sure I get the point here. Creating instances via PUT is completely fine, as long as subsequent calls to the URI cause updates. That's exactly the point of idempotency. You can repeat the request as often as you want. The outcome — a particular resource state at that particular URI — will stay the same. So your conclusion about the general behaviour not being idempotent (stated in the first sentence) is incorrect.

If, however, the current implementation causes subsequent releases to create new instances as well, then we have to consider this a bug of course. As far as I can see, the {{PersistentEntityResource}} created for a PUT request tries to lookup an existing instance with the identifier derived from the URI (see {{PersistentEntityResourceHandlerMethodArgumentResolver.resolveArgument(…)}}. If that lookup returns an instance, the entire request is considered an update to the existing resource. I.e. you shouldn't be able to create multiple aggregate instances by PUTting to an item resource URI. I'd be happy to see a sample project that shows the erroneous behaviour.

We unfortunately can't apply the change provided in the PR as it's a behaviour change that some of our users rely on. The fact aside that simply changing a couple of lines in the code without proper test cases is not something that's gonna cut it anyway.","10/Apr/17 4:08 PM;easen;Take the case where the ID of the entity is randomly generated server side (i.e. a UUID). If you make multiple PUT requests, the controller will generate you multiple resources - which means the current implementation is not idempotent.

If uses are relying on this _PUT_ behaviour then they have unfortunately misunderstood RFC2616, _PUT_ should not be used to create resource. No other REST framework that I could find supports this odd _PUT_ behaviour.

I am willing to add some unit tests around this, but as it stands the PR didn't break any unit tests and I couldn't find any other unit tests that I could base as test from.","10/Apr/17 4:31 PM;olivergierke;It feels you're confusing quite a few things here. If a PUT request is issued against an item resource, there already is a well defined ID contained in the URI, so there is no id generation going on. As a REST framework we can't make any assumptions of the underlying persistence mechanism.

You also seem to really misread section 9.6 of RFC2616. In no way it forbids resource creation. Literally, the third sentence explicitly states:

{quote}
If the Request-URI does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI.
{quote}

So we're exactly following the spec here. There is no ""odd PUT behavior"". Again, I am talking about the general expectations of what a PUT is allowed to do and what not. There seems to be a very fundamental misunderstanding on your side. I think we need to resolve that first as we cannot discuss consequences based on invalid assumptions.

That said, I think you're still casting some light on a corner case that might cause issues here: we currently don't force the identifier supplied in the URI onto the aggregate root that has been deserialized from the request. That might cause identifier generation to kick in on the call to the persistence layer, which on subsequent requests would still necessarily not obtain the instance created and thus indeed again create a new instance.

The fix for that would be to force the identifier derived from the URI on the deserialized instance, so that either the persistence backend would either reject that operation as it expects identifier generation but sees a predefined one, or at least allow transparent creation and updates to the same resource.

tl;dr — I think you have a point. I just think your conclusion of how to fix this is invalid and based on a misunderstanding about what PUT is specified to achieve.","10/Apr/17 5:07 PM;petercoulton;It's *almost* following the spec, but not in the case of a generated id.

{quote}
> If the Request-URI does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI.

So we're exactly following the spec here.
{quote}

I think the important part of that quote is {{with that URI}}. In the current implementation the created resource will not match the request URI. This means that multiple PUT requests to a single resource URI causes new resources to be created each time, this is not idempotent.

For example:

{code}
Request:
PUT /resources/30dc42d7-8b42-4a36-ae12-8083cfa43599

Response:
Status: 201
Location: /resources/7e4ede28-b020-461b-830a-e403402f6306
{code}

The request URI and the created resource URI are not the same, breaking the idempotence of the PUT request.

In this scenario it's not possible to create the resource at the URI of the request because we should not allow the client to specify the id and there isn't a resource already at the URI. This means the request must fail.

Also, from RFC 2616:

bq. [...] the URI in a PUT request identifies the entity enclosed with the request -- the user agent knows what URI is intended and the server MUST NOT attempt to apply the request to some other resource.","10/Apr/17 6:28 PM;olivergierke;You're basically validating my point. However, this is not what the original poster described, claimed in his first comment and provided a fix for. The argument was that resource creation via PUT is non-idempotent (which it is not) and something the spec forbids (which it doesn't).

The spec doesn't know anything about ids except URI. Moreover it doesn't know anything about generation of resource ids. In fact, it even must not. So there's a bug in our implementation that needs to be more defensive and force the backend identifier provided via the URI on the deserialized aggregate instance.

I'll update the ticket summary accordingly and prepare a fix.","10/Apr/17 8:01 PM;easen;Upon reading the spec I concede that I was wrong with regards to using PUT to create a resource, which maybe valid in some situations
 e.g. {{PUT /users/easen}}. However I think we all agree this can be problem when the ID's are automatically generated - which was stated in my original comment.

The other reason why I raised this it wasn't clear from DATAREST-348 that if this change was desired or was implemented by accident.

Can you explain what you mean by {quote}So there's a bug in our implementation that needs to be more defensive and force the backend identifier provided via the URI on the deserialized aggregate instance.{quote} ","11/Apr/17 5:44 AM;olivergierke;Spring Data REST has always supported that kind of arrangement. The code touches you saw for DATAREST-348 we're simply due to a lot of refactorings in that area.

Here's what I mean with that line you quote.

# Assume we receive a request like this:\\{noformat}
PUT /foos/4711 { ""name"" : ""Bar"" }
{noformat}
# That means the result of the deserialization is an instance of {{Foo}} with the {{name}} property set to ""Bar"". {{Foo}}'s identifier however has not been set to 4711. That causes the identifier generation to kick in normally, create some random *other* id so that subsequent requests like the one shown in 1. would create new objects.
# If we go ahead and now make sure that 4711 is also set on the {{Foo}} instance created, the backend can either simply store that instance, i.e. skip identifier generation, or detect that generation is intended but a value has ben manually assigned and thus reject that call. If the first path is chosen, a subsequent call like 1. would then find the existing instance with identifier 4711, result in a proper update and thus implement the idempotent nature PUT requires.

We can also think about introducing configuration means to disable the support for creating instances via PUT in the first place. In fact, for 3.0 I am even in favour of disabling it by default, requiring the user to opt in for that support. The support for that had been initially developed before I took over the project and we didn't want to remove it so far as that'd probably break some users. 3.0 is a great chance to do something about this however.

Feel free to create a new ticket that's asking for a configuration flag to support PUT for creation per aggregate type.","11/Apr/17 6:45 AM;olivergierke;That should be fixed now. Feel free to give the snapshots a try. And thanks for the discussion! :)","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1396|https://github.com/spring-projects/spring-data-rest/issues/1396]. ",,,,,,,,,,,,,,,
"Instructions in ""Assigning Validators manually"" are not correct in reference documentation",DATAREST-1046,72105,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,michael.simons,michael.simons,05/Apr/17 8:17 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,11/Apr/17 8:24 AM,,,,,2.5.9 (Hopper SR9),2.6.2 (Ingalls SR2),3.0 M3 (Kay),,Documentation,,,0,,,,,The docs speak about subclassing {{RepositoryRestMvcConfiguration}} and overriding {{configureValidatingRepositoryEventListener(…)}}. This method doesn't exist in {{RepositoryRestMvcConfiguration}} but is part of {{RepositoryRestConfigurer}} respectively {{RepositoryRestConfigurerAdapter}}.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:31:11.175,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/264,"0|i09t1r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1412|https://github.com/spring-projects/spring-data-rest/issues/1412]. ",,,,,,,,,,,,,,,,,,,,,,,
JSON Patch to subresource collection results in SpelEvaluationException: Method size() cannot be found ,DATAREST-1039,72057,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Complete,olivergierke,joshwand,joshwand,31/Mar/17 11:04 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,07/Jun/17 10:28 AM,2.6.1 (Ingalls SR1),,,,2.5.11 (Hopper SR11),2.6.4 (Ingalls SR4),3.0 M4 (Kay),,,,,1,,,,,"I am trying to use JSON Patch to add a subresource to a collection.. using the canonical Post -> Comment relationship with OneToMany and ManyToOne and a PostRepository, as suggested by Oliver here: 
http://stackoverflow.com/questions/25311978/posting-a-onetomany-sub-resource-association-in-spring-data-rest/25451662#25451662 

and following Mathias's answer here: 
http://stackoverflow.com/questions/34843297/modify-onetomany-entity-in-spring-data-rest-without-its-repository/34864254#34864254.

Using 2.6.1 (as imported by Boot 1.5.2.RELEASE):

Sending PATCH to {{/posts/1}} with:
{code}
[{""op"":""add"", ""path"":""/comments/-"", ""value"":{""commentText"":""test comment""}}];
{code}

gives the following exception:
{noformat}
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1004E: Method call: Method size() cannot be found on com.example.Post type
	at org.springframework.expression.spel.ast.MethodReference.findAccessorForMethod(MethodReference.java:211) ~[spring-expression-4.3.7.RELEASE.jar:4.3.7.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:125) ~[spring-expression-4.3.7.RELEASE.jar:4.3.7.RELEASE]
	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:85) ~[spring-expression-4.3.7.RELEASE.jar:4.3.7.RELEASE]
	at org.springframework.expression.spel.ast.OpMinus.getValueInternal(OpMinus.java:98) ~[spring-expression-4.3.7.RELEASE.jar:4.3.7.RELEASE]
	at org.springframework.expression.spel.ast.Indexer.getValueRef(Indexer.java:123) ~[spring-expression-4.3.7.RELEASE.jar:4.3.7.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:66) ~[spring-expression-4.3.7.RELEASE.jar:4.3.7.RELEASE]
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:87) ~[spring-expression-4.3.7.RELEASE.jar:4.3.7.RELEASE]
	at org.springframework.expression.spel.standard.SpelExpression.getValueType(SpelExpression.java:356) ~[spring-expression-4.3.7.RELEASE.jar:4.3.7.RELEASE]
	at org.springframework.expression.spel.standard.SpelExpression.getValueType(SpelExpression.java:342) ~[spring-expression-4.3.7.RELEASE.jar:4.3.7.RELEASE]
	at org.springframework.data.rest.webmvc.json.patch.PatchOperation.evaluateValueFromTarget(PatchOperation.java:177) ~[spring-data-rest-webmvc-2.6.1.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.json.patch.AddOperation.perform(AddOperation.java:43) ~[spring-data-rest-webmvc-2.6.1.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.json.patch.Patch.apply(Patch.java:64) ~[spring-data-rest-webmvc-2.6.1.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.config.JsonPatchHandler.applyPatch(JsonPatchHandler.java:91) ~[spring-data-rest-webmvc-2.6.1.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.config.JsonPatchHandler.apply(JsonPatchHandler.java:83) ~[spring-data-rest-webmvc-2.6.1.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.readPatch(PersistentEntityResourceHandlerMethodArgumentResolver.java:198) ~[spring-data-rest-webmvc-2.6.1.RELEASE.jar:na]
{noformat}

Sample project with failing tests attached. 

I can't get this basic boot/restmvc project running with Kay-M1 so unable to test there.",,,,,,,,,,,,,,,,,,,,,,,,,,"31/Mar/17 11:03 PM;joshwand;jsonpatch-collection-add.zip;https://jira.spring.io/secure/attachment/23828/jsonpatch-collection-add.zip",,,,,,2017-05-12 13:01:28.75,9223372036854775807,issuemaster(issuemaster),,"0|i09sr3:",9223372036854775807,9223372036854775807,,,Kay M3,,,,,,,,,,,"12/May/17 1:01 PM;olivergierke;That should be fixed now. We now rather inspect the type than the object to find out about the type to unmarshal the incoming JSON into. Also we now transparently initialize uninitialized collections.","12/May/17 10:27 PM;joshwand;(y)(y)","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1405|https://github.com/spring-projects/spring-data-rest/issues/1405]. ",,,,,,,,,,,,,,,,,,,,,
ResourceProcessor is not applied to declared type if lambda is used to create an instance of it,DATAREST-1038,72054,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Works as Designed,olivergierke,cgeo,cgeo,31/Mar/17 4:55 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,19/Apr/17 2:05 PM,2.6.1 (Ingalls SR1),,,,,,,,,,,1,,,,,"When creating a ResourceProcessor for any Projection Interface, this not only doesn't work, but also seems to break the entire REST API, producing the following exception:

{code:java}
.m.m.a.ExceptionHandlerExceptionResolver : Resolved exception caused by Handler execution: java.lang.ClassCastException: org.springframework.data.rest.webmvc.RepositoryLinksResource cannot be cast to org.springframework.hateoas.Resource
{code}

To reproduce is simple

{code:java}

@Entity @Data
@NoArgsConstructor
@AllArgsConstructor
public class Person extends AbstractPersistable<Long> {
	String name;
	String surname;
}


public interface PersonRepository extends PagingAndSortingRepository<Person, Long> {
}

@Bean
public ResourceProcessor<Resource<PersonProjection>> listProjection() {
	return resource -> {
		resource.removeLinks();
		return resource;
	};
}

@Projection(name = ""list"", types = {Person.class})
public interface PersonProjection {
	Long getId();
}


{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-04-19 11:58:04.264,9223372036854775807,issuemaster(issuemaster),,"0|i09sqf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"19/Apr/17 11:58 AM;o.v.kurbatov;I think this issue should be closed as the accepted solution is found in [this stackoverflow question|http://stackoverflow.com/questions/43087647].

??Instead of anonymous descendant of *ResourceProcessor* you can define it as a stand-alone class.??","19/Apr/17 2:05 PM;olivergierke;Yeah, unfortunately there's nothing we can do here as this is a fundamental limitation of lambdas in Java. See [this thread|http://mail.openjdk.java.net/pipermail/compiler-dev/2017-January/010675.html] on the compiler dev list.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1404|https://github.com/spring-projects/spring-data-rest/issues/1404]. ",,,,,,,,,,,,,,,,,,,,,
Allow overriding exposure defined at the type level on the method,DATAREST-1034,71975,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Duplicate,olivergierke,jasheets1,jasheets1,23/Mar/17 5:46 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,07/Mar/18 7:55 AM,2.5.8 (Hopper SR8),,,,,,,,Repositories,,,5,,,,,"What I want to accomplish is have all Repository methods not exported be default with the type level @RestRepositoryResource(exported=false) annotation, and expose only selected methods via the @RestResource(exported=true) annotation

Here is a gist of what I'm trying to do https://gist.github.com/jeffsheets/f2c2488fdba30b170a760c91dcdd58a9

It appears though that @RestRepositoryResource at the type level when set to false will take full precedence and not export the entire repository. No matter what the method level @RestResource annotations are set to.

I'm not sure if this is a new feature request, a bug, or just my bad googling at finding an existing example of documentation.

Project using Spring Boot 1.4.5, which uses Spring Data Hopper SR8",,,,,,,,,,,,,,,,DATAREST-1176,DATAREST-948,,,,,,,,,,,,,,,2017-07-04 20:31:54.64,9223372036854775807,issuemaster(issuemaster),,"0|i09s8v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04/Jul/17 8:31 PM;fquinner;I'd very much like to see this working too. It's teasing that the inverse works but that this doesn't :).

In order to only expose what's necessary and known to be defined, I need to make the repository a blacklist of interfaces when really a whitelist would be a lot cleaner and ""feels"" better defined.

Consider running an updated build of an application, but forgetting to read the release notes of a spring data rest release (gasp) which added a new {{dropDatabase}} method (yes, i'm exaggerating). This would mean that if i just happen to build with a more recent version, this unknown method will suddenly be exposed and public.","06/Mar/18 7:02 PM;jasheets1;If I understand https://jira.spring.io/browse/DATAREST-1176 correctly, it looks like this is now achievable via `RepositoryRestConfiguration.disableDefaultExposure()`","07/Mar/18 7:54 AM;olivergierke;I think you're right, Jeff. Please give the new config option a try and report back if you still need something more tweakable. We're going to allow even more fine grained control over the HTTP methods supported via DATAREST-948 as currently a declared {{save(…)}} method enables both {{PUT}} and {{PATCH}} for item resources as well as {{POST}} for collection resources which seems to be insufficient.

I'll resolve this as fixed against the version of DATAREST-1176 for now but feel free to reopen in case there's anything else you need.","07/Mar/18 4:06 PM;jasheets1;Great, thanks Oliver. I'll start following 948 too as that sounds like another nice feature.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1401|https://github.com/spring-projects/spring-data-rest/issues/1401]. ",,,,,,,,,,,,,,,,,,,
NullPointerException in ServletInvocableHandlerMethod.invokeAndHandle when using @ExceptionHandler,DATAREST-1031,71943,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,pwebb,pwebb,20/Mar/17 10:15 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,09/Jun/17 8:04 AM,,,,,2.5.12 (Hopper SR12),2.6.5 (Ingalls SR5),3.0 M4 (Kay),,,,,2,,,,,"Originally raised [in Spring Boot #8659|https://github.com/spring-projects/spring-boot/issues/8659] it appears that Spring Data REST causes the following exception when a {{@ExceptionHandler}} method is used:

{noformat}
java.lang.NullPointerException: null
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:132) ~[spring-webmvc-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:384) ~[spring-webmvc-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:59) [spring-webmvc-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:136) [spring-webmvc-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:74) [spring-webmvc-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1218) [spring-webmvc-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1030) [spring-webmvc-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:980) [spring-webmvc-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) [spring-webmvc-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) [spring-webmvc-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.5.11.jar!/:8.5.11]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:474) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:783) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:798) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1434) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_111]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_111]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.11.jar!/:8.5.11]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_111]
{noformat}

Digging a bit, it appears that {{returnValueHandlers}} in {{ServletInvocableHandlerMethod}} is {{null}}. Usually this doesn't happen because it's set from {{ExceptionHandlerExceptionResolver}} which has an {{afterPropertiesSet}} method to always initialize its {{returnValueHandlers}}.

In Spring Data REST the {{RepositoryRestMvcConfiguration}} has a {{extendHandlerExceptionResolvers}} method which creates a new {{ExceptionHandlerExceptionResolver}}. It doesn't however call {{afterPropertiesSet}} or {{setReturnValueHandlers}}.

[Here's the line code|https://github.com/spring-projects/spring-data-rest/blob/729309bfc48c7c072aefbb66a72a874ae671bc2f/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/config/RepositoryRestMvcConfiguration.java#L670]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-06-09 07:35:25.187,9223372036854775807,issuemaster(issuemaster),,"0|hzzy4x:uzzzzzzzzzzzzzzzzzzzzz",9223372036854775807,9223372036854775807,,,Kay M2,Kay M3,,,,,,,,,,"20/Mar/17 10:16 PM;pwebb;There's a sample application that reproduces the issue in the Spring Boot bug report.","09/Jun/17 7:35 AM;w_c_smith;I'm observing the same behavior. Oddly, some handler down the chain does seem to work, but I get a hefty stack trace at WARN level before it's invoked.","09/Jun/17 8:04 AM;olivergierke;That's fixed by adding the call to {{afterPropertiesSet()}}.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1397|https://github.com/spring-projects/spring-data-rest/issues/1397]. ",,,,,,,,,,,,,,,,,,,,
PATCH requests do not handle links to associations properly,DATAREST-1030,71939,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,awilkinson,awilkinson,20/Mar/17 4:29 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,10/Apr/17 6:50 PM,2.5.8 (Hopper SR8),,,,2.5.9 (Hopper SR9),2.6.2 (Ingalls SR2),3.0 M3 (Kay),,,,,0,,,,,"The regression appears to be in 2.5.6 but JIRA won't let me selected that as an affected version. It's still present in 2.5.8 and 2.6.1. Some code that makes {{PATCH}} request to update an entity with a reference to another entity works with 2.5.5 but fails with later versions. The failure is:

{noformat}
2017-03-20 16:18:52.020 ERROR 42129 --- [           main] o.s.d.r.w.RepositoryRestExceptionHandler : Could not read payload!; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.example.Tag: no String-argument constructor/factory method to deserialize from String value ('http://localhost/tags/1')
 at [Source: N/A; line: -1, column: -1]

org.springframework.http.converter.HttpMessageNotReadableException: Could not read payload!; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.example.Tag: no String-argument constructor/factory method to deserialize from String value ('http://localhost/tags/1')
 at [Source: N/A; line: -1, column: -1]
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.read(DomainObjectReader.java:83) ~[spring-data-rest-webmvc-2.5.6.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.config.JsonPatchHandler.applyMergePatch(JsonPatchHandler.java:94) ~[spring-data-rest-webmvc-2.5.6.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.config.JsonPatchHandler.apply(JsonPatchHandler.java:84) ~[spring-data-rest-webmvc-2.5.6.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.readPatch(PersistentEntityResourceHandlerMethodArgumentResolver.java:198) ~[spring-data-rest-webmvc-2.5.6.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.read(PersistentEntityResourceHandlerMethodArgumentResolver.java:176) ~[spring-data-rest-webmvc-2.5.6.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.resolveArgument(PersistentEntityResourceHandlerMethodArgumentResolver.java:138) ~[spring-data-rest-webmvc-2.5.6.RELEASE.jar:na]
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:160) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:129) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:65) ~[spring-test-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) [tomcat-embed-core-8.5.6.jar:8.5.6]
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:167) [spring-test-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:134) [spring-test-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:155) [spring-test-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at com.example.PatchRegressionApplicationTests.contextLoads(PatchRegressionApplicationTests.java:80) [test-classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_11]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_11]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_11]
	at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0_11]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) [junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) [junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) [junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) [junit-4.12.jar:4.12]
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75) [spring-test-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86) [spring-test-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) [spring-test-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) [junit-4.12.jar:4.12]
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252) [spring-test-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94) [spring-test-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) [junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) [junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) [junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) [junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) [junit-4.12.jar:4.12]
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) [spring-test-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) [spring-test-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) [junit-4.12.jar:4.12]
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191) [spring-test-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) [.cp/:na]
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) [.cp/:na]
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) [.cp/:na]
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) [.cp/:na]
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) [.cp/:na]
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) [.cp/:na]
Caused by: com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.example.Tag: no String-argument constructor/factory method to deserialize from String value ('http://localhost/tags/1')
 at [Source: N/A; line: -1, column: -1]
	at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:270) ~[jackson-databind-2.8.5.jar:2.8.5]
	at com.fasterxml.jackson.databind.DeserializationContext.instantiationException(DeserializationContext.java:1456) ~[jackson-databind-2.8.5.jar:2.8.5]
	at com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(DeserializationContext.java:1012) ~[jackson-databind-2.8.5.jar:2.8.5]
	at com.fasterxml.jackson.databind.deser.ValueInstantiator._createFromStringFallbacks(ValueInstantiator.java:370) ~[jackson-databind-2.8.5.jar:2.8.5]
	at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromString(StdValueInstantiator.java:315) ~[jackson-databind-2.8.5.jar:2.8.5]
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromString(BeanDeserializerBase.java:1282) ~[jackson-databind-2.8.5.jar:2.8.5]
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:159) ~[jackson-databind-2.8.5.jar:2.8.5]
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:150) ~[jackson-databind-2.8.5.jar:2.8.5]
	at com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:3770) ~[jackson-databind-2.8.5.jar:2.8.5]
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2099) ~[jackson-databind-2.8.5.jar:2.8.5]
	at com.fasterxml.jackson.databind.ObjectMapper.treeToValue(ObjectMapper.java:2596) ~[jackson-databind-2.8.5.jar:2.8.5]
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.handleArrayNode(DomainObjectReader.java:286) ~[spring-data-rest-webmvc-2.5.6.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.handleArray(DomainObjectReader.java:257) ~[spring-data-rest-webmvc-2.5.6.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.doMerge(DomainObjectReader.java:189) ~[spring-data-rest-webmvc-2.5.6.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.read(DomainObjectReader.java:81) ~[spring-data-rest-webmvc-2.5.6.RELEASE.jar:na]
	... 52 common frames omitted
{noformat}

I have attached a small sample application that reproduces the problem. {{./mvnw clean verify}} will fail whereas {{./mvnw -Phopper-sr5 clean verify}} should succeed.",,,,,,,,,,,,,,,,,,,,,,,,,,"20/Mar/17 4:28 PM;awilkinson;patch-regression.zip;https://jira.spring.io/secure/attachment/23814/patch-regression.zip",,,,,,2017-04-10 18:50:14.104,9223372036854775807,issuemaster(issuemaster),,"0|i09s0v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"07/Apr/17 4:07 PM;awilkinson;Any news on this one? It's preventing me from upgrading REST Docs' samples to Boot 1.5 which I'd hoped to do prior to releasing 1.2.","10/Apr/17 6:50 PM;olivergierke;Should be in place. Your sample project works for me if I upgrade to the snapshots.","20/Aug/18 11:05 AM;guroo;According to this issue it's legal to update associations of a resource via PATCH request, but why documentation doesn;t mention it?

There is ""association resource"" description only: https://docs.spring.io/spring-data/rest/docs/current/reference/html/#repository-resources.association-resource","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1393|https://github.com/spring-projects/spring-data-rest/issues/1393]. ",,,,,,,,,,,,,,,,,,,,
"Add another option to, by default, expose none of the repositories",DATAREST-1029,71918,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Works as Designed,olivergierke,gregturn,gregturn,16/Mar/17 8:47 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,16/Mar/17 9:24 PM,,,,,,,,,,,,0,,,,,"We get requests often about what's the best way to ""secure"" a Spring Data REST app. With all repositories being exposed by default, I wonder if it wouldn't be best to offer some option that flips that around. 

And perhaps, Spring Boot could throw the switch when Spring Security is on the classpath?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-03-16 21:04:04.422,9223372036854775807,issuemaster(issuemaster),,"0|i09rw7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16/Mar/17 9:04 PM;olivergierke;{{RepositoryRestConfiguration}} has a {{setRepositoryDetectionStrategy(…)}} with a couple of possible default implementations in {{RepositoryDetectionStrategies}}. {{ANNOTATED}} is probably what you imagine here, but Boot switching to that by default is probably offending at least [~joshlong] as that'd mean an explicit configuration step for his demos :).","16/Mar/17 9:24 PM;gregturn;Turns out RepositoryDetectionStrategies.ANNOTATED already accomplishes this.","16/Mar/17 9:27 PM;gregturn;I showed a Pivot to drop this into their code..

{code}
@Component
public class CustomizedRestMvcConfiguration extends RepositoryRestConfigurerAdapter {

  @Override
  public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {
    config.setRepositoryDetectionStrategy(RepositoryDetectionStrategies.ANNOTATED);
  }
}
{code}

Somehow, reconstituting that recipe sounds like a bit much. Maybe somehow having that wrapped up in either a single Boot property setting, or kicking in if Spring Security is ALSO on the classpath.....","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1391|https://github.com/spring-projects/spring-data-rest/issues/1391]. ",,,,,,,,,,,,,,,,,,,,
Obsolete Global CORS configuration example,DATAREST-1020,71816,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,mp911de,caparzo,caparzo,07/Mar/17 10:31 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,08/Mar/17 10:21 AM,2.6.1 (Ingalls SR1),3.0 M1 (Kay),,,2.6.2 (Ingalls SR2),3.0 M2 (Kay),,,Documentation,,,0,,,,,"I am using Spring Data REST 2.6.1  and found obsolete example in [the reference documentation|http://docs.spring.io/spring-data/rest/docs/2.6.1.RELEASE/reference/html/#_global_cors_configuration].

There is no {{addCorsMapping(…)}} on {{RepositoryCorsRegistry}} anymore. There is {{getCorsConfigurations(…)}} instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-03-08 10:21:25.53,9223372036854775807,issuemaster(issuemaster),,"0|i09r9j:",9223372036854775807,9223372036854775807,,,Kay M2,,,,,,,,,,,"08/Mar/17 10:21 AM;mp911de;Thanks for reporting the issue, that's fixed now in the documentation. The correct method is {{addMapping(…)}}.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1382|https://github.com/spring-projects/spring-data-rest/issues/1382]. ",,,,,,,,,,,,,,,,,,,,,,
@CrossOrigin on rest repositories does not work with configured base path,DATAREST-1019,71815,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,mp911de,caparzo,caparzo,07/Mar/17 10:24 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,19/Apr/17 8:00 AM,2.6.1 (Ingalls SR1),3.0 M1 (Kay),,,2.6.2 (Ingalls SR2),3.0 M3 (Kay),,,Repositories,,,0,,,,,"I'm using Spring Boot 1.5.2.RELEASE and dependencies {{spring-boot-starter-data-rest}} and {{spring-boot-starter-data-jpa}}. This transitively pulls in {{spring-data-rest-core }} 2.6.1.RELEASE which is supposed to have CORS support based on [the reference documentation|http://docs.spring.io/spring-data/rest/docs/2.6.1.RELEASE/reference/html/#customizing-sdr.configuring-cors] and DATAREST-573.

My web application works fine and I expose REST api using app property {{spring.data.rest.base-path=/api}}. When I annotate my repo with {{@CrossOrigin}} annotation, e.g.

{code:java}
@CrossOrigin
public interface GroupRepository extends PagingAndSortingRepository<Group, Long>, QueryDslPredicateExecutor<Group> {
    List<Group> findByName(@Param(""name"") String name);
}
{code}

Spin up the application and invoke the following curl command:

{code:java}
curl -v -H ""Accept: application/hal+json"" -H ""Origin: http://localhost:1234"" http://localhost:8080/api/groups
{code}

The server side doesn't return CORS headers: {{Access-Control-Allow-Credentials}}, {{Access-Control-Allow-Origin}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-03-07 12:34:11.386,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/259,"0|i09r9b:",9223372036854775807,9223372036854775807,,,Kay M2,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1381|https://github.com/spring-projects/spring-data-rest/issues/1381]. ",,,,,,,,,,,,,,,,,,,,,,,
Potential NullPointerException in UriToEntityConverter,DATAREST-1018,71812,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,maximumg,maximumg,07/Mar/17 7:24 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,07/Mar/17 4:34 PM,2.5.8 (Hopper SR8),2.6.1 (Ingalls SR1),,,2.5.9 (Hopper SR9),2.6.2 (Ingalls SR2),3.0 M2 (Kay),,,,,0,,,,,"springBootVersion = '1.5.2.RELEASE'

Using a Mongo(or PagingAndSorting)Repository to persist an AMQP-Message either directly or in a wrapper class works great.

Including the ""spring-boot-starter-data-rest""-dependency in the project causes an ""UnsatisfiedDependencyException"" when starting the application.

After initially creating an issue on the spring-boot github I got the following feedback:

The underlying failure is:
{code:java}
Caused by: java.lang.NullPointerException: null
	at org.springframework.data.rest.core.UriToEntityConverter.<init>(UriToEntityConverter.java:71) ~[spring-data-rest-core-2.6.1.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.uriToEntityConverter(RepositoryRestMvcConfiguration.java:650) ~[spring-data-rest-webmvc-2.6.1.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.defaultConversionService(RepositoryRestMvcConfiguration.java:230) ~[spring-data-rest-webmvc-2.6.1.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration$$EnhancerBySpringCGLIB$$5836bf08.CGLIB$defaultConversionService$6(<generated>) ~[spring-data-rest-webmvc-2.6.1.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration$$EnhancerBySpringCGLIB$$5836bf08$$FastClassBySpringCGLIB$$219fc350.invoke(<generated>) ~[spring-data-rest-webmvc-2.6.1.RELEASE.jar:na]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.3.7.RELEASE.jar:4.3.7.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:358) ~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]
	at org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration$$EnhancerBySpringCGLIB$$5836bf08.defaultConversionService(<generated>) ~[spring-data-rest-webmvc-2.6.1.RELEASE.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_102]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_102]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_102]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_102]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]
	... 47 common frames omitted
{code}

this NPE comes from the fact a domainType of java.lang.reflect.TypeVariable<java.lang.Object> is detected for whatever reason and that one doesn't have an entity, so entity.hasIdProperty()fails with an NPE.

I included a sample application that repoduces the issue.",,,,,,,,,,,,,,,,,,,,,,DATAREST-1021,DATACMNS-1006,,,"07/Mar/17 7:15 AM;maximumg;test.zip;https://jira.spring.io/secure/attachment/23797/test.zip",,,,,,2020-12-31 10:31:07.849,9223372036854775807,issuemaster(issuemaster),,"0|i09r8n:",9223372036854775807,9223372036854775807,https://github.com/spring-projects/spring-boot/issues/8507,,,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1380|https://github.com/spring-projects/spring-data-rest/issues/1380]. ",,,,,,,,,,,,,,,,,,,,,,,
Java 7 compatibility broken due to usage of Java 8 API in AnnotatedEventHandlerInvoker,DATAREST-1014,71728,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,alanhay,alanhay,01/Mar/17 3:22 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,03/Mar/17 10:40 AM,2.5.7 (Hopper SR7),,,,2.5.9 (Hopper SR9),2.6.2 (Ingalls SR2),,,Repositories,,,0,,,,,"Usage of Java 8 specific method 
{code:java}
method.getParameterCount()
{code}
 in the following class

org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker


{code:java}
if (method.getParameterCount() == 0) {
	throw new IllegalStateException(String.format(PARAMETER_MISSING, method));
}
{code}

breaks HOPPER-SR7 in Java 7 Environments:

https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html

https://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Method.html


{code:java}
14:00:49,555 ERROR [org.apache.catalina.core.ContainerBase.[jboss.web].[default-host].[/edental-web-pars-1.0-SNAPSHOT]] (ServerService Thread Pool -- 51) JBWEB000289: Servlet dispatcher threw load() exception: java.lang.NoSuchMethodError: java.lang.reflect.Method.getParameterCount()I
	at org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.inspect(AnnotatedEventHandlerInvoker.java:169) [spring-data-rest-core-2.5.7.RELEASE.jar:]
	at org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.access$000(AnnotatedEventHandlerInvoker.java:60) [spring-data-rest-core-2.5.7.RELEASE.jar:]
	at org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker$1.doWith(AnnotatedEventHandlerInvoker.java:135) [spring-data-rest-core-2.5.7.RELEASE.jar:]
	at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:530) [spring-core-4.3.2.RELEASE.jar:4.3.2.RELEASE]
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:31:07.393,9223372036854775807,issuemaster(issuemaster),,"0|i09qpz:",9223372036854775807,9223372036854775807,,,Kay M2,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1376|https://github.com/spring-projects/spring-data-rest/issues/1376]. ",,,,,,,,,,,,,,,,,,,,,,,
PUT nulls Json read-only property,DATAREST-1006,71486,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,mduesterhoeft,mduesterhoeft,10/Feb/17 8:11 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,04/Oct/17 9:38 AM,2.6 GA (Ingalls),,,,2.6.8 (Ingalls SR8),3.0.1 (Kay SR1),3.1 M1 (Lovelace),,,,,1,,,,,"Moving to spring data rest Ingalls GA introduces a new problem regarding read only json properties. 

We use {{@JsonProperty(access = READ_ONLY)}} to mark fields as read-only in our entities. So this field should be serialized but not deserialized. 

With Ingalls a PUT request nulls such a property. 

I think in a PUT should treat {{@JsonProperty(access = READ_ONLY)}} just as  {{@JsonIgnore}} - so such properts is just ignored in a PUT.

I have added a test on my fork to reproduce the case: https://github.com/mduesterhoeft/spring-data-rest/commit/c46df6e66b1bfeb27f81d9e7c03e15b699f1019a
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-10-04 08:26:17.84,9223372036854775807,issuemaster(issuemaster),,"0|i09po7:",9223372036854775807,9223372036854775807,,,Kay GA,,,,,,,,,,,"10/Feb/17 12:56 PM;mduesterhoeft;This issue is related to https://github.com/FasterXML/jackson-databind/issues/935 

This is fixed with jackson-databind 2.8.7-SNAPSHOT (2.8.7 not yet released) 

Still I had to add handling of ignored fields to {{MappedProperties}} to make it work. 

It seems that fields annotated with {{@JsonIgnore}} do not show up in {{BeanDescription.findProperties}}. A field annotated with {{@JsonProperty(access = READ_ONLY)}} does but at the same time it is contained in {{BeanDescription.getIgnoredPropertyNames}} 

I added another branch to show the solution that can be applied once jackson-databind 2.8.7 is released and spring-data-rest references it. 

https://github.com/mduesterhoeft/spring-data-rest/commit/61ee267af9caf375959068d17f9214bf7964e470","10/Feb/17 1:09 PM;mduesterhoeft;A workaround that solved it for me is using {{@ReadOnlyProperty}}","04/Oct/17 8:26 AM;msparer;Any news on this? The fix provided in [~mduesterhoeft]'s comment (and PR) looks promising.","04/Oct/17 8:30 AM;mduesterhoeft;Just saw that we have Jackson 2.8.8 now. I will update my PR accordingly.","04/Oct/17 8:48 AM;olivergierke;Is there any fix needed at all? You original comment implied it would be fixed with a plain Jackson upgrade, which is why I was basically waiting for its release. Happy to look into what's needed to be done in case there is something.","04/Oct/17 8:51 AM;mduesterhoeft;I had to skip ignored properties in {{MappedProperties}} to get it to work

Please see my commit - it contains a test to reproduce the issue.
https://github.com/mduesterhoeft/spring-data-rest/commit/61ee267af9caf375959068d17f9214bf7964e470

The test is still red on the current master.","04/Oct/17 8:54 AM;olivergierke;I'll have a look, thanks.","04/Oct/17 8:58 AM;mduesterhoeft;Just updated the PR https://github.com/spring-projects/spring-data-rest/pull/258","04/Oct/17 9:38 AM;olivergierke;That's merged. Feel free to give the snapshots a try.","04/Oct/17 4:25 PM;msparer;Thanks guys. I stumbled upon a related, but different bug that lets PATCH requests override read-only properties just today: DATAREST-1144","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1369|https://github.com/spring-projects/spring-data-rest/issues/1369]. ",,,,,,,,,,,,,
Implementation details serialized for requests requesting arbitrary JSON response,DATAREST-1003,71451,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,dabada,dabada,07/Feb/17 9:27 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,01/Mar/17 9:12 PM,2.5.6 (Hopper SR6),2.5.7 (Hopper SR7),2.6 GA (Ingalls),,2.5.8 (Hopper SR8),2.6.1 (Ingalls SR1),3.0 M2 (Kay),,,,,0,,,,,"h2. Normal behavior :

h3. Profile : 
{code:json}
curl -H 'Accept:application/schema+json'  ""http://dabada.dscloud.biz:8080/REDS/rest/profile/reference-data""
{
  ""title"" : ""Reference data"",
  ""properties"" : {
    ""parent"" : {
      ""title"" : ""Parent"",
      ""readOnly"" : false,
      ""type"" : ""string"",
      ""format"" : ""uri""
    },
    ""code"" : {
      ""title"" : ""Code"",
      ""readOnly"" : false,
      ""type"" : ""string""
    },
    ""pCode"" : {
      ""title"" : ""P code"",
      ""readOnly"" : true,
      ""type"" : ""string""
    },
    ""description"" : {
      ""title"" : ""Description"",
      ""readOnly"" : false,
      ""type"" : ""string""
    },
    ""label"" : {
      ""title"" : ""Label"",
      ""readOnly"" : false,
      ""type"" : ""string""
    },
    ""status"" : {
      ""title"" : ""Status"",
      ""readOnly"" : false,
      ""type"" : ""string""
    }
  },
  ""requiredProperties"" : [ ""code"", ""label"", ""status"" ],
  ""definitions"" : { },
  ""type"" : ""object"",
  ""$schema"" : ""http://json-schema.org/draft-04/schema#""
}
{code}

h3. Data Resource : 

{code:json}
curl -i  ""http://dabada.dscloud.biz:8080/REDS/rest/reference-data/AR.CURR.CHF""
HTTP/1.1 200 
X-Application-Context: application
Last-Modified: Fri, 17 Jun 2016 12:46:08 GMT
ETag: ""0""
Content-Disposition: inline;filename=f.txt
Content-Type: application/hal+json;charset=UTF-8
Transfer-Encoding: chunked
Date: Tue, 07 Feb 2017 20:59:23 GMT

{
  ""code"" : ""CHF"",
  ""pCode"" : ""AR.CURR.CHF"",
  ""label"" : ""الفرنك السويسري"",
  ""description"" : null,
  ""status"" : ""ENABLED"",
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://dabada.dscloud.biz:8080/REDS/rest/reference-data/AR.CURR.CHF""
    },
    ""reference-data"" : {
      ""href"" : ""http://dabada.dscloud.biz:8080/REDS/rest/reference-data/AR.CURR.CHF""
    },
    ""parent"" : {
      ""href"" : ""http://dabada.dscloud.biz:8080/REDS/rest/reference-data/AR.CURR.CHF/parent""
    }
  }
}
{code}

h2. Not desired behavior :
You can reproduce this issue by adding the 'Accept:application/schema+json' HTTP header to a data resource rest query

{code}
curl -i -H 'Accept:application/schema+json' ""http://dabada.dscloud.biz:8080/REDS/rest/reference-data/AR.CURR.CHF"" > out.txt
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 23.4M    0 23.4M    0     0   114M      0 --:--:-- --:--:-- --:--:--  114Mcurl: (56) Malformed encoding found in chunked-encoding}}
{code}

I got a file with 114M size !

Here the head part of this file :

{code:json}
HTTP/1.1 200 
X-Application-Context: application
Last-Modified: Fri, 17 Jun 2016 12:46:08 GMT
ETag: ""0""
Content-Disposition: inline;filename=f.txt
Content-Type: application/schema+json;charset=UTF-8
Transfer-Encoding: chunked
Date: Tue, 07 Feb 2017 21:11:20 GMT

{
  ""id"" : 126,
  ""code"" : ""CHF"",
  ""pCode"" : ""AR.CURR.CHF"",
  ""label"" : ""الفرنك السويسري"",
  ""description"" : null,
  ""status"" : ""ENABLED"",
  ""parent"" : {
    ""id"" : 125,
    ""code"" : ""CURR"",
    ""pCode"" : ""AR.CURR"",
    ""label"" : ""عملة"",
    ""description"" : null,
    ""status"" : ""ENABLED"",
    ""parent"" : {
      ""id"" : 113,
      ""code"" : ""AR"",
      ""pCode"" : ""AR"",
      ""label"" : ""البيانات المرجعية"",
      ""description"" : null,
      ""status"" : ""ENABLED"",
      ""parent"" : null,
      ""handler"" : { },
      ""hibernateLazyInitializer"" : { }
    },
    ""handler"" : { },
    ""hibernateLazyInitializer"" : { }
  },
  ""embeddeds"" : {
    ""content"" : [ ]
  },
  ""nested"" : false,
  ""persistentEntity"" : {
    ""idProperty"" : {
      ""name"" : ""id"",
      ""rawType"" : ""long"",
      ""field"" : {
        ""name"" : ""id"",
        ""type"" : ""long"",
        ""modifiers"" : 2,
        ""annotations"" : [ { }, { }, { } ],
        ""declaredAnnotations"" : [ { }, { }, { } ],
        ""synthetic"" : false,
        ""declaringClass"" : ""com.salepower.core.jpa.entity.AbstractIdentifiableBaseEntity"",
        ""enumConstant"" : false,
        ""genericType"" : ""long"",
        ""annotatedType"" : {
          ""type"" : ""long"",
          ""annotations"" : [ ],
          ""declaredAnnotations"" : [ ]
        },
        ""accessible"" : true
      },
      ""association"" : false,
      ""owner"" : {
        ""idProperty"" : {
          ""name"" : ""id"",
          ""rawType"" : ""long"",
          ""field"" : {
            ""name"" : ""id"",
            ""type"" : ""long"",
            ""modifiers"" : 2,
            ""annotations"" : [ { }, { }, { } ],
            ""declaredAnnotations"" : [ { }, { }, { } ],
            ""synthetic"" : false,
            ""declaringClass"" : ""com.salepower.core.jpa.entity.AbstractIdentifiableBaseEntity"",
            ""enumConstant"" : false,
            ""genericType"" : ""long"",
            ""annotatedType"" : {
              ""type"" : ""long"",
              ""annotations"" : [ ],
              ""declaredAnnotations"" : [ ]
            },
            ""accessible"" : true
          },
          ""association"" : false,
          ""owner"" : {
            ""idProperty"" : {
              ""name"" : ""id"",
              ""rawType"" : ""long"",
              ""field"" : {
                ""name"" : ""id"",
                ""type"" : ""long"",
                ""modifiers"" : 2,
                ""annotations"" : [ { }, { }, { } ],
                ""declaredAnnotations"" : [ { }, { }, { } ],
                ""synthetic"" : false,
                ""declaringClass"" : ""com.salepower.core.jpa.entity.AbstractIdentifiableBaseEntity"",
                ""enumConstant"" : false,
                ""genericType"" : ""long"",
                ""annotatedType"" : {
                  ""type"" : ""long"",
                  ""annotations"" : [ ],
                  ""declaredAnnotations"" : [ ]
                },
                ""accessible"" : true
              },
              ""association"" : false,
              ""owner"" : {
                ""idProperty"" : {
                  ""name"" : ""id"",
                  ""rawType"" : ""long"",
                  ""field"" : {
                    ""name"" : ""id"",
                    ""type"" : ""long"",
                    ""modifiers"" : 2,
                    ""annotations"" : [ { }, { }, { } ],
                    ""declaredAnnotations"" : [ { }, { }, { } ],
                    ""synthetic"" : false,
                    ""declaringClass"" : ""com.salepower.core.jpa.entity.AbstractIdentifiableBaseEntity"",
                    ""enumConstant"" : false,
                    ""genericType"" : ""long"",
                    ""annotatedType"" : {
                      ""type"" : ""long"",
                      ""annotations"" : [ ],
                      ""declaredAnnotations"" : [ ]
                    },
                    ""accessible"" : true

...
{code}

This error taks my server down afler a  java.io.IOException: Broken pipe exception. This could be a good DOS attack for Spring Data Rest services and have to be removed.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-03-01 21:12:31.633,9223372036854775807,issuemaster(issuemaster),,"0|i09pgf:",9223372036854775807,9223372036854775807,,,Ingalls GA,,,,,,,,,,,"01/Mar/17 9:12 PM;olivergierke;That should be fixed in the latest snapshots. We too leniently answered requests for {{application/*+json}} which then caused {{PersistentEntityResource}} being handed to an {{ObjectMapper}} that doesn't have the necessary customizations in place and just rendered every tiny implementation detail.

I've verified that collection and item resources now properly return a {{406 NotAcceptable}} for calls to e.g. {{application/schema+json}} or more generally anything {{application/*+json}} that's not explicitly handled. Feel free to give the snapshots a try.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1366|https://github.com/spring-projects/spring-data-rest/issues/1366]. ",,,,,,,,,,,,,,,,,,,,,,
PUT on Entity with OneToOne/ManyToOne doesn't update (PATCH works),DATAREST-1000,71442,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,svennold,svennold,07/Feb/17 8:14 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,01/Mar/17 6:27 PM,2.5.7 (Hopper SR7),2.6 GA (Ingalls),,,,,,,,,,1,,,,,"Attached test succeeds for <= Hopper SR6 but fails on Ingalls/SNAPSHOT 

mvn clean test -Dspring-data-releasetrain.version=Hopper-SR6 --> succeeds
mvn clean test -Dspring-data-releasetrain.version=Ingalls-RELEASE --> fails",,,,,,,,,,,,,,,,DATAREST-1001,,,,,,,,,,"08/Feb/17 6:59 AM;svennold;test.zip;https://jira.spring.io/secure/attachment/23703/test.zip",,,,,,2017-03-01 18:27:33.018,9223372036854775807,issuemaster(issuemaster),,"0|i09pef:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"08/Feb/17 6:52 AM;svennold;Relates to 1001","01/Mar/17 6:27 PM;olivergierke;Resolving as duplicate of DATAREST-1001 as it basically is the same scenario: trying to update an association through a PUT that actually has to be done through a call to the association resource as everything else would create more questions than answers. I shared details about my concerns in the related ticket. Linking in a second.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1363|https://github.com/spring-projects/spring-data-rest/issues/1363]. ",,,,,,,,,,,,,,,,,,,,,
Appending items to an array via JSON Patch doesn't work as defined in the RFC,DATAREST-995,71400,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,01/Feb/17 4:52 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,27/Sep/17 7:30 AM,2.5.7 (Hopper SR7),2.6 GA (Ingalls),,,2.5.8 (Hopper SR8),2.6.2 (Ingalls SR2),3.0 M2 (Kay),,,,,2,,,,,"Contrary to what's defined in the spec, we seem to currently use {{~}} as trigger for appending items to an array. It has to be {{-}} instead.

We should move to support both for now and remove the broken support for {{~}} in the next release train.",,,,,,,,,,,,,,,,,DATAREST-813,,,,,,,,,,,,,,,2017-02-02 02:30:07.095,9223372036854775807,issuemaster(issuemaster),,"0|hzzy4x:uzwzzzyzzzzzzr",9223372036854775807,9223372036854775807,,,Kay RC1,Kay RC3,Kay GA,,,,,,,,,"02/Feb/17 2:30 AM;shakuzen;Just a heads up that I have added integration tests to the sample project. There appear to be two issues there. One is covered by this issue. I will open a separate issue for the other one.","02/Feb/17 11:58 PM;robmaskell;I've just hit this exact issue with ""-"" and the json returned is

{noformat}
{
    ""cause"": {
        ""cause"": null, 
        ""message"": ""Expression [details.-] @7: EL1049E: Unexpected data after '.': 'minus(-)'""
    }, 
    ""message"": ""Could not read PATCH operations! Expected application/json-patch+json!; nested exception is org.springframework.expression.spel.SpelParseException: Expression [details.-] @7: EL1049E: Unexpected data after '.': 'minus(-)'""
}
{noformat}

I tried ""~"" as Oliver suggested it worked for now but it doesn't for me, and I get this

{noformat}
{
    ""cause"": {
        ""cause"": null, 
        ""message"": ""EL1004E: Method call: Method size() cannot be found on com.masterslave.MasterDetail type""
    }, 
    ""message"": ""Could not read an object of type class com.masterslave.MasterDetail from the request!; nested exception is org.springframework.expression.spel.SpelEvaluationException: EL1004E: Method call: Method size() cannot be found on com.masterslave.MasterDetail type""
}
{noformat}

However I can add to the beginning of the array with ""0"" and anywhere inside it with numbers less than the size.

Also using Spring Boot 1.5.1




","08/Feb/17 11:14 PM;robmaskell;I think I have fixed this, will submit pull request so you can at least see what the problem was even if you choose to fix it another way (there may be a clever SpEL solution I just don't know of)

Just spotted that you are working on it so will hang fire on the PR

As I'm sure you worked out already

{code:java}
spelBuilder.append(""[size() - 1]"");
{code}

doesn't work for nested lists as it calls size on the object being added, my solution was to build up an explicit path for the size() call from the pathNodes array when the list is nested","27/Sep/17 7:17 AM;mduesterhoeft;The following commi implies that both {{~}} and {{-}} should be working currently.
https://github.com/spring-projects/spring-data-rest/commit/8ad81978b0401fdb6ce1ec9c9757c1ee05b74db6

But only  {{-}} works - a patch with a {{~}} fails with

{code}
java.lang.IllegalStateException: Cannot handle (126) '~'

	at org.springframework.expression.spel.standard.Tokenizer.process(Tokenizer.java:270)
	at org.springframework.expression.spel.standard.Tokenizer.<init>(Tokenizer.java:83)
	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.doParseExpression(InternalSpelExpressionParser.java:126)
	at org.springframework.expression.spel.standard.SpelExpressionParser.doParseExpression(SpelExpressionParser.java:61)
	at org.springframework.expression.spel.standard.SpelExpressionParser.doParseExpression(SpelExpressionParser.java:33)
	at org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression(TemplateAwareExpressionParser.java:51)
	at org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression(TemplateAwareExpressionParser.java:42)
	at org.springframework.data.rest.webmvc.json.patch.PathToSpEL.pathToExpression(PathToSpEL.java:43)
	at org.springframework.data.rest.webmvc.json.patch.PatchOperation.<init>(PatchOperation.java:73)

{code}

Test to reproduce:

{code:java}

{@Test // DATAREST-995
	public void addsItemsToNestedListTilde() {

		Todo todo = new Todo(1L, ""description"", false);


		new AddOperation(""/items/~"", ""Some text."").perform(todo, Todo.class);

		assertThat(todo.getItems().get(0)).isEqualTo(""Some text."");
	}}
{code}

I think the {{~}} is already rejected when parsing the spel.","27/Sep/17 7:26 AM;olivergierke;The ""support"" for {{~}} was supported in some areas but not in all. The key point of this ticket is: whatever support we previously had for {{~}} it must not be there. We've added proper support for {{-}} in the 2.6.x line and now have fully removed the support for {{~}}.

So what's the reason you actually want / need to use {{~}}? Looks like I simply forgot to properly close this ticket after the fix.","27/Sep/17 7:30 AM;olivergierke;Marking as fixes against the versions the commits have made it into.","27/Sep/17 7:38 AM;mduesterhoeft;It was just something that made our test break when going to 2.6.7. We were using {{~}} -which seems to be wrong - but has been working fine in previous versions.

Also {{PathToSpEL}} contains a constant {{List<String> APPEND_CHARACTERS = Arrays.asList(""-"", ""~"");}} which made me think that you actually want the tilde to be supported.

But looking at the spec {{-}} is obviously the correct choice.","27/Sep/17 7:46 AM;olivergierke;The reason for the constant is that in the beginning only {{~}} was supported which was wrong and the idea of everything 2.x was to now support both: the previously wrong character *and* the right one to then be able to cut off the wrong one with 3.0. I'll give your test case a try on 2.6 and see whether we missed a place where we currently only consider {{-}} now.","27/Sep/17 8:00 AM;olivergierke;I can see your test succeed on 2.6.x but fail on 3.0, which is exactly what was intended. Does that make sense?","27/Sep/17 8:01 AM;mduesterhoeft;Got it - thanks!

Currently I think the tilde is already rejected by the spel parser.","27/Sep/17 11:25 AM;mduesterhoeft;{quote}I can see your test succeed on 2.6.x but fail on 3.0, which is exactly what was intended. Does that make sense?{quote}

From what I see in the code - yes. Strange that the integration test in our code base fails with the tilde on 2.6.7. I guess I need to look at that a little closer.

Thanks ","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1305|https://github.com/spring-projects/spring-data-rest/issues/1305]. ",,,,,,,,,,,,
RepositoryRestHandlerMapping 2 arg constructor broken,DATAREST-994,71397,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,schauder,cbbs,cbbs,01/Feb/17 2:35 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,03/Feb/17 8:22 AM,2.6.1 (Ingalls SR1),2.6 GA (Ingalls),3.0 M1 (Kay),3.0 M2 (Kay),2.6.1 (Ingalls SR1),3.0 M2 (Kay),,,,,,0,,,,,"_RepositoryRestHandlerMapping_ constructor change breaks backwards compatibility after crossorigin was added. _RepositoryCorsConfigurationAccessor_ constructor arg ""repositories"" is marked @NonNull causing the legacy 2 arg constructor for the outer class to fail lombok validation. This was probably an oversight as ""repositories"" param desc still lists it as optional. Cross posting for springfox-data-rest compatibility issue.

h2. RepositoryRestHandlerMapping.java
{code:java}
	public RepositoryRestHandlerMapping(ResourceMappings mappings, RepositoryRestConfiguration config) {
		this(mappings, config, null);
	}

	/**
	 * Creates a new {@link RepositoryRestHandlerMapping} for the given {@link ResourceMappings}
	 * {@link RepositoryRestConfiguration} and {@link Repositories}.
	 *
	 * @param mappings must not be {@literal null}.
	 * @param config must not be {@literal null}.
	 * @param repositories can be {@literal null} if {@link CrossOrigin} resolution is not required.
	 */
	public RepositoryRestHandlerMapping(ResourceMappings mappings, RepositoryRestConfiguration config,
			Repositories repositories) {

		super(config);

		Assert.notNull(mappings, ""ResourceMappings must not be null!"");
		Assert.notNull(config, ""RepositoryRestConfiguration must not be null!"");

		this.mappings = mappings;
		this.configuration = config;
		this.repositories = repositories;
		this.corsConfigurationAccessor = new RepositoryCorsConfigurationAccessor(mappings, repositories,
				NoOpStringValueResolver.INSTANCE);
{code}

h2. Commit msg
{quote}
DATAREST-573 - Polishing.  …
Removed RepositoryRestConfiguration.addCorsMapping(…) as we currently don't have any other shortcut methods for configuration like this.

Tweaked the setup of (now Repository)CorsConfigurationAccessor to be created earlier so that we avoid recreation for every lookup. Introduced a NoOpStringValueResolver to be used by default so that we don't need to deal with the case of the resolver being null at the end of the call chain. Replaced constructor of RepositoryCorsConfigurationAccessor with corresponding Lombok annotation.

Updated reference documentation accordingly.

Original pull request: #233.
olivergierke committed on Oct 28, 2016
40bb8e8
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-02-02 09:50:42.009,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/257,"0|i09p4f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1358|https://github.com/spring-projects/spring-data-rest/issues/1358]. ",,,,,,,,,,,,,,,,,,,,,,,
PUT requests fail for transient properties not backed by a field,DATAREST-987,71273,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,ptahchiev,ptahchiev,23/Jan/17 9:00 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,24/Jan/17 12:22 PM,,,,,2.5.7 (Hopper SR7),2.6 GA (Ingalls),3.0 M2 (Kay),,,,,0,,,,,"Hello,

I gave a spin the latest SNAPSHOT because I wanted to test this commit:

https://github.com/spring-projects/spring-data-rest/commit/132807cbf1cd058c4ad74770ba3af38bcb4ded75

(""DATAREST-965 - Switched to property based application of PUT requests."").

It all works fine if you have a JPA entity with no {{@Transient}} properties, but if you have a {{@Transient}} getter I get the following exception:

{code}
Caused by: org.springframework.beans.NotReadablePropertyException: Invalid property 'a' of bean class [com.example.ProductEntity]: Bean property 'a' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter?
	at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:619) ~[spring-beans-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:610) ~[spring-beans-4.3.5.RELEASE.jar:4.3.5.RELEASE]
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.copyRemainingProperties(DomainObjectReader.java:211) ~[spring-data-rest-webmvc-2.6.0.BUILD-SNAPSHOT.jar:na]
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.mergeForPut(DomainObjectReader.java:193) ~[spring-data-rest-webmvc-2.6.0.BUILD-SNAPSHOT.jar:na]
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.readPut(DomainObjectReader.java:115) ~[spring-data-rest-webmvc-2.6.0.BUILD-SNAPSHOT.jar:na]
	... 57 common frames omitted
{code}

I have uploaded a sample repository that demonstrates this issue here: https://github.com/ptahchiev/DATAREST-986 (ignore the name of the project).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-01-23 21:24:58.8,9223372036854775807,issuemaster(issuemaster),,"0|i09ocv:",9223372036854775807,9223372036854775807,,,Ingalls GA,,,,,,,,,,,"23/Jan/17 9:02 PM;ptahchiev;Note that this used to work perfectly fine with all versions of SDR up until now.","23/Jan/17 9:24 PM;olivergierke;While I can see that we should support property based transient properties — which in this case wouldn't even work as you don't expose any setter — is there a reason you're not using a field for that value? If you're using field access (which you currently do), the method wouldn't even need to be marked with @Transient, would it?","23/Jan/17 10:13 PM;ptahchiev;Hi,

this is project-specific. We mark it as transient because we have a convention in our project: every JPA entity must have a constant field called NAME, which we use for a lot of purposes - for example we use it to denote which db table we must create, or under which rest url we must expose this entity. This way for {{ProductEntity}} we have:

{code}

public abstract class AbstractEntity {
    
    public abstract String getName();
}

@Entity(name = ProductEntity.NAME)
@Table(name = ProductEntity.NAME)
public class ProductEntity extends AbstractEntity {

      public static final String NAME = ""product"";

     // fields, getters & setters.

     public String getName() {
         return this.NAME;
     }
}
{code}","24/Jan/17 11:58 AM;olivergierke;So, why would a client then submit this field in a request body for a PUT?","24/Jan/17 12:02 PM;ptahchiev;That's the point - despite the fact I *don't* submit it I *still* see the error. Check my repository:  https://github.com/ptahchiev/DATAREST-986

In there I submit the following:

{code}
                {
                        ""id"" : ""1"",
                        ""name"" : {
                           ""en"" : {""value"" : ""some-en-value""},
                           ""bg"" : {""value"" : ""some-bg-value""}
                        }
                }
{code}

but the exception is:

{code}
Caused by: org.springframework.beans.NotReadablePropertyException: Invalid property 'a' of bean class [com.example.ProductEntity]: Bean property 'a' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter?
	at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:619) ~[spring-beans-4.3.5.RELEASE.jar:4.3.5.RELEASE]
{code}

That's why I'm saying it must work the way it used to work up until now.. otherwise we will break every SDR application.","24/Jan/17 12:11 PM;olivergierke;What's the way you get Jackson to consider the sole getter {{getA()}} to be recognized as property? I seem to need to add a setter to make it appear in the metamodel in the first place. I have a fix in place that checks whether there's a writable field and if so uses that but falls back to check whether there's both a getter and setter to then use these for the copy operation as fallback.","24/Jan/17 12:21 PM;ptahchiev;I don't think we do anything particular. We just want it to be returned in the JSON on GET, and I think this is sufficient:

{code}
        Hibernate5Module module = new Hibernate5Module();
        module.disable(Hibernate5Module.Feature.USE_TRANSIENT_ANNOTATION);
{code}

With my example project if you run it with {{mvn spring-boot:run}} then go to localhost and issue {{POST}}:

{code}
{
  ""id"" : ""1""
}
{code}


and then GET the {{http://localhost:8080/productEntities/1}} you will receive:

{code}
{
  ""name"" : { },
  ""a"" : ""a"",
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/productEntities/1""
    },
    ""productEntity"" : {
      ""href"" : ""http://localhost:8080/productEntities/1""
    }
  }
}
{code}

where the {{a}} is the {{@Transient}} property.
","24/Jan/17 12:22 PM;olivergierke;Fix in place. Feel free to give the snapshots a spin.","24/Jan/17 12:43 PM;ptahchiev;I think it works fine! Thanks a lot :)","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1303|https://github.com/spring-projects/spring-data-rest/issues/1303]. ",,,,,,,,,,,,,,
DomainObjectReader doesn't read complex Maps properly,DATAREST-986,71251,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,ptahchiev,ptahchiev,21/Jan/17 3:17 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,23/Jan/17 9:21 AM,,,,,2.5.7 (Hopper SR7),2.6 GA (Ingalls),3.0 M2 (Kay),,,,,0,,,,,"Hello,

I have a sample project where I get a very strange exception when I issue a PUT/PATCH request:
{code}
testSavePut(com.example.DemoRestProblemApplicationTests)  Time elapsed: 0.343 sec  <<< ERROR!
org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.orm.jpa.JpaSystemException: Error accessing field [private java.lang.String com.example.LocalizedValue.value] by reflection for persistent property [com.example.LocalizedValue#value] : {value=some-bg-value}; nested exception is org.hibernate.property.access.spi.PropertyAccessException: Error accessing field [private java.lang.String com.example.LocalizedValue.value] by reflection for persistent property [com.example.LocalizedValue#value] : {value=some-bg-value}
	at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167)
	at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171)
	at sun.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:58)
	at sun.reflect.UnsafeObjectFieldAccessorImpl.get(UnsafeObjectFieldAccessorImpl.java:36)
	at java.lang.reflect.Field.get(Field.java:393)
{code}

The interesting bit is that I have a custom jackson deserializer, but this deserializer doesn't seem to be invoked at all in the latest SNAPSHOT.

It used to be invoked and my tests pass when I use this commit from spring-data-rest:{{68d0a1aa6ab8b4c72d00bd3492588458a21cbb5e}} but then it got broken in this commit: {{7329e20fa854454f1cbe1b2e0b6ef0e012e87456}}.

I will upload the demo project in a second.",Ingalls-SNAPSHOT,,,,,,,,,,,,,,,,,,,,,DATAREST-954,,,,,,,,,,2017-01-22 16:28:03.501,9223372036854775807,issuemaster(issuemaster),,"0|i09o7z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21/Jan/17 3:21 PM;ptahchiev;Here is the demo project: https://github.com/ptahchiev/DATAREST-986

When you run it like it is you will see it fails. Then you can clone the {{spring-data-rest}} repository, build this commit {{68d0a1aa6ab8b4c72d00bd3492588458a21cbb5e}} from November and change the version my project uses to {{SNAPSHOT}} and then you will see the tests pass.","22/Jan/17 7:31 AM;ptahchiev;This issue is related to: https://jira.spring.io/browse/DATAREST-919","22/Jan/17 4:28 PM;olivergierke;The exception is coming from Hibernate. What's the reason you think this has to do with a JSON Deserializer?

{noformat}
org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.orm.jpa.JpaSystemException: Error accessing field [private java.lang.String com.example.LocalizedValue.value] by reflection for persistent property [com.example.LocalizedValue#value] : {value=some-bg-value}; nested exception is org.hibernate.property.access.spi.PropertyAccessException: Error accessing field [private java.lang.String com.example.LocalizedValue.value] by reflection for persistent property [com.example.LocalizedValue#value] : {value=some-bg-value}
	at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167)
	at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171)
	at sun.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:58)
	at sun.reflect.UnsafeObjectFieldAccessorImpl.get(UnsafeObjectFieldAccessorImpl.java:36)
	at java.lang.reflect.Field.get(Field.java:393)
	at org.hibernate.property.access.spi.GetterFieldImpl.get(GetterFieldImpl.java:39)
	at org.hibernate.tuple.component.AbstractComponentTuplizer.getPropertyValue(AbstractComponentTuplizer.java:58)
	at org.hibernate.tuple.component.AbstractComponentTuplizer.getPropertyValues(AbstractComponentTuplizer.java:64)
	at org.hibernate.tuple.component.PojoComponentTuplizer.getPropertyValues(PojoComponentTuplizer.java:95)
	at org.hibernate.type.ComponentType.getPropertyValues(ComponentType.java:440)
	at org.hibernate.type.ComponentType.replace(ComponentType.java:530)
	at org.hibernate.type.MapType.replaceElements(MapType.java:66)
	at org.hibernate.type.CollectionType.replace(CollectionType.java:663)
	at org.hibernate.type.TypeHelper.replace(TypeHelper.java:177)
	at org.hibernate.event.internal.DefaultMergeEventListener.copyValues(DefaultMergeEventListener.java:401)
	at org.hibernate.event.internal.DefaultMergeEventListener.entityIsPersistent(DefaultMergeEventListener.java:203)
	at org.hibernate.event.internal.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:176)
	at org.hibernate.event.internal.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:69)
	at org.hibernate.internal.SessionImpl.fireMerge(SessionImpl.java:840)
	at org.hibernate.internal.SessionImpl.merge(SessionImpl.java:822)
	at org.hibernate.internal.SessionImpl.merge(SessionImpl.java:827)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.merge(AbstractEntityManagerImpl.java:1161)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:347)
	at com.sun.proxy.$Proxy97.merge(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:298)
	at com.sun.proxy.$Proxy97.merge(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:511)
{noformat}","22/Jan/17 8:36 PM;ptahchiev;Yes, the exception comes from Hibernate because I use JPA as a store, but in fact this affects *all* stores. I know it's not Hibernate specific because I test with both this commit {{68d0a1aa6ab8b4c72d00bd3492588458a21cbb5e}} (works fine) and this commit {{7329e20fa854454f1cbe1b2e0b6ef0e012e87456}} (does not work) and *the same* version of hibernate.

The root of the exception is:
{code}
Caused by: java.lang.IllegalArgumentException: Can not set java.lang.String field com.example.LocalizedValue.value to java.util.HashMap
	at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167)
	at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171)
	at sun.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:58)
	at sun.reflect.UnsafeObjectFieldAccessorImpl.get(UnsafeObjectFieldAccessorImpl.java:36)
	at java.lang.reflect.Field.get(Field.java:393)
	at org.hibernate.property.access.spi.GetterFieldImpl.get(GetterFieldImpl.java:39)

{code}

Let me try to explain what happens. So in here: https://jira.spring.io/browse/DATAREST-919 somebody complained that when updating an entity via {{PUT}} or {{PATCH}} SDR silently ignores nested maps or arrays like this:
{code}
{
    ""attributes"" : {
          ""sub1"" : ""ok"",
          ""sub2"" : [ ""ok1"", ""ok2"" ],
          ""sub3"" : [ { ""childOk1"" : ""ok"" }],
          ""sub4"" : {
               ""c1"" : ""v1"",
               ""c2"" : ""new""
          }
     }
}
{code}

Then to fix this a commit was made ({{7329e20fa854454f1cbe1b2e0b6ef0e012e87456}}) which actually checks if the {{value}} of the map is a collection, or another map to merge it:
{code}
			if (child instanceof ObjectNode && sourceValue != null) {
				doMerge((ObjectNode) child, sourceValue, mapper);
			} else if (child instanceof ArrayNode && sourceValue != null) {
				handleArrayNode((ArrayNode) child, asCollection(sourceValue), mapper);
			} else {
				source.put(entry.getKey(),
						mapper.treeToValue(child, sourceValue == null ? Object.class : sourceValue.getClass()));
			}
{code}

This seems OK when you have a {{Map<String, Map>}} or {{Map<String, Collection>}}. However in my case I have this: {{Map<Locale, LocalizedValue>}} where {{LocalizedValue}} is an {{@Embedded}} object. And this is a perfectly valid scenario. My json looks like this:

{code}
                {
                        ""id"" : ""1"".
                        ""name"" : {
                             ""en"" : { ""value "" : ""some-en-value""},
                             ""bg"" : { ""value "" : ""some-bg-value""}
                         }
                }
{code}

and I have a custom jackson deserializer registered for the {{LocalizedValue}} (the one with {{value}} attribute).

After the changes introduced in {{7329e20fa854454f1cbe1b2e0b6ef0e012e87456}} my flow goes through the else condition and so this

{code}
source.put(entry.getKey(), mapper.treeToValue(child, sourceValue == null ? Object.class : sourceValue.getClass()));
{code}

is invoked and because the {{sourceValue}} is {{null}} it tries to deserialize it to {{Object.class}} so Jackson will eventually produce a {{Map}} out of the {{""value:""some-en-value""}} and will try to assign it as the {{value}} of the maps' value attribute. However the value of the attribute is {{LocalizedValue}} with a {{String value}}, not another {{Map}} so I get the exception {{Can not set java.lang.String field com.example.LocalizedValue.value to java.util.HashMap}}.
","23/Jan/17 7:50 AM;olivergierke;That helps a lot, Petar, thanks! We're gonna move to a different way of handling PUT requests anyway but what you describe still needs to be fixed for PATCH requests, too. I guess we should rather use the properties map value type and only all back to {{Object}} for raw maps. I guess we also have to invoke the mapper for the key in your case, too.

I'll ping you once the fix is in place.","23/Jan/17 9:21 AM;olivergierke;There should be snapshot builds fixing this glitch now. I've tried your sample but it now fails with this:

{noformat}
Caused by: java.lang.UnsupportedOperationException: Can not update object of type com.example.LocalizedValue (by deserializer of type com.example.LocalizedValueDeserializer)
	at com.fasterxml.jackson.databind.JsonDeserializer.deserialize(JsonDeserializer.java:126) ~[jackson-databind-2.8.6.jar:2.8.6]
	at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:1628) ~[jackson-databind-2.8.6.jar:2.8.6]
	at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1301) ~[jackson-databind-2.8.6.jar:2.8.6]
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.doMerge(DomainObjectReader.java:224) ~[spring-data-rest-webmvc-2.6.0.BUILD-SNAPSHOT.jar:na]
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.doMergeNestedMap(DomainObjectReader.java:338) ~[spring-data-rest-webmvc-2.6.0.BUILD-SNAPSHOT.jar:na]
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.doMerge(DomainObjectReader.java:207) ~[spring-data-rest-webmvc-2.6.0.BUILD-SNAPSHOT.jar:na]
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.merge(DomainObjectReader.java:135) ~[spring-data-rest-webmvc-2.6.0.BUILD-SNAPSHOT.jar:na]
	…
{noformat}

That seems to be caused by your deserializer implementation not overiding the {{deserialize(…)}} method taking an already existing instance so that {{JsonDeserializer}} throws the exception. With that in place, I guess it should just work.","23/Jan/17 10:09 AM;ptahchiev;Hi Oliver,

thank you for your fix. Indeed as indicated here:

https://groups.google.com/forum/#!topic/jackson-user/cGjURzLDx6Y

there are two {{deserialize}} methods - one to create an object, set the value and return, and the other one is used if you have an object already and you just want to update the value.
I implemented both methods the same way and pushed my changes.

Now the tests pass correctly.

Once again, thank you.","23/Jan/17 3:53 PM;olivergierke;I've reworked the way we handle PUT requests significantly for DATAREST-965. With those changes in place, your sample works already as we now read the JSON into an intermediate object and then merge that back to the target instance property by property.

Feel free to keep the latest snapshots a try. Release is scheduled for Wednesday.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1352|https://github.com/spring-projects/spring-data-rest/issues/1352]. ",,,,,,,,,,,,,,,
Invalid json schema generated by spring-data-rest,DATAREST-985,71250,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Duplicate,olivergierke,kopax,kopax,21/Jan/17 3:07 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,24/Jan/17 12:55 PM,2.5.6 (Hopper SR6),,,,,,,,Content negotiation,,,0,Spring,,,,"It appear the json schema generated when calling */api/profile/managers*

This is the response json : 

{code:json}
{
  ""title"": ""Manager"",
  ""properties"": {
    ""new"": {
      ""title"": ""New"",
      ""readOnly"": true,
      ""type"": ""boolean""
    },
    ""lastModifiedDate"": {
      ""title"": ""Last modified date"",
      ""readOnly"": false,
      ""type"": ""string"",
      ""format"": ""date-time"",
      ""$ref"": ""#/definitions/instant""
    },
    ""credentialsNonExpired"": {
      ""title"": ""Credentials non expired"",
      ""readOnly"": true,
      ""type"": ""boolean""
    },
    ""active"": {
      ""title"": ""Active"",
      ""readOnly"": false,
      ""type"": ""boolean""
    },
    ""login"": {
      ""title"": ""Login"",
      ""readOnly"": false,
      ""type"": ""string""
    },
    ""roleList"": {
      ""title"": ""Role list"",
      ""readOnly"": false,
      ""type"": ""array"",
      ""items"": {
        ""type"": ""string""
      }
    },
    ""enabled"": {
      ""title"": ""Enabled"",
      ""readOnly"": true,
      ""type"": ""boolean""
    },
    ""authorities"": {
      ""title"": ""Authorities"",
      ""readOnly"": true,
      ""type"": ""array"",
      ""items"": {
        ""type"": ""object""
      }
    },
    ""createdDate"": {
      ""title"": ""Created date"",
      ""readOnly"": false,
      ""type"": ""string"",
      ""format"": ""date-time"",
      ""$ref"": ""#/definitions/instant""
    },
    ""lastModifiedById"": {
      ""title"": ""Last modified by id"",
      ""readOnly"": false,
      ""type"": ""integer""
    },
    ""accountNonExpired"": {
      ""title"": ""Account non expired"",
      ""readOnly"": true,
      ""type"": ""boolean""
    },
    ""createdById"": {
      ""title"": ""Created by id"",
      ""readOnly"": false,
      ""type"": ""integer""
    },
    ""username"": {
      ""title"": ""Username"",
      ""readOnly"": true,
      ""type"": ""string""
    },
    ""accountNonLocked"": {
      ""title"": ""Account non locked"",
      ""readOnly"": true,
      ""type"": ""boolean""
    }
  },
  ""definitions"": {
    ""instant"": {
      ""type"": ""string"",
      ""properties"": {
        ""nano"": {
          ""title"": ""Nano"",
          ""readOnly"": true,
          ""type"": ""integer""
        },
        ""epochSecond"": {
          ""title"": ""Epoch second"",
          ""readOnly"": true,
          ""type"": ""integer""
        }
      }
    }
  },
  ""type"": ""object"",
  ""$schema"": ""http://json-schema.org/draft-04/schema#""
}
{code}

I can't get it validated in http://www.jsonschemavalidator.net/

{code:python}
Found 4 error(s)
  Message:Invalid type. Expected String but got Object.
  Schema path: #/definitions/instant/type

  Message: Invalid type. Expected String but got Null.
  Schema path: #/definitions/instant/type

  Message: Invalid type. Expected Integer but got Null.
  Schema path: #/properties/createdById/type

  Message: Invalid type. Expected Integer but got Null.
  Schema path: #/properties/lastModifiedById/type
{code}

I use a default spring installation with spring-data-rest.

For some reason, my Instant get serialized under a content sub key.

I asked the question [here](http://stackoverflow.com/questions/41777790/spring-data-rest-what-is-the-subkey-content-in-my-serialized-date-is-it-st).

Anyone know what's happening ?

","Linux dev-01 3.16.0-4-amd64 #1 SMP Debian 3.16.36-1+deb8u2 (2016-10-19) x86_64 GNU/Linux
",,,,,,,,,,,,,,,DATAREST-984,,,,,,,,,,,,,,,,2020-12-31 10:31:04.1,9223372036854775807,issuemaster(issuemaster),,"0|i09o7r:",9223372036854775807,9223372036854775807,https://github.com/mozilla-services/react-jsonschema-form/issues/447#issuecomment-274263459,,,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1351|https://github.com/spring-projects/spring-data-rest/issues/1351]. ",,,,,,,,,,,,,,,,,,,,,,,
Annotated event handlers do not resolve generic parameter types,DATAREST-983,71224,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,jvalerio,jvalerio,18/Jan/17 9:38 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,24/Jan/17 4:00 PM,2.5.5 (Hopper SR5),,,,2.5.7 (Hopper SR7),2.6 GA (Ingalls),3.0 M2 (Kay),,Repositories,,,0,,,,,"SDR Event Handlers do not resolve generic parameter types

When annotating an Parent Class with the SDR Event with a generic parameter, each time an event for any type extending that generic type is called, not limiting to the specific class defined in the child.

In the following example, if a BeforeCreateEvent is fired for a List, the SetHandler should not be called and vise versa.
{code:java}
	static class AbstractCollectionEventHandler<T extends Collection<?>>{
		int callCount = 0;
		@HandleBeforeCreate
		private void method(T collection){
			callCount += 1;
		}
	}
	@RepositoryEventHandler
	static class ListEventHandler extends AbstractCollectionEventHandler<List<?>>{}
	@RepositoryEventHandler
	static class SetEventHandler extends AbstractCollectionEventHandler<Set<?>>{}
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-01-24 12:57:29.63,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/254,"0|i09o1z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"19/Jan/17 5:16 PM;jvalerio;Resolved the generic parameter correctly to allow SDR events to be set on generic parent classes.","24/Jan/17 12:57 PM;olivergierke;What's the actual use case here? Almost by definition aggregates (the types that event handlers usually refer to) won't implement a collection interface, will they?","24/Jan/17 3:22 PM;jvalerio;Ok, that was a bad example, and I only chose it due to needing an interface to use without statically defining them in the test, but you can clearly see for a nested entity model, you could want to generically registering the eventHandler in a superclass where the impl might delegate to an abstract method for the full impl.  In this example I am just highlighting the routing of the event not the use case we have to warrant this functionality, as that is proprietary to our business.

{code:java}

    /**
     * @see DATAREST-983
     */
    @Test
    public void invokesEventHandlerOnParentClass() {

        FirstEventHandler firstHandler = new FirstEventHandler();
        SecondEventHandler secondHandler = new SecondEventHandler();

        AnnotatedEventHandlerInvoker invoker = new AnnotatedEventHandlerInvoker();
        invoker.postProcessAfterInitialization(firstHandler, ""firstHandler"");
        invoker.postProcessAfterInitialization(secondHandler, ""secondHandler"");

        invoker.onApplicationEvent(new BeforeCreateEvent(new FirstEntity()));
        invoker.onApplicationEvent(new BeforeCreateEvent(new SecondEntity()));

        assertThat(firstHandler.callCount, is(1));
        assertThat(secondHandler.callCount, is(1));
    }

    static class AbstractBaseEntityEventHandler<T extends BaseEntity> {
        int callCount = 0;

        @HandleBeforeCreate
        private void method(T entity) {
            callCount += 1;
        }
    }

    @RepositoryEventHandler
    static class FirstEventHandler extends AbstractBaseEntityEventHandler<FirstEntity> {
    }

    @RepositoryEventHandler
    static class SecondEventHandler extends AbstractBaseEntityEventHandler<SecondEntity> {
    }

    @Data
    static abstract class BaseEntity {
        private String id;
        private String createdBy;
        private LocalDate createdOn;
        private String modifiedBy;
        private LocalDate modifiedOn;
    }

    @Data
    @EqualsAndHashCode(callSuper = true)
    static class FirstEntity extends BaseEntity {
        private String foo1;
        private String bar1;
    }

    @Data
    @EqualsAndHashCode(callSuper = true)
    static class SecondEntity extends BaseEntity {
        private String foo2;
        private String bar2;
    }
{code}
","24/Jan/17 3:41 PM;olivergierke;I see where you're heading. I have a fix here, coming in a second.","24/Jan/17 4:00 PM;olivergierke;I've rather used {{ResolvableType}} as {{GenericTypeResolver}} is already deprecated. Other than that, the fix is in place. Feel free to give the snapshots a spin.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1350|https://github.com/spring-projects/spring-data-rest/issues/1350]. ",,,,,,,,,,,,,,,,,,
Patch fails on collection containing nested enums with class body,DATAREST-977,71117,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,mduesterhoeft,mduesterhoeft,10/Jan/17 7:45 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,24/Jan/17 4:05 PM,2.5.6 (Hopper SR6),,,,2.5.7 (Hopper SR7),2.6 GA (Ingalls),3.0 M2 (Kay),,,,,1,,,,,"A patch on a collection that contains an enum constant with class body as the first element fails.

Consider this enum:

{code:java}
public enum TaxClass {
		REDUCED,
		EXEMPT {
			@Override
			public boolean hasTax() {
				return false;
			}
		};

		public boolean hasTax() {
			return true;
		}
	}
{code}

Ich this case {{TaxModel.EXEMPT.getClass}} is not {{TaxModel}} but  {{TaxModel$1}}.

This raises a problem with determining the component type of an array in {{DomainObjectReader#handleArray}}

{code:java}
Iterator<Object> iterator = collection.iterator();
		TypeInformation<?> componentType = iterator.hasNext() ? //
				ClassTypeInformation.from(iterator.next().getClass()) : //
				collectionType.getComponentType();
{code}

The component type is inferred from the first entry of the collection and is {{TaxModel$1}} - jackson fails to deserialize the value with this type information with the exception below.

{code}
org.springframework.http.converter.HttpMessageNotReadableException: Could not read payload!; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests$TaxClass$1: no String-argument constructor/factory method to deserialize from String value ('REDUCED')
 at [Source: N/A; line: -1, column: -1]
{code}

I think we should not try to infer the component type using the first element of the collection. Such an approach might also break in other scenarios (e.g. inheritance). Isn't it sufficient to just use the collection type inferred from the {{PersistentProperty}} using {{collectionType.getComponentType()}} ? Looking at the Jackson code I also think that Jackson is doing just that to determine the component type of a collection - see https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java#L1575


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-01-24 16:05:11.939,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/252,"0|i09ne7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"24/Jan/17 4:05 PM;olivergierke;I've changed the behavior that indeed was overly optimistic. We now simply use the component type for new values to be added to the collection and transparently use the one of one already existing for each element processed.","24/Jan/17 4:11 PM;mduesterhoeft;Great - will give it a try.

I close my Pull-Request then.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1344|https://github.com/spring-projects/spring-data-rest/issues/1344]. ",,,,,,,,,,,,,,,,,,,,,
Sorting by an embedded property no longer works in Ingalls RC1,DATAREST-976,71105,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,mp911de,sgybas,sgybas,09/Jan/17 10:19 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,24/Jan/17 6:47 PM,2.6 RC1 (Ingalls),,,,2.6 GA (Ingalls),3.0 M2 (Kay),,,Repositories,,,1,,,,,"I have a JPA entity with embedded class and a corresponding {{PagingAndSortingRepository}} that is accessed using Spring Data REST. I like to sort by a property in the embedded class.

Please see https://github.com/sgybas/spring-data-sorting-bug for a repro. The test passes with Spring Boot 1.4.3 (Spring Data Hopper-SR) but fails with Spring Boot 1.5.0.RC1 (Spring Data Ingalls RC1). The test also passes if I sort by the entity's id so the problem only occurs with embedded classes.","Java 8, Spring Boot 1.5.0.RC1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-01-11 10:08:33.744,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/251,"0|i09nbj:",9223372036854775807,9223372036854775807,https://github.com/sgybas/spring-data-sorting-bug,,Ingalls GA,,,,,,,,,,,"11/Jan/17 10:08 AM;alanhay;Seeing same behaviour after updating from Hopper to Ingalls RC1. 

Previously a sort could be applied on a property of a nested object (for example, an Embeddable or a @ManyToOne association) by specifying:

sort=nestedField.property

This no longer seems to work.","11/Jan/17 1:21 PM;mp911de;That issue will be fixed with Ingalls GA, see [Pull-Request 251|https://github.com/spring-projects/spring-data-rest/pull/251]. ","13/May/17 5:12 AM;khaledlela;I tried [3.0.0.M3|http://docs.spring.io/spring-data/rest/docs/3.0.0.M3/changelog.txt] , But  _sort=nestedField.property,[asc|desc]_ still not working with me.","29/Sep/17 6:04 PM;tfleis82;Sorting with nested fields does not work in current version (1.5.7) of spring boot. Is there a workaround?","14/Dec/17 12:06 PM;drenda81;I'm using the 3.0.2.RELEASE and I'm experiencing the issue. I'm looking for a property using the notation 
{code:java}
property_subproperty
{code}

I debugged and the problem seems to be in the source code line 188 of JacksonMappingAwareSortTranslator:


{code:java}
if (associations.isLinkableAssociation(persistentProperty)) {
						return Collections.emptyList();
					}
{code}

This line return true and so empty the list that then later set the sort filter to null.

According to the question on https://stackoverflow.com/questions/42262846/spring-data-rest-sort-by-nested-property seems there are other people with the same issue.

Thanks

","18/Dec/17 4:08 PM;miran;Same issue, same line found while debugging (2.6.8.RELEASE)","20/Dec/17 4:07 PM;rvanciu;For  the 2.6.9 RELEASE, I tested the issue and I can confirm that it works as expected (see Pull-Request 251).  The nested sort is however restricted to properties annotated with ``@RestResource(exported=false)`` which in the documentation is specified as ``Sorting by linkable associations (i.e. resources to top-level resources) is not supported.``

I found this implementation a bit too restrictive, and I am looking for a workaround as well, since we want both linkable association and the nested sorting.  For example, we need the nested sorting to work for ``@ManyToOne`` properties which are implicitly  ``fetch=FetchType.EAGER``

The workaround I found so far is to create an extra read only property for sorting purposes only.  Building on the example from  https://stackoverflow.com/questions/42262846/spring-data-rest-sort-by-nested-property

```
@Entity(name = ""Person"")
@Table(name = ""PERSON"")
public class Person {

    // read only, for sorting purposes only
    @JsonIgnore // we can hide it from the clients, if needed
    @RestResource(exported=false, updatable = false, insertable=false) // read only so we can map 2 fields to the same database column
    @ManyToOne //implicitly fetch=FetchType.EAGER
    private Address address;

     // We still want the linkable association created to work as before so we manually override the relation and path
    @RestResource(exported=true, rel=""address"", path=""address"")
    @ManyToOne
    private Address addressLink;

```

The drawback for the proposed workaround is that we now have to explicitly duplicate all the properties for which we want to support nested sorting. 

Are there other workarounds? 

Would it be possible to configure the sort translator to relax the restrictions to properties with fetch=FetchType.EAGER associations?","23/Jan/18 11:35 AM;drenda81;Any will to fix this problem? The issue is still closed. Thanks","23/Jan/18 1:20 PM;mp911de;With Ingalls we changed the sorting behavior. It's possible to sort on nested object's properties, it's not possible to sort by association properties as they're seen from a REST perspective. You're not able to sort by properties of a referenced aggregate root if that one is exported.","23/Jan/18 1:43 PM;drenda81;Thanks for your explanation. Is there another way to accomplish this? Let's say I've a bean like this:


{code:java}
@Entity
public class Customer extends AbstractEntity {
      private String name;

      @ManyToOne(fetch = FetchType.LAZY, optional = true) 
      private Address address;
}
{code}

Typically in the GUI when I've a customer's table I want to sort by customer's properties, but I could also want to sort by address.name. Because address is exposed how am I supposed to accomplish to this if the sorting behaviour is changed?

Thanks
","14/Mar/18 12:50 PM;j.fischer@epages.com;We were facing the same problem (using Spring Boot 1.5.9 with Spring Data REST 2.6.9). The nested property that we tried to use for sorting was covered with a Jackson Mixin containing {{@JsonProperty(access = READ_ONLY)}}. Removing this annotation lead to proper sorting behaviour for this nested property.","21/Mar/18 3:18 PM;apetrelli;I noticed that the piece that excludes linkable associations (i.e. associations to entity exposes as resources via a repository) is due to the method:
JacksonMappingAwareSortTranslator.SortTranslator.mapPropertyPath
which says:

{quote}if (associations.isLinkableAssociation(persistentProperty)) {
	return Collections.emptyList();
}{quote}

IMHO this has no sense, why do you need to exclude them?","21/Mar/18 3:29 PM;apetrelli;I just noticed that Daniele Renda said the exact same thing, sorry for the noise. However it still does not make sense to me.","11/Feb/19 1:27 PM;anasofiapaixao;I stumbled upon the exact same issue and am extremely surprised this could be considered the expected behavior. At my job we went through the work of bumping our spring-boot version, I now regret it immensely and if I knew a version upgrade would result in the loss of basic, essential functionality with no viable alternative I would have never done it. There's dozens upon dozens of questions on stackoverflow from people desperate to do just this, with no answer or alternative that does not involve a multiplication of query methods and god knows how many if-elses in the frontend.

This was an essential feature.","11/Feb/19 4:42 PM;drenda81;I agree with [~anasofiapaixao], this is a very important feature. The issue is still in status ""closed"". Someone could ask for a revaluation and reopen it?","19/Sep/19 9:58 AM;drenda81;Any news? Thanks","25/Sep/19 1:11 PM;Viceic;Looks similar to https://jira.spring.io/browse/DATAREST-1024

 

At least it's still open and considered as a Major issue.

 

 

 

 ","25/Sep/19 9:13 PM;drenda81;Thanks!","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1343|https://github.com/spring-projects/spring-data-rest/issues/1343]. ",,,,,
Repository event handlers don't respect @Order annotations,DATAREST-970,71032,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,jvalerio,jvalerio,03/Jan/17 7:58 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,24/Jan/17 3:57 PM,2.5.5 (Hopper SR5),,,,2.5.7 (Hopper SR7),2.6 GA (Ingalls),3.0 M2 (Kay),,,,,0,,,,,"Spring Data Rest Repository Event Handlers don't respect @Order annotations

Our Application has plugin modules which include event handlers, but the primary application event handlers may not fire first, depending on classpath scanning and event handler loading order.  It would be great to have the spring data rest event handlers respect the @Order annotation, either at the class level or the method level (I think method is best).

I have created a project (https://github.com/joevalerio/DATAREST-970), where there are three event handlers numbered 1,2,3, and I have added the @Order Annotation to each, to attempt to run them in reverse order.  Currently it runs them in classname alpha order due to class path loading, but this should not be how I need to control event handler execution order.  The unit test attached will fail, as it its expecting the data to be set on the entity via the eventHandlers, which will only happen if they are run in reverse order.",spring-boot-1.4.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:31:02.343,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/248,"0|i09mvb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05/Jan/17 4:45 PM;jvalerio;Not sure why this was not auto linked, but I created a pull request to fix this issue:
https://github.com/spring-projects/spring-data-rest/pull/248","12/Jan/17 2:46 PM;jvalerio;Added Support for @Order annotation to SDR Repository Events.

Please review.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1340|https://github.com/spring-projects/spring-data-rest/issues/1340]. ",,,,,,,,,,,,,,,,,,,,,
TestRestTemplate doesn't take spring.data.rest.base-path in application.properties into account,DATAREST-968,71025,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Invalid,olivergierke,Doogie,Doogie,03/Jan/17 3:14 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,24/Jan/17 4:07 PM,2.4.6 (Gosling SR6),,,,,,,,Repositories,,,0,RestTemplate,Test,,,"When you expose your Repositories via sprint-data-rest

AND

you change the REST base-path  in {{application.properties}}

{code:java}
spring.data.rest.base-path=/base/path
{code}

WHEN  you then use an autoinjected TestRestTemplate,  then it is configured for localhost and the correct port, but not for that base path:


{code:java}
@RunWith(SpringRunner.class)
@ActiveProfiles(""test"")
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class RestEndpointTests {
  @Autowired
  TestRestTemplate client;

  @Test
  public void testUriMapping() {
    URI uri = client.getRestTemplate().getUriTemplateHandler().expand(""/dummy"");
    System.out.println(""URI /dummy maps to ""+uri);

    // will print  ""http://localhost:<port>/dummy""  
    // INSTEAD OF  ""http://localhost:<port>/base/path/dummy""   as configured in application.properties
  }
}
{code}

h2. Expected behaviour

The autoinjected TestRestTemplate   should automatically be configured with the base path  from  applicatin.properties

h2. Workaround

For now, you must manually configure the base path of your TestRestClient, for example like this:

{code:java}
@Component
public class RepositoryRestConfigurer extends RepositoryRestConfigurerAdapter {
  @Override
  public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {
    config.setBasePath(""/base/path"");
  }
}
{code}",any,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-01-03 15:18:17.937,9223372036854775807,issuemaster(issuemaster),,"0|i09mtr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03/Jan/17 3:18 PM;olivergierke;{{TestRestTemplate}} is not part of Spring Data REST but Spring Boot. Would you mind filing an issue [there|https://github.com/spring-projects/spring-boot/issues]?","03/Jan/17 3:20 PM;Doogie;Ok I will move the issue.  (Wow, that was a quick reply from you :-)
See https://github.com/spring-projects/spring-boot/issues/7816","03/Jan/17 3:23 PM;olivergierke;You just caught me checking my inbox and it looked like a low hanging fruit to get off my desk 🙃.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1338|https://github.com/spring-projects/spring-data-rest/issues/1338]. ",,,,,,,,,,,,,,,,,,,,
PUT does not remove nested properties,DATAREST-965,70905,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,kdombeck,kdombeck,21/Dec/16 9:58 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,23/Jan/17 3:51 PM,2.5.5 (Hopper SR5),,,,2.5.7 (Hopper SR7),2.6 GA (Ingalls),3.0 M2 (Kay),,,,,1,,,,,"When removing items via PUT request on nested children they are not being removed. The request is behaving more like a PATCH than a PUT right now.

Here are the requests I am issuing:
----
Create parent
{code}
POST /parents -> 201
{
    ""inner"": {
        ""items"": [{""some"": ""test""}]
    }
}
{code}
update parent
{code}
PUT /parents/id -> 204
{
    ""inner"": {
        ""object"": ""value""
    }
}
{code}
actual result
{code}
GET/parents/id -> 200
{
    ""inner"": {
        ""items"": [{""some"": ""test""}],
        ""object"": ""value""
    }
}
{code}
expected result
{code}
GET/parents/id -> 200
{
    ""inner"": {
        ""object"": ""value""
    }
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2017-01-23 15:51:23.95,9223372036854775807,issuemaster(issuemaster),,"0|i09m3b:",9223372036854775807,9223372036854775807,https://github.com/spring-projects/spring-data-rest/pull/247,,Ingalls GA,,,,,,,,,,,"21/Dec/16 10:04 PM;kdombeck;[PR|https://github.com/spring-projects/spring-data-rest/pull/247] currently just has a couple of unit tests to reproduce this issue. There is not a fix yet.","21/Dec/16 10:09 PM;kdombeck;This is similar to DATAREST-150 but with nested objects instead.","23/Jan/17 3:51 PM;olivergierke;That should be in place now. I've changed the algorithm, to apply PUTs significantly as merging the values seems easier on that level and all the potential deserialization customizations have been in place.

I incorporated your test case in the fix I pushed and added you as author on the test case.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1335|https://github.com/spring-projects/spring-data-rest/issues/1335]. ",,,,,,,,,,,,,,,,,,,,
Fix imports in Gemfire integration tests after move to Geode,DATAREST-962,70852,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,16/Dec/16 9:08 AM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,16/Dec/16 11:12 AM,,,,,3.0 M2 (Kay),,,,Infrastructure,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:31:01.442,9223372036854775807,issuemaster(issuemaster),,"0|i09lrj:",9223372036854775807,9223372036854775807,,,Ingalls RC1,,,,,,,,,,,"31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1332|https://github.com/spring-projects/spring-data-rest/issues/1332]. ",,,,,,,,,,,,,,,,,,,,,,,
Some PatchOperations are public and others are package-private.,DATAREST-961,70847,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Won't Fix,olivergierke,sixcorners,sixcorners,15/Dec/16 6:04 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,24/Jan/17 4:07 PM,,,,,,,,,,,,0,,,,,ReplaceOperation is public and TestOperation is package-private and the rest are one or the other. I don't see any alternative ways to construct these objects. It seems like they should all be made public.,,300,300,,0%,300,300,,,,,,,,,,,,,,,,,,,,,,,,,2016-12-15 18:48:03.694,9223372036854775807,issuemaster(issuemaster),,"0|i09lqf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15/Dec/16 6:48 PM;olivergierke;Like so many types in Spring Data REST that code is not even intended to be used from user code in the first place. Types being public is mostly a necessary consequence of us needing to refer to some types from other packages. Any reason you need to interact with them directly in the first place?","22/Dec/16 4:40 PM;sixcorners;Well.. my mistake then.
I have spring-boot-starter-data-rest on the classpath as a client so that Resource and Resources work with feign and rest template. I guess I just saw ReplaceOperation on the classpath and thought it would be a convenient way to start using the PATCH verb.

Edit 1: Going to read more about what to do. I see that I should switch to using @EnableHypermediaSupport instead of adding the data rest stuff as a dependency. Feel free to close the issue.

Edit 2: Nevermind, that didn't work. I'll just readd this as a runtime only dependency.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1331|https://github.com/spring-projects/spring-data-rest/issues/1331]. ",,,,,,,,,,,,,,,,,,,,,
PUT error when merging a previously undefined array,DATAREST-959,70796,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,mcubrilo,mcubrilo,12/Dec/16 5:33 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,13/Dec/16 9:30 AM,,,,,2.5.6 (Hopper SR6),2.6 RC1 (Ingalls),3.0 M2 (Kay),,,,,0,ingalls,,,,An {{UnsupportedOperationException}}  is thrown from {{DomainObjectReader.handleArrayNode(DomainObjectReader.java:272)}}  in case when json update (new) object node contains an array property that was undefined in the source (old) object.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2016-12-13 09:30:22.232,9223372036854775807,issuemaster(issuemaster),,"0|i09lf3:",9223372036854775807,9223372036854775807,,,Ingalls RC1,,,,,,,,,,,"13/Dec/16 8:49 AM;mcubrilo;A failing unit test and a fix added: https://github.com/spring-projects/spring-data-rest/pull/246","13/Dec/16 9:30 AM;olivergierke;That should be in place now. I've added a couple more advanced fixes that sort of relate to the same problem. We're now skipping merging of {{null}} values completely and also back out on a potential non-collection source value.

Thanks for the PR. Feel free to give the snapshots a try.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1329|https://github.com/spring-projects/spring-data-rest/issues/1329]. ",,,,,,,,,,,,,,,,,,,,,
PUT of Document with List<> fails to add entries post Hopper-SR5+,DATAREST-958,70765,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,timtebeek,timtebeek,08/Dec/16 3:12 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,08/Dec/16 4:50 PM,2.5.5 (Hopper SR5),,,,,,,,,,,0,,,,,"As demonstrated in the following project:
- https://github.com/timtebeek/mongo-datarest-put-nested
- https://travis-ci.org/timtebeek/mongo-datarest-put-nested

I use Spring Data Mongo with Spring Data Rest.
- POST object with a single element in an array
- PUT to the resulting url an updated object with two elements in array
- GET the resulting url and inspect the array
- https://github.com/timtebeek/mongo-datarest-put-nested/blob/master/src/test/java/com/github/timtebeek/PetProjectTest.java#L23

Under Hopper-SR4 the array is updated to now contain two elements.
Under Hopper-SR5 the array only contains the original single element.

This seems like a regression and breaks our application, leaving us stuck on Hopper-SR4 for now. Can you confirm and fix this please? :)",Going from Hopper-SR4 to Hopper-SR5,,,,,,,,,,,,,,,DATAREST-956,,,,,,,,,,,,,,,,2016-12-08 15:14:45.365,9223372036854775807,issuemaster(issuemaster),,"0|i09l87:",9223372036854775807,9223372036854775807,https://github.com/timtebeek/mongo-datarest-put-nested,,,,,,,,,,,,,"08/Dec/16 3:14 PM;olivergierke;Looks like a duplicate of the recently reported and fixed DATAREST-956. Care to check whether the current snapshots fix the issue?","08/Dec/16 4:27 PM;timtebeek;Awesome yes thanks! Adding `org.springframework.data:spring-data-rest-webmvc:2.5.6.BUILD-SNAPSHOT` when using Hopper-SR5 fixes the build.

Sorry for this duplicate; I was looking at Spring Data Mongo instead of Spring Data Rest. Feel free to close the issue! (I can't it seems)","08/Dec/16 4:50 PM;olivergierke;No worries and sorry for the hassle. Glad we got you covered so quickly :).","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1328|https://github.com/spring-projects/spring-data-rest/issues/1328]. ",,,,,,,,,,,,,,,,,,,,
PUT does not apply new items in nested collection,DATAREST-956,70760,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,mduesterhoeft,mduesterhoeft,07/Dec/16 9:15 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,08/Dec/16 9:13 AM,,,,,2.5.6 (Hopper SR6),2.6 RC1 (Ingalls),3.0 M2 (Kay),,,,,0,,,,,"In the following scenario {{Parent}} and {{Child}} are entities and {{Item}} is either a Embeddable or an Entity. Only {{Parent}} has a repository that is also exported.
 
!http://www.yuml.me/diagram/scruffy/class/%2F%2F Cool Class Diagram, [Parent]->[Child], [Child]<>-*>[Item]!

PUT updates existing items but does not add new items.

Please see this project to reproduce the issue - https://github.com/mduesterhoeft/sdr-put-nested-list. See test {{ParentRestIntegrationTest#should_add_new_item}}

----

Here are the requests I am issuing:
- Create parent 
{code}
POST /parents -> 201
{
    ""child"": {
        ""items"": [
          {""some"": ""test""}]
    }
}
{code}
- update parent
{code}
PUT /parents/id -> 204
{
    ""child"": {
        ""items"": [
          {""some"": ""test123""},
          {""some"": ""test1235""}]
    }
}
{code}

After the {{PUT}} the items collection still has size 1.",,,,,,,,,,,,DATAREST-958,,,,,,,,,,,,,,,,,,,,2016-12-07 21:42:28.997,9223372036854775807,issuemaster(issuemaster),,"0|i09l73:",9223372036854775807,9223372036854775807,https://github.com/spring-projects/spring-data-rest/pull/245,,,,,,,,,,,,,"07/Dec/16 9:42 PM;olivergierke;I am kind of wondering: do we actually have to issue the complex merge for {{PUT}} requests? Shouldn't the general {{….readerForUpdate(…)}} give us exactly the semantics we need?","07/Dec/16 9:48 PM;olivergierke;To answer my own question: no we cannot as causes Jackson to wipe *all* nested fields. Nested ones annotated with e.g. {{@JsonIgnore}} are thus wiped, although they're not intended to be affected by any Jackson interaction.","08/Dec/16 9:54 AM;mduesterhoeft;Ran my test scenario against the latest SNAPSHOT - It works now.","08/Dec/16 9:59 AM;olivergierke;👍 And thanks, again!","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1326|https://github.com/spring-projects/spring-data-rest/issues/1326]. ",,,,,,,,,,,,,,,,,,,
Patching on nested @ElementCollection Map<> using application/merge-patch+json throws org.springframework.orm.jpa.JpaSystemException,DATAREST-954,70755,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,tiben,tiben,07/Dec/16 3:54 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,25/Jan/17 10:37 AM,2.5.5 (Hopper SR5),,,,2.5.7 (Hopper SR7),2.6 GA (Ingalls),3.0 M2 (Kay),,,,,0,,,,,"Given this model as an example:

{code:java}
public class DigitalParameterType {

    @ElementCollection
    @MapKeyColumn(name=""value"", nullable=false, insertable=false)
    @CollectionTable(
        name=""digital_parameters_states"",
        joinColumns=@JoinColumn(name=""parameter_type_id"")
    )
    protected Map<Integer, DigitalParameterState> states;
    [...]
}

@Embeddable
public class DigitalParameterState {

    @NotNull
    @Size(max=10)
    private String code;

    @NotNull
    @Size(max=10)
    private String level;

    @NotNull
    @Size(max=255)
    private String description;

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getLevel() {
        return level;
    }

    public void setLevel(String level) {
        this.level = level;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

}

{code}

When sending the following application/merge-patch+json PATCH:

{code:bash}
$ curl -X PATCH -v -i --header ""Content-Type: application/merge-patch+json"" \
    -d ""{\""states\"": {\""2\"": {\""code\"": \""U_ON\"", \""description\"": \""test\"", \""level\"": \""INFO\""}}}"" http://localhost:15571/digitalParameterTypes/35
{code}


The following stack of exceptions is thrown (only relevant parts are given):

{code}
 Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is 
org.springframework.orm.jpa.JpaSystemException: Error accessing field [private java.lang.String fr.texsys.datemplus.dm.domain.model.data.parameter.DigitalParameterState.code] by reflection for persistent property [fr.texsys.datemplus.dm.do
main.model.data.parameter.DigitalParameterState#code] : {code=U_ON, description=test, level=INFO}; nested exception is org.hibernate.property.access.spi.PropertyAccessException: Error accessing field [private java.lang.String fr.texsys.dat
emplus.dm.domain.model.data.parameter.DigitalParameterState.code] by reflection for persistent property [fr.texsys.datemplus.dm.domain.model.data.parameter.DigitalParameterState#code] : {code=U_ON, description=test, level=INFO}] with root 
cause

java.lang.IllegalArgumentException: Can not set java.lang.String field fr.texsys.datemplus.dm.domain.model.data.parameter.DigitalParameterState.code to java.util.LinkedHashMap

{code}

It seems the JSON chunk is forced to be set as String on the Map property.

Theses exceptions are not thrown using Spring boot 1.4.1 (Spring data rest 2.5.3) but this version suffers from not respecting the [JSON Merge Patch RFC 7396|https://tools.ietf.org/html/rfc7396] as explained on this [StackOverflow issue|http://stackoverflow.com/questions/38192017/spring-data-rest-merge-patch] which was my initial problem before upgrading. 

Here is the full stacktrace:
{code}
2016-12-07 16:43:51.376 ERROR 15428 --- [io-15571-exec-5] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.orm.jpa.JpaSystemException: Error accessing field [private java.lang.String fr.texsys.datemplus.dm.domain.model.data.parameter.DigitalParameterState.code] by reflection for persistent property [fr.texsys.datemplus.dm.domain.model.data.parameter.DigitalParameterState#code] : {code=U_ON, description=test, level=INFO}; nested exception is org.hibernate.property.access.spi.PropertyAccessException: Error accessing field [private java.lang.String fr.texsys.datemplus.dm.domain.model.data.parameter.DigitalParameterState.code] by reflection for persistent property [fr.texsys.datemplus.dm.domain.model.data.parameter.DigitalParameterState#code] : {code=U_ON, description=test, level=INFO}] with root cause

java.lang.IllegalArgumentException: Can not set java.lang.String field fr.texsys.datemplus.dm.domain.model.data.parameter.DigitalParameterState.code to java.util.LinkedHashMap
        at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167) ~[na:1.8.0_111]
        at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171) ~[na:1.8.0_111]
        at sun.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:58) ~[na:1.8.0_111]
        at sun.reflect.UnsafeObjectFieldAccessorImpl.get(UnsafeObjectFieldAccessorImpl.java:36) ~[na:1.8.0_111]
        at java.lang.reflect.Field.get(Field.java:393) ~[na:1.8.0_111]
        at org.hibernate.property.access.spi.GetterFieldImpl.get(GetterFieldImpl.java:39) ~[hibernate-core-5.0.11.Final.jar!/:5.0.11.Final]
        at org.hibernate.tuple.component.AbstractComponentTuplizer.getPropertyValue(AbstractComponentTuplizer.java:58) ~[hibernate-core-5.0.11.Final.jar!/:5.0.11.Final]
        at org.hibernate.tuple.component.AbstractComponentTuplizer.getPropertyValues(AbstractComponentTuplizer.java:64) ~[hibernate-core-5.0.11.Final.jar!/:5.0.11.Final]
        at org.hibernate.tuple.component.PojoComponentTuplizer.getPropertyValues(PojoComponentTuplizer.java:95) ~[hibernate-core-5.0.11.Final.jar!/:5.0.11.Final]
        at org.hibernate.type.ComponentType.getPropertyValues(ComponentType.java:440) ~[hibernate-core-5.0.11.Final.jar!/:5.0.11.Final]
        at org.hibernate.type.ComponentType.replace(ComponentType.java:530) ~[hibernate-core-5.0.11.Final.jar!/:5.0.11.Final]
        at org.hibernate.type.MapType.replaceElements(MapType.java:66) ~[hibernate-core-5.0.11.Final.jar!/:5.0.11.Final]
        at org.hibernate.type.CollectionType.replace(CollectionType.java:663) ~[hibernate-core-5.0.11.Final.jar!/:5.0.11.Final]
        at org.hibernate.type.TypeHelper.replace(TypeHelper.java:177) ~[hibernate-core-5.0.11.Final.jar!/:5.0.11.Final]
        at org.hibernate.event.internal.DefaultMergeEventListener.copyValues(DefaultMergeEventListener.java:401) ~[hibernate-core-5.0.11.Final.jar!/:5.0.11.Final]
        at org.hibernate.event.internal.DefaultMergeEventListener.entityIsPersistent(DefaultMergeEventListener.java:203) ~[hibernate-core-5.0.11.Final.jar!/:5.0.11.Final]
        at org.hibernate.event.internal.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:176) ~[hibernate-core-5.0.11.Final.jar!/:5.0.11.Final]
        at org.hibernate.event.internal.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:69) ~[hibernate-core-5.0.11.Final.jar!/:5.0.11.Final]
        at org.hibernate.internal.SessionImpl.fireMerge(SessionImpl.java:840) ~[hibernate-core-5.0.11.Final.jar!/:5.0.11.Final]
        at org.hibernate.internal.SessionImpl.merge(SessionImpl.java:822) ~[hibernate-core-5.0.11.Final.jar!/:5.0.11.Final]
        at org.hibernate.internal.SessionImpl.merge(SessionImpl.java:827) ~[hibernate-core-5.0.11.Final.jar!/:5.0.11.Final]
        at org.hibernate.jpa.spi.AbstractEntityManagerImpl.merge(AbstractEntityManagerImpl.java:1161) ~[hibernate-entitymanager-5.0.11.Final.jar!/:5.0.11.Final]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_111]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_111]
        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111]
        at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:347) ~[spring-orm-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at com.sun.proxy.$Proxy125.merge(Unknown Source) ~[na:na]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_111]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_111]
        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111]
        at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:298) ~[spring-orm-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at com.sun.proxy.$Proxy125.merge(Unknown Source) ~[na:na]
        at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:509) ~[spring-data-jpa-1.10.5.RELEASE.jar!/:na]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_111]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_111]
        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111]
        at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503) ~[spring-data-commons-1.12.5.RELEASE.jar!/:na]
        at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488) ~[spring-data-commons-1.12.5.RELEASE.jar!/:na]
        at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460) ~[spring-data-commons-1.12.5.RELEASE.jar!/:na]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61) ~[spring-data-commons-1.12.5.RELEASE.jar!/:na]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99) ~[spring-tx-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282) ~[spring-tx-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) ~[spring-tx-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136) ~[spring-tx-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133) ~[spring-data-jpa-1.10.5.RELEASE.jar!/:na]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92) ~[spring-aop-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) ~[spring-aop-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at com.sun.proxy.$Proxy137.save(Unknown Source) ~[na:na]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_111]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_111]
        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111]
        at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333) ~[spring-aop-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190) ~[spring-aop-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) ~[spring-aop-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor.invoke(MethodSecurityInterceptor.java:69) ~[spring-security-core-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) ~[spring-aop-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at com.sun.proxy.$Proxy137.save(Unknown Source) ~[na:na]
        at org.springframework.data.repository.support.CrudRepositoryInvoker.invokeSave(CrudRepositoryInvoker.java:100) ~[spring-data-commons-1.12.5.RELEASE.jar!/:na]
        at org.springframework.data.rest.core.support.UnwrappingRepositoryInvokerFactory$UnwrappingRepositoryInvoker.invokeSave(UnwrappingRepositoryInvokerFactory.java:222) ~[spring-data-rest-core-2.5.5.RELEASE.jar!/:na]
        at org.springframework.data.rest.webmvc.RepositoryEntityController.saveAndReturn(RepositoryEntityController.java:473) ~[spring-data-rest-webmvc-2.5.5.RELEASE.jar!/:na]
        at org.springframework.data.rest.webmvc.RepositoryEntityController.patchItemResource(RepositoryEntityController.java:422) ~[spring-data-rest-webmvc-2.5.5.RELEASE.jar!/:na]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_111]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_111]
        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111]
        at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:220) ~[spring-web-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134) ~[spring-web-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116) ~[spring-webmvc-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) ~[spring-webmvc-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) ~[spring-webmvc-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843) ~[spring-webmvc-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.6.jar!/:8.5.6]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:169) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) ~[spring-security-oauth2-2.0.12.RELEASE.jar!/:na]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:121) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.1.3.RELEASE.jar!/:4.1.3.RELEASE]
        at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) ~[spring-web-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) ~[spring-web-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:89) ~[spring-web-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) ~[spring-web-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108) [tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) [tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:784) [tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802) [tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1410) [tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_111]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_111]
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.6.jar!/:8.5.6]
        at java.lang.Thread.run(Thread.java:745) [na:1.8.0_111]

{code}
",Spring Boot 1.4.2 with HIbernate,,,,,,,,,,,,,,,,DATAREST-986,,,,,DATAREST-953,,,,"08/Dec/16 3:25 PM;tiben;datarest954-sample-v2-h2db.zip;https://jira.spring.io/secure/attachment/23653/datarest954-sample-v2-h2db.zip","08/Dec/16 1:17 PM;tiben;datarest954-sample.zip;https://jira.spring.io/secure/attachment/23652/datarest954-sample.zip",,,,,2016-12-07 16:11:05.68,9223372036854775807,issuemaster(issuemaster),,"0|i09l5z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"07/Dec/16 4:11 PM;olivergierke;Can you clarify on the exception? It looks like a Hibernate exception here, not something related to Data REST.","07/Dec/16 4:14 PM;tiben;Hi Oliver, 

Sorry, i mistakenly sent the ticket before finishing to write it. I just added some infos on that. Please tell me if you need more details.","07/Dec/16 4:16 PM;tiben;I first believed it was an hibernate issue, but Hibernate version between Spring Boot 1.4.1 and 1.4.2 does not change:


{code:bash}
$ mvn dependency:tree | grep hibernate
[INFO] |  |  +- org.hibernate:hibernate-validator:jar:5.2.4.Final:compile
[INFO] |  +- org.hibernate:hibernate-core:jar:5.0.11.Final:compile
[INFO] |  |  +- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:jar:1.0.0.Final:compile
[INFO] |  |  \- org.hibernate.common:hibernate-commons-annotations:jar:5.0.1.Final:compile
[INFO] |  +- org.hibernate:hibernate-entitymanager:jar:5.0.11.Final:compile
{code}
","07/Dec/16 4:21 PM;olivergierke;Can you please add a complete stack trace, it's hard to see where the exception actually comes from.","07/Dec/16 4:24 PM;tiben;I just updated the description with the full stacktrace","07/Dec/16 4:37 PM;tiben;Description updated with full stacktrace","07/Dec/16 6:00 PM;olivergierke;Do you have a sample project handy that reproduces the issue?","08/Dec/16 1:19 PM;tiben;Here is a tiny Maven project which highlights the bug:
[^datarest954-sample.zip]

The README.md file in the zip explains how to configure/start the project. 

Note: i use a custom mysql port in my dev. environment. so the port should be adjusted.","08/Dec/16 2:57 PM;olivergierke;Care to move that to an in memory database?","08/Dec/16 3:27 PM;tiben;This one makes use of an ""h2"" database:
[^datarest954-sample-v2-h2db.zip]

The dataset is injected on boot through a ""import.sql"" file so there is nothing to configure now.
","24/Jan/17 4:22 PM;olivergierke;This seems to look very much like DATAREST-986, which we just fixed recently. Would you mind giving the latest snapshots a try?","25/Jan/17 10:14 AM;tiben;Of course, but i have troubles to setup the pom.xml correctly to use snapshots versions. Can you give me hints to do that? The attached demo project makes use of spring boot.
","25/Jan/17 10:27 AM;tiben;Okay, so i think i found how to do that: 
I simply added <spring-data-releasetrain.version>Hopper-BUILD-SNAPSHOT</spring-data-releasetrain.version> in the 
<properties> section. 

So, despite i'm not sure i use the good snapshot version, I confirm it is fixed with Hopper-BUILD-SNAPSHOT! Please correct me if i don't use the good version.

I confirm the initial problem of this issue which mentioned the JSON Merge Patch RFC 7396 spec was not respected is fixed too. It simply just works as expected. 

Thanks Oliver for your work on this issue, this is good news for our project.
","25/Jan/17 10:37 AM;olivergierke;Glad you found it. indeed, setting the property to either {{Hopper-BUILD-SNAPSHOT}} or {{Ingalls-BUILD-SNAPSHOT}} should do the trick. Even better to hear it now works for you!","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1324|https://github.com/spring-projects/spring-data-rest/issues/1324]. ",,,,,,,,,
PUT empties nested collection,DATAREST-953,70730,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,mduesterhoeft,mduesterhoeft,06/Dec/16 12:39 PM,31/Dec/20 10:31 AM,31/Dec/21 2:58 PM,07/Dec/16 5:58 PM,2.5.5 (Hopper SR5),,,,2.5.6 (Hopper SR6),2.6 RC1 (Ingalls),3.0 M2 (Kay),,,,,0,,,,,"In the following scenario {{Parent}} and {{Child}} are entities and {{Item}} is either a Embeddable or an Entity. Only {{Parent}} has a repository that is also exported.
 
!http://www.yuml.me/diagram/scruffy/class/%2F%2F Cool Class Diagram, [Parent]->[Child], [Child]<>-*>[Item]!

Posting such a structure works fine but the {{PUT}} *empties* the {{Item}} collection in {{Child}}. 

Please see this project to reproduce the issue - https://github.com/mduesterhoeft/sdr-put-nested-list.

Such a scenario has been working in Hopper-SR4 and started to be broken since Hopper-SR5.

----

Here are the requests I am issuing:
- Create parent 
{code}
POST /parents -> 201
{
    ""child"": {
        ""items"": [
          {""some"": ""test""}]
    }
}
{code}
- update parent
{code}
PUT /parents/id -> 204
{
    ""child"": {
        ""items"": [
          {""some"": ""test123""} ]
    }
}
{code}

After the {{PUT}} the items collection is empty.",,,,,,,,,,,,,,,,,DATAREST-938,DATAREST-954,DATAREST-944,,,,,,,,,,,,,2016-12-07 17:57:54.522,9223372036854775807,issuemaster(issuemaster),,"0|i09l0f:",9223372036854775807,9223372036854775807,https://github.com/mduesterhoeft/sdr-put-nested-list,,,,,,,,,,,,,"06/Dec/16 1:43 PM;mduesterhoeft;Seems to be related to DATAREST-944","07/Dec/16 5:57 PM;olivergierke;I just added a test case to verify the fix for DATAREST-938 also fixes the scenario you describe. Care to give the latest snapshots a try?","07/Dec/16 7:25 PM;mduesterhoeft;Thanks for the hint. I will give it a try.","07/Dec/16 7:45 PM;mduesterhoeft;Just tested with `2.6.0.BUILD-SNAPSHOT` and the scenario described works. Existing collection items are updated now. 

I am afraid adding items to the collection is still not working. I think I create another issue for this.

Thanks a lot so far.","31/Dec/20 10:31 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1323|https://github.com/spring-projects/spring-data-rest/issues/1323]. ",,,,,,,,,,,,,,,,,,,
Unable to add to a nested collection,DATAREST-944,70528,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,mipmapman,mipmapman,19/Nov/16 11:36 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,26/Jan/17 6:45 AM,2.5.6 (Hopper SR6),,,,2.5.7 (Hopper SR7),2.6 GA (Ingalls),3.0 M2 (Kay),,Repositories,,,1,,,,,"With respect to the fix done for DATAREST-931 I am trying to perform a PATCH to add an entity to an existing nested collection. 

I am not sure if this is legal(?!) but haven't read anything to the contrary. If it is not legal to PATCH a nested collection to add a new item, how else can you achieve this?

Here is my unit test to be added to DomainObjectReaderUnitTests which demonstrates the behaviour. It fails with an {{IndexOutOfBoundsException}} as the second nested entity is not added to the collection as expected.

{code}

	@Test
	public void readsPatchForNewEntityNestedInCollection() throws Exception {

		Phone phone = new Phone();
		phone.creationDate = new GregorianCalendar();

		User user = new User();
		user.phones.add(phone);

		ByteArrayInputStream source = new ByteArrayInputStream(
				""{ \""phones\"" : [ { \""label\"" : \""some label\"" }, { \""label\"" : \""some label\"" } ] }"".getBytes(Charsets.UTF_8));

		User result = reader.read(source, user, new ObjectMapper());

		assertThat(result.phones.get(0).creationDate, is(notNullValue()));
		assertThat(result.phones.get(1).creationDate, is(notNullValue()));
	}
{code}

I've also attached as a patch.

It looks to me that it is related to the logic in {{DomainObjectReader.doMerge(...)}} as follows:

{code}
				boolean nestedObjectFound = handleArrayNode((ArrayNode) child, asCollection(rawValue), mapper);

				if (nestedObjectFound) {
					i.remove();
				}
{code}

{{nestedObjectFound}} is returned true after processing the first existing item and then the entire array is removed. Hence the next second item is never even looked at.
 ",,,,,,,,,,,,,,,,,,,,,,DATAREST-953,DATAREST-938,,,"19/Nov/16 11:31 PM;mipmapman;Added_test_to_show_problem.patch;https://jira.spring.io/secure/attachment/23622/Added_test_to_show_problem.patch","25/Jan/17 2:40 PM;msousa;example.tgz;https://jira.spring.io/secure/attachment/23693/example.tgz",,,,,2016-11-30 18:04:52.357,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/255,"0|i09jrr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"30/Nov/16 6:04 PM;gpoulos;Taking this one step further, upgrading from Hopper SR4 to Hopper SR5 has broken updating nested arrays even when using PUT. Please see the example application and most notably the unit tests that demonstrate the problem.  

https://github.com/geopoulos/spring-data-rest-datarest944

The tests attempt to use DomainObjectReader#readPut to update an array contained within a map. The only scenario that passes on SR5 is when updating an existing array of objects with a payload containing the same number of elements. Trying to update an array of strings or an array with a different size will not work. Simply switching back to SR4 allows all the tests to pass.
","12/Dec/16 5:13 PM;gpoulos;After seeing DATAREST-953 resolved, I ran my test cases again using spring-data-rest-webmvc 2.5.6.BUILD-SNAPSHOT and Hopper SR5.  The tests using arrays of objects now pass while the test using an array of strings still fails.","19/Jan/17 5:15 PM;jvalerio;Added logic to fix unit tests attached and updated unit tests for RESTREST-919 as it is a good mixed usecase.  I also added a configuration option to the DomainObjectReader to let users configure how they want the merge to behave.","24/Jan/17 4:25 PM;olivergierke;Before I look more deeply into the PR, would you guys mind giving the latest snapshots a try? We've fixed a couple of things and one of the test cases I added in the course of that definitely patches collections adding elements.","24/Jan/17 4:43 PM;gpoulos;Hi Oliver, I can confirm that all my tests are now passing using 2.5.7.BUILD-SNAPSHOT.  Thanks.","24/Jan/17 5:56 PM;olivergierke;Awesome, thanks for the quick turnaround!","24/Jan/17 6:13 PM;mipmapman;Hello,

I've tried latest 2.5.7.BUILD-SNAPSHOT with the unit test I originally posted on this ticket. It still fails. Two things:

- I am not 100% sure my unit test is testing something valid, so a quick check of that might save any effort.
- I am not entirely sure that George Poulus was reporting the same issue in this ticket that I am.

Let me know if I can help further.
Nick

{code}

Tests run: 22, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.286 sec <<< FAILURE! - in org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests
readsPatchForNewEntityNestedInCollection(org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests)  Time elapsed: 0.019 sec  <<< FAILURE!
java.lang.AssertionError: 

Expected: is not null
     but: was null
	at org.springframework.data.rest.webmvc.json.DomainObjectReaderUnitTests.readsPatchForNewEntityNestedInCollection(DomainObjectReaderUnitTests.java:264)


{code}

","24/Jan/17 6:21 PM;olivergierke;Good point, I don't think you do. The test fails on the verification of the {{createdDate}} in the newly added entity. That field of course is never set anywhere as nothing in the code actually does that. I can see the entity added with exactly the content you submit via JSON. So I think the original issue is resolved.","24/Jan/17 10:23 PM;mipmapman;Thanks for the sanity check!

To clarify, if I fix the test to check for {{label}} instead of {{createdDate}}:

- fails in 2.5.5.RELEASE
- passes in 2.5.6.RELEASE
- passes in 2.5.7.BUILD-SNAPSHOT

Thanks for your great efforts :)","25/Jan/17 2:41 PM;msousa;Hello,

I think this is the same issue. When using the latest snapshot it's working on PATCH (reported issue) but failing on PUT. I've attached an example ([^example.tgz]) with two tests, only thing changing is the method and it's failing on PUT.","25/Jan/17 5:12 PM;olivergierke;Good one, Manuel! We're missing out associations. I have a fix ready that needs to be polished but I should be able to get it into the release tomorrow. Thanks for testing!","26/Jan/17 6:46 AM;olivergierke;Just pushed the changes with which your example test case works for me.","26/Jan/17 10:57 AM;msousa;Thank you Oliver, just tested it out also and it worked out.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1314|https://github.com/spring-projects/spring-data-rest/issues/1314]. ",,,,,,,,,,
Nested entities are replaced with new instances instead of being updated when merging,DATAREST-938,70460,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,candrews,candrews,11/Nov/16 9:33 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,07/Dec/16 5:57 PM,2.5.4 (Hopper SR4),2.6 M1 (Ingalls),,,2.5.6 (Hopper SR6),2.6 RC1 (Ingalls),3.0 M2 (Kay),,,,,0,,,,,"When using the repository domain object update end point (via the PATCH method with JSON data), nested objects are replaced with new instances instead of updates being applied to the existing instance.

For example, given these classes:
{code:java}

@JsonAutoDetect(fieldVisibility = Visibility.ANY)
static class Outer {

	String name;
	String prop;
	Inner inner;
}

@JsonAutoDetect(fieldVisibility = Visibility.ANY)
static class Inner {

	String name;
	String prop;
}
{code}

Let there be an instance of Outer like this:
{code:java}
Inner inner = new Inner();
inner.name = ""inner name"";
inner.prop = ""something"";
Outer outer = new Outer();
outer.prop = ""else"";
outer.name = ""outer name"";
outer.inner = inner;
{code}

Then make an HTTP PATCH request to update that object with this request body:
{code:json}
{ ""inner"" : { ""name"" : ""new inner name"" } }
{code}

the resulting Outer object should have inner.prop=""something"" but inner.prop is actually null.",,,,,,,,,,,,,,,,,DATAREST-944,,,,,DATAREST-953,,,,,,,,,,2020-12-31 10:30:58.69,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/241,"0|i09jcn:",9223372036854775807,9223372036854775807,,,Ingalls RC1,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1308|https://github.com/spring-projects/spring-data-rest/issues/1308]. ",,,,,,,,,,,,,,,,,,,,,,,
Transient properties in JSON should be included in merge,DATAREST-937,70457,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,candrews,candrews,11/Nov/16 7:44 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,06/Dec/16 8:49 AM,2.4.6 (Gosling SR6),2.5.4 (Hopper SR4),2.6 M1 (Ingalls),,2.4.7 (Gosling SR7),2.5.6 (Hopper SR6),2.6 RC1 (Ingalls),3.0 M2 (Kay),,,,0,,,,,"When using the repository domain object update end point (via the PATCH method with JSON data), fields that are not persisted (marked as @Transient or simply not marked for persistence) are not updated.

For example, given this class:
{code:java}
@JsonAutoDetect(fieldVisibility = Visibility.ANY)
static class SampleWithTransient {

	String name;
	@org.springframework.data.annotation.Transient String temporary;
}
{code}

if an HTTP PATCH is done to update that object with this request body:
{code:json}
{
  ""temporary"": ""new temp""
}
{code}
the result will be that the value of temporary was not changed to ""new temp"" as expected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:58.588,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/240,"0|i09jbz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1307|https://github.com/spring-projects/spring-data-rest/issues/1307]. ",,,,,,,,,,,,,,,,,,,,,,,
PATCH for non-resource associations doesn't work as expected,DATAREST-931,70326,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,destan,destan,02/Nov/16 8:56 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,03/Nov/16 8:44 AM,2.5.4 (Hopper SR4),,,,2.4.7 (Gosling SR7),2.5.5 (Hopper SR5),2.6 M1 (Ingalls),,Repositories,,,0,,,,,"User has a repository and Phone has not. [id and some other fields are pruned in below examples for brevity, see full entities in example code]

{code:java}
@Entity
public class User {

        private String name;

	@Column(nullable = false)
	@Temporal(value = TemporalType.TIMESTAMP)
	private Calendar creationDate;

	@OneToMany(mappedBy = ""user"", cascade = CascadeType.ALL)
	private List<Phone> phones;
}

@Entity
public class Phone extends BaseEntity {

	@Column(nullable = false)
	@Temporal(value = TemporalType.TIMESTAMP)
	private Calendar creationDate;

	@ManyToOne(fetch = FetchType.EAGER)
	private User user;
}
{code}


In this case patch for /users/1 with following data works:


{noformat}
{
   ""name"":""John Doe X"",
   ""phones"":[
      {
         ""id"":1,
         ""creationDate"":""2016-11-02T07:34:02.806+0000"",
         ""label"":""work"",
         ""number"":""00000000""
      }
   ]
}
{noformat}


but following data fails with not-null-constraint error for creationDate:

{noformat}
{
   ""name"":""John Doe X"",
   ""phones"":[
      {
         ""id"":1,
         ""label"":""work"",
         ""number"":""00000000""
      }
   ]
}
{noformat}


PATCH works selectively on resources however doesn't work as expected for inline data which is not a resource (in this case ""phone"")",,,,,,,,,,,,,,,,,,,,,,,,,,"02/Nov/16 8:56 AM;destan;person-repo.zip;https://jira.spring.io/secure/attachment/23606/person-repo.zip",,,,,,2016-11-02 09:12:51.64,9223372036854775807,issuemaster(issuemaster),,"0|i09iiv:",9223372036854775807,9223372036854775807,,,Kay M1,,,,,,,,,,,"02/Nov/16 9:12 AM;olivergierke;Thanks for filing this. As you've already spent the time to create a sample project, any chance you add a test case that shows the erroneous behavior?","02/Nov/16 11:32 AM;olivergierke;Nevermind, I got it. Looks like we need to apply some of our massaging to collections, too. Generally speaking, using a proper media type like JSON Patch will prevent problems like this as you can be much more specific about what your intentions are as a client.","03/Nov/16 8:44 AM;olivergierke;That should be fixed with the solution explained above. We now inspect arrays, too.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1294|https://github.com/spring-projects/spring-data-rest/issues/1294]. ",,,,,,,,,,,,,,,,,,,,
ResourceProcessor not used for nested Projection,DATAREST-925,70202,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,mzampetti,mzampetti,19/Oct/16 1:52 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,02/Dec/16 7:19 PM,2.5.4 (Hopper SR4),,,,2.6 RC1 (Ingalls),3.0 M2 (Kay),,,Repositories,,,2,,,,,"There seems to be an issue with how ResourceProcessors are being applied to a Projection in certain case. I've linked to a repo that demonstrates the issue.

There are two entities, {{Person}} and {{Address}}. The {{Person}} is the parent in a {{@ManyToOne}} relationship to the {{Address}}. There is also a {{PersonProjection}} that shows a subset of the {{Person}}, most importantly it does not include the {{Set<Address>}} of the child {{Address}} entities. There is also a {{AddressProjection}} that includes the{{PersonProjection}} of the parent. The goal is to be able to retrieve the list of {{Address}} objects and their associated key {{Person}} information in a single call. 

Now, I also have {{ResourceProcessor}} implementations that add some links to each of the entities. That includes {{ResourceProcessor}} implementations on the projections. Everything works as described and expected when using the normal SDR endpoints to get the {{Person}} and {{Address}} collections. The custom links are correctly added to each entity. Also, when I query for the {{Person}} collection with the projection, that too adds the appropriate link to the {{Person}} representation. However, when I query the {{Address}} collection with the projection, the embedded {{PersonProjection}} has the normal SDR-generated links for {{self}} and the object itself {{person}} in this case, it does not have the custom links. 

The listing of the {{Person}} collection. Notice the {{google}} link, which is the custom link for this demonstration:
{code:javascript}
curl http://localhost:8080/persons; echo
{
  ""_embedded"" : {
    ""persons"" : [ {
      ""firstName"" : ""Bob"",
      ""lastName"" : ""Bobby"",
      ""quote"" : ""Likes to Bob"",
      ""_links"" : {
        ""self"" : {
          ""href"" : ""http://localhost:8080/persons/1""
        },
        ""person"" : {
          ""href"" : ""http://localhost:8080/persons/1{?projection}"",
          ""templated"" : true
        },
        ""google"" : {
          ""href"" : ""http://www.google.com""
        },
        ""addresses"" : {
          ""href"" : ""http://localhost:8080/persons/1/addresses""
        }
      }
    } ]
  },
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/persons""
    },
    ""profile"" : {
      ""href"" : ""http://localhost:8080/profile/persons""
    }
  },
  ""page"" : {
    ""size"" : 20,
    ""totalElements"" : 1,
    ""totalPages"" : 1,
    ""number"" : 0
  }
}
{code}

Now the listing of the {{Person}} collection with the projection enabled. Notice that the {{quote}} field is not returned, but the {{google}} link is still there.

{code:javascript}
curl http://localhost:8080/persons?projection=simple; echo
{
  ""_embedded"" : {
    ""persons"" : [ {
      ""firstName"" : ""Bob"",
      ""lastName"" : ""Bobby"",
      ""_links"" : {
        ""self"" : {
          ""href"" : ""http://localhost:8080/persons/1""
        },
        ""person"" : {
          ""href"" : ""http://localhost:8080/persons/1{?projection}"",
          ""templated"" : true
        },
        ""google"" : {
          ""href"" : ""http://www.google.com""
        },
        ""addresses"" : {
          ""href"" : ""http://localhost:8080/persons/1/addresses""
        }
      }
    } ]
  },
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/persons""
    },
    ""profile"" : {
      ""href"" : ""http://localhost:8080/profile/persons""
    }
  },
  ""page"" : {
    ""size"" : 20,
    ""totalElements"" : 1,
    ""totalPages"" : 1,
    ""number"" : 0
  }
}
{{code}

The listing of the {{Address}} collection. Notice the {{microsoft}} link which is the custom link for this demonstration:

{code:javascript}
curl http://localhost:8080/addresses; echo
{
  ""_embedded"" : {
    ""addresses"" : [ {
      ""line1"" : ""1234 Line 1 Street"",
      ""line2"" : ""Apt Line 2"",
      ""city"" : ""Somewhere"",
      ""state"" : ""NY"",
      ""country"" : ""USA"",
      ""zipcode"" : ""12345"",
      ""_links"" : {
        ""self"" : {
          ""href"" : ""http://localhost:8080/addresses/1""
        },
        ""address"" : {
          ""href"" : ""http://localhost:8080/addresses/1{?projection}"",
          ""templated"" : true
        },
        ""microsoft"" : {
          ""href"" : ""http://www.microsoft.com""
        },
        ""person"" : {
          ""href"" : ""http://localhost:8080/addresses/1/person""
        }
      }
    } ]
  },
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/addresses""
    },
    ""profile"" : {
      ""href"" : ""http://localhost:8080/profile/addresses""
    }
  },
  ""page"" : {
    ""size"" : 20,
    ""totalElements"" : 1,
    ""totalPages"" : 1,
    ""number"" : 0
  }
}
{code}

And finally the listing of the {{Address}} projection, without the expected {{google}} link for the embedded {{Person}}. However, the {{Person}} is missing the {{quote}} field, so it is processing the rest of the projection.

{code:javascript}
curl http://localhost:8080/addresses?projection=simple; echo
{
  ""_embedded"" : {
    ""addresses"" : [ {
      ""state"" : ""NY"",
      ""line"" : ""1234 Line 1 Street Apt Line 2"",
      ""city"" : ""Somewhere"",
      ""person"" : {
        ""firstName"" : ""Bob"",
        ""lastName"" : ""Bobby"",
        ""_links"" : {
          ""self"" : {
            ""href"" : ""http://localhost:8080/persons/1{?projection}"",
            ""templated"" : true
          },
          ""addresses"" : {
            ""href"" : ""http://localhost:8080/persons/1/addresses""
          }
        }
      },
      ""zipcode"" : ""12345"",
      ""_links"" : {
        ""self"" : {
          ""href"" : ""http://localhost:8080/addresses/1""
        },
        ""address"" : {
          ""href"" : ""http://localhost:8080/addresses/1{?projection}"",
          ""templated"" : true
        },
        ""microsoft"" : {
          ""href"" : ""http://www.microsoft.com""
        },
        ""person"" : {
          ""href"" : ""http://localhost:8080/addresses/1/person""
        }
      }
    } ]
  },
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/addresses""
    },
    ""profile"" : {
      ""href"" : ""http://localhost:8080/profile/addresses""
    }
  },
  ""page"" : {
    ""size"" : 20,
    ""totalElements"" : 1,
    ""totalPages"" : 1,
    ""number"" : 0
  }
}
{code}

It is not clear why the additional links are not being added. For all I can tell, it should be. There are no errors or warnings or any other indication of an issue that I can see.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2016-11-03 15:51:41.385,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/238,"0|i09hrb:",9223372036854775807,9223372036854775807,https://github.com/zampettim/datarest925,,,,,,,,,,,,,"20/Oct/16 1:50 PM;mzampetti;Updated with a more clear description and linked to the demonstration repo.","03/Nov/16 3:51 PM;candrews;SDR only processes ResourceProcessor's for PersistentEntityResource.

I believe it should process ResourceProcessor's for ProjectionResource's too.

I think the change needs to be made at https://github.com/spring-projects/spring-data-rest/blob/2.5.3.RELEASE/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/json/PersistentEntityJackson2Module.java#L580 and https://github.com/spring-projects/spring-data-rest/blob/2.5.3.RELEASE/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/json/PersistentEntityJackson2Module.java#L185 to call invoker.invokeProcessorsFor as is currently done at https://github.com/spring-projects/spring-data-rest/blob/2.5.3.RELEASE/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/json/PersistentEntityJackson2Module.java#L390","03/Nov/16 4:32 PM;olivergierke;What I am kind of wondering is: is the fact that you have a {{ResourceProcessor}} for both the entity and the projection instance an attempt to solve the problem or really intended? I can imagine people argue three things: they want the {{ResourceProcessor}} instances invoked for the projection target and have the links potentially generated added to the projection (i.e. links created for an entity are always added, no matter if a projection is applied or not). Or they could argue they only want to get {{ResourceProcessor}} instances invoked that are explicitly typed to the projection (i.e. projections always get a dedicated treatment and don't ""inherit"" links produced by the entity specific processor). A third option could be that it's intended that both are combined, which then raises the question of which of the two is called first.","03/Nov/16 5:01 PM;candrews;I believe the best solution is to get ResourceProcessor instances invoked that are explicitly typed to the projection.

If someone wants a ResourceProcessor to apply to both the entity and the projection, they can create an interface that both the entity and the projection extend and create a ResourceProcessor for that.","03/Nov/16 5:19 PM;candrews;Here's a pull request - I'd love some review (am I heading in the right direction?).

https://github.com/spring-projects/spring-data-rest/pull/238

Thanks!","03/Nov/16 6:58 PM;candrews;I ran the test case https://github.com/zampettim/datarest925 against my pull request at https://github.com/spring-projects/spring-data-rest/pull/238 by adding this to the pom.xml of test case:
{code:xml}
<dependency>
        <groupId>org.springframework.data</groupId>
        <artifactId>spring-data-rest-webmvc</artifactId>
        <version>2.5.5.BUILD-SNAPSHOT</version>
</dependency>
<dependency>
        <groupId>org.springframework.data</groupId>
        <artifactId>spring-data-rest-core</artifactId>
        <version>2.5.5.BUILD-SNAPSHOT</version>
</dependency>
<dependency>
        <groupId>org.springframework.data</groupId>
        <artifactId>spring-data-rest-hal-browser</artifactId>
        <version>2.5.5.BUILD-SNAPSHOT</version>
</dependency>
{code}

Here's the last curl execution's output from the issue's description:
{code}
curl http://localhost:8080/addresses?projection=simple; echo
{
   ""_embedded"":{
      ""addresses"":[
         {
            ""state"":""NY"",
            ""line"":""1234 Line 1 Street Apt Line 2"",
            ""city"":""Somewhere"",
            ""person"":{
               ""firstName"":""Bob"",
               ""lastName"":""Bobby"",
               ""_links"":{
                  ""self"":{
                     ""href"":""http://localhost:8080/persons/1{?projection}"",
                     ""templated"":true
                  },
                  ""addresses"":{
                     ""href"":""http://localhost:8080/persons/1/addresses""
                  },
                  ""google"":{
                     ""href"":""http://www.google.com""
                  }
               }
            },
            ""zipcode"":""12345"",
            ""_links"":{
               ""self"":{
                  ""href"":""http://localhost:8080/addresses/1""
               },
               ""address"":{
                  ""href"":""http://localhost:8080/addresses/1{?projection}"",
                  ""templated"":true
               },
               ""microsoft"":{
                  ""href"":""http://www.microsoft.com""
               },
               ""person"":{
                  ""href"":""http://localhost:8080/addresses/1/person""
               }
            }
         }
      ]
   },
   ""_links"":{
      ""self"":{
         ""href"":""http://localhost:8080/addresses""
      },
      ""profile"":{
         ""href"":""http://localhost:8080/profile/addresses""
      }
   },
   ""page"":{
      ""size"":20,
      ""totalElements"":1,
      ""totalPages"":1,
      ""number"":0
   }
}
{code}

Notice that the embedded Person has the ""google"" links as it should.","03/Nov/16 7:20 PM;olivergierke;That's fine. We still need an integration test for our codebase.","04/Nov/16 7:02 AM;jhiemer;This is something I asked Oliver a couple of weeks ago as well. Would be nice to see this feature in the implementation!","02/Dec/16 7:18 PM;olivergierke;That's in place now. I've merged Craig's PR so that {{ResourceProcessor}} implementations bound to the projection type should be invoked now.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1288|https://github.com/spring-projects/spring-data-rest/issues/1288]. ",,,,,,,,,,,,,,
PUT/PATCH of Entity object that is a Map silently dropping elements of Map,DATAREST-919,70131,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,mzampetti,mzampetti,11/Oct/16 9:57 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,03/Nov/16 7:23 PM,2.5.4 (Hopper SR4),,,,2.4.7 (Gosling SR7),2.5.5 (Hopper SR5),2.6 RC1 (Ingalls),,Repositories,,,0,,,,,"When one has an Entity that has an attribute that is a Map, performing a PUT/PATCH to apply an update the Map will silently throw away any first-level sub-elements of the Map that are themselves a JSON object. 

For example, if I have an entity like:
{code:java}
@Entity
public class Person
{
    @Id
    private Long id;

     private String name;

     private HashMap<String, Object> attributes;
}
{code}

And I create the initial record with the following JSON using POST /api/persons:
{code:javascript}
{
    ""name"" : ""person1"",
    ""attributes"" : {
          ""sub1"" : ""ok"",
          ""sub2"" : [ ""ok1"", ""ok2"" ],
          ""sub3"" : [ { ""childOk1"" : ""ok"" }],
          ""sub4"" : {
               ""c1"" : ""v1""
          }
     }
}
{code}

Everything works fine. If I then try to update using PATCH or PUT /api/persons/1:
{code:javascript}
{
    ""attributes"" : {
          ""sub1"" : ""ok"",
          ""sub2"" : [ ""ok1"", ""ok2"" ],
          ""sub3"" : [ { ""childOk1"" : ""ok"" }],
          ""sub4"" : {
               ""c1"" : ""v1"",
               ""c2"" : ""new""
          }
     }
}
{code}

Not only will the attributes.sub4.c2 value not be saved, the entire attributes.sub4 element will disappear. The rest of the items, including attributes.sub3 will remain, since its value is an array of objects instead of just an object. 

If I then submit the exact same REST call, everything will return. In fact, if you just keep doing PUT or PATCH over and over, it will keep flipping back and forth from the two states.

It appears the issue is somewhere in DomainObjectReader.java, but I haven't been able to fully track it down as of yet. I wanted to get this logged since I suspect this could be a major bug for people, and given that it only appears during the PATCH/PUT phase, its possible this could be missed for awhile.","Spring Data Rest 2.5.4.RELEASE (Hopper.SR4)
Spring Boot 1.3.6, 1.3.8",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2016-10-17 20:59:42.138,9223372036854775807,issuemaster(issuemaster),,"0|i09hbj:",9223372036854775807,9223372036854775807,https://github.com/zampettim/spring-data-rest-datarest919,,,,,,,,,,,,,"12/Oct/16 1:32 AM;mzampetti;I added a test application to demonstrate the issue using Spring Data REST and Spring Data Elasticsearch. The link to the code in GitHub is linked above.

To show the issue, the following command can be used.

{code:bash}
curl -H ""Content-Type: application/json"" -X POST -d '{ ""name"" : ""test1"", ""attributes"" : { ""a1"" : ""av1"", ""a2"" : { ""s1"" : ""sv1"" } } }' http://localhost:8080{code}

Will produce output:
{code:bash}

  ""name"" : ""test1"",
  ""attributes"" : {
    ""a1"" : ""av1"",
    ""a2"" : {
      ""s1"" : ""sv1""
    }
  },
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/persons/AVe2gPSkqtYHtXdCp91s""
    },
    ""person"" : {
      ""href"" : ""http://localhost:8080/persons/AVe2gPSkqtYHtXdCp91s""
    }
  }
}
{code}

Now running the PATCH to add another sub-element to the attributes.a2 element:
{code:bash}
curl -H ""Content-Type: application/json"" -X PATCH -d '{ ""name"" : ""test1"", ""attributes"" : { ""a1"" : ""av1"", ""a2"" : { ""s1"" : ""sv1"", ""s2"" : ""sv2"" } } }' http://localhost:8080/persons/AVe2gPSkqtYHtXdCp91s
{code}
produces the output:
{code:bash}
{
  ""name"" : ""test1"",
  ""attributes"" : {
    ""a1"" : ""av1""
  },
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/persons/AVe2gPSkqtYHtXdCp91s""
    },
    ""person"" : {
      ""href"" : ""http://localhost:8080/persons/AVe2gPSkqtYHtXdCp91s""
    }
  }
}
{code}
Notice that the attributes.a2 element is gone. Running the exact same command again:
{code:bash}
curl -H ""Content-Type: application/json"" -X PATCH -d '{ ""name"" : ""test1"", ""attributes"" : { ""a1"" : ""av1"", ""a2"" : { ""s1"" : ""sv1"", ""s2"" : ""sv2"" } } }' http://localhost:8080/persons/AVe2gPSkqtYHtXdCp91s
{code}
produces:
{code:bash}
{
  ""name"" : ""test1"",
  ""attributes"" : {
    ""a1"" : ""av1"",
    ""a2"" : {
      ""s1"" : ""sv1"",
      ""s2"" : ""sv2""
    }
  },
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/persons/AVe2gPSkqtYHtXdCp91s""
    },
    ""person"" : {
      ""href"" : ""http://localhost:8080/persons/AVe2gPSkqtYHtXdCp91s""
    }
  }
}
{code}
Now the attributes.a2 element is back, with the additional sub-element added.","12/Oct/16 1:42 AM;mzampetti;Also confirmed the example has the issue with Spring Boot 1.4.1.RELEASE and Hopper.SR4","17/Oct/16 8:59 PM;jvalerio;Seems to be an issue with DomainObjectReader line 239:240 where if the value is an ObjectNode, which in this case it is, it recursively calls doMerge(): 
{code:java}
224: 	private void doMergeNestedMap(Map<String, Object> source, ObjectNode node, ObjectMapper mapper) throws Exception {
225: 
226: 		if (source == null) {
227: 			return;
228: 		}
229: 
230: 		Iterator<Entry<String, JsonNode>> fields = node.fields();
231: 
232: 		while (fields.hasNext()) {
233: 
234: 			Entry<String, JsonNode> entry = fields.next();
235: 			JsonNode child = entry.getValue();
236: 			Object sourceValue = source.get(entry.getKey());
237: 
238: 			if (child instanceof ObjectNode && sourceValue != null) {
239: 				doMerge((ObjectNode) child, sourceValue, mapper);
240: 				fields.remove();
241: 			}
242: 		}
243: 	}
{code}

doMerge() early returns on line 156, which merges nothing, but does return the child Map which is ignored and then the child Map is removed on line 240 above.  On a subsequent request, since the source value is missing, it bypasses this logic, causing the back and forth nature of the defect. I think the method above needs to do something with the returned map, but I am not sure where to apply it, as I would think it would need to be applied to the map that aleady has it as a member.  I am also not sure of the level of support for nested patch on such elements.  I almost think if the result of doMerge is a Map bypass the delete...  I think original authors need to weigh in here.
{code:java}
147: 	private <T> T doMerge(ObjectNode root, T target, ObjectMapper mapper) throws Exception {
148: 
149: 		Assert.notNull(root, ""Root ObjectNode must not be null!"");
150: 		Assert.notNull(target, ""Target object instance must not be null!"");
151: 		Assert.notNull(mapper, ""ObjectMapper must not be null!"");
152: 
153: 		PersistentEntity<?, ?> entity = entities.getPersistentEntity(target.getClass());
154: 
155: 		if (entity == null) {
156: 			return mapper.readerForUpdating(target).readValue(root);
157: 		}
{code}
","03/Nov/16 7:03 PM;mzampetti;Any update if anyone has reviewed this and any comments on the issue or possible solution?","03/Nov/16 7:22 PM;olivergierke;I've put a fix in the just released 2.5.5.RELEASE, care to give that a try?","04/Nov/16 1:23 AM;mzampetti;The fix in 2.5.5.RELEASE does seem to resolve the issue as highlighted in the test case. I'll need to do some more work to test in my app, but this does appear to fix it.

FYI, this fix doesn't show up in the Changelog for the Hopper-SR5 release notes, by the way.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1283|https://github.com/spring-projects/spring-data-rest/issues/1283]. ",,,,,,,,,,,,,,,,,
Regression with custom controllers,DATAREST-908,69940,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,mp911de,sixrandanes,sixrandanes,26/Sep/16 7:36 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,27/Sep/16 9:51 AM,2.5.3 (Hopper SR3),,,,2.4.6 (Gosling SR6),2.5.4 (Hopper SR4),,,,,,0,,,,,"Hello,

I have this following code in my application : 

{code:java}
@RepositoryRestController
@RequestMapping(""unites"")
@ExposesResourceFor(Unite.class)
public class UniteController {
        ....
	@ResponseBody
	@RequestMapping(value = ""/search/with_params"", method = RequestMethod.GET)
	public PagedResources<?> searchWithParams(@Param(""code"") final String code ....) final Pageable pageRequest) {

		final Page<Unite> pages = uniteRepository.searchWithParams(code, designation, date, pageRequest);
		if (pages.hasContent()) {
			return assembler.toResource(pages);
		}
		return assembler.toEmptyResource(pages, Unite.class, null);
	}

}
{code}


Seem like there is a regression with the last version of spring-boot@1.4.1 : With spring-data-rest-webmvc@2.5.3, I have got this error while asking the url

{noformat}
java.lang.IllegalArgumentException: Could not determine a repository key from /unites/search/with_params.
	at org.springframework.data.rest.webmvc.support.DomainClassResolver.resolve(DomainClassResolver.java:64)
	at org.springframework.data.rest.webmvc.json.JacksonMappingAwareSortTranslator.translateSort(JacksonMappingAwareSortTranslator.java:66)
	at org.springframework.data.rest.webmvc.json.MappingAwarePageableArgumentResolver.resolveArgument(MappingAwarePageableArgumentResolver.java:72)
	at org.springframework.data.rest.webmvc.json.MappingAwarePageableArgumentResolver.resolveArgument(MappingAwarePageableArgumentResolver.java:43)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:161)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:128)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:114)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)
{noformat}",,,,,,,,,,,,,,,,,,,,,,DATAREST-909,,,,,,,,,,2016-09-26 08:02:01.337,9223372036854775807,issuemaster(issuemaster),,"0|i09g53:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"26/Sep/16 8:02 AM;olivergierke;Would you mind undoing all the edits I do to the ticket? We're looking into it, thanks.
","26/Sep/16 10:41 AM;olivergierke;Please. Stop. Editing. The. Ticket. Thanks.","27/Sep/16 7:38 AM;mp911de;We fixed this issue in the 2.5.x branch of Spring Data REST. Would you care to give the snapshot build a try?

Here are the maven coordinates:
{code:xml}
<dependency>
    <groupId>org.springframework.data</groupId>
    <artifactId>spring-data-rest-core</artifactId>
    <version>2.5.4.BUILD-SNAPSHOT</version>
</dependency>

<dependency>
    <groupId>org.springframework.data</groupId>
    <artifactId>spring-data-rest-webmvc</artifactId>
    <version>2.5.4.BUILD-SNAPSHOT</version>
</dependency>
{code}

Depending on your setup, you might need to specify the snapshots repo:

{code:xml}
<repositories>
    <repository>
        <id>spring-snapshots</id>
        <name>Spring Snapshots</name>
        <url>https://repo.spring.io/libs-snapshot</url>
        <snapshots>
            <enabled>true</enabled>
        </snapshots>
    </repository>
</repositories>
{code}","27/Sep/16 9:14 AM;sixrandanes;I have just finished my tests with the version 2.5.4.BUILD-SNAPSHOT and it works fine like before. 
Thanks for your work and your reactivity.","27/Sep/16 9:51 AM;mp911de;Fixed with DATAREST-909","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1275|https://github.com/spring-projects/spring-data-rest/issues/1275]. ",,,,,,,,,,,,,,,,,,
MappingAwarePageableArgumentResolver accidentally drops default Pageable returned from delegate PageableHandlerMethodArgumentResolver,DATAREST-906,69906,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,mp911de,igler,igler,21/Sep/16 11:56 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,23/Sep/16 1:33 PM,2.4.5 (Gosling SR5),2.5.3 (Hopper SR3),,,2.4.6 (Gosling SR6),2.5.4 (Hopper SR4),2.6 RC1 (Ingalls),,,,,2,,,,,"After upgrading to spring-boot 1.4.1 which includes Hopper-SR3 I get a NPE in the following code section when Pageable is not set explicitly:

public Page<Translation> findTranslationsBy(String isoCode, Pageable pageable) {
    log.info("""" + pageable.getPageSize());
    ....
}

Setting HOPPER-SR2 in pom.xml fixes the problem as a default page-size is taken into account.
",,,,,,,,,,,,,,,,,,,,,,DATAREST-909,,,,,,,,,,2016-09-21 12:03:33.261,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/231,"0|i09fxj:",9223372036854775807,9223372036854775807,,,Kay M1,,,,,,,,,,,"21/Sep/16 12:03 PM;olivergierke;I am assuming you're talking about a controller method here? Who's resolving the {{Pageable}} in the first place? What does the request look like? What does your setup for {{PageableHandlerMethodArgumentResolver}}} look like?","21/Sep/16 1:25 PM;igler;Yes, a controller method. The request is ""http://localhost:8080/api/languages/9dbf1bf3-3b52-4b88-a356-2f9b6edece04/translations"". I have no manual setup for ""PageableHandlerMethodArgumentResolver"". ","22/Sep/16 7:40 AM;igler;If I replace @RepositoryRestController through @Controller, then Pageable is initialized with default values (if not set through url-parameters).","22/Sep/16 8:56 AM;olivergierke;Looks like the newly introduced {{MappingAwarePageableArgumentResolver}} (to fix DATAREST-883) accidentally drops {{Pageable}} instances that don't have no {{Sort}} instance attached to it, which unfortunately is the case for the default one being returned from {{PageableHandlerMethodArgumentResolver}}.","23/Sep/16 7:06 AM;otrosien;.. got bitten by that, too. Is there a known work-around?","23/Sep/16 8:15 AM;olivergierke;So far, it looks like the only way is manually checking the instance for {{null}} and manually assigning the default then.","23/Sep/16 9:25 AM;mp911de;Another workaround is using {{DefaultedPageable}} that contains the resolved {{Pageable}} (Our repository controllers use primarily {{DefaultedPageable}}).","23/Sep/16 1:33 PM;olivergierke;Fix is in place and snapshots should be available soon. Would be cool if you could give them a spin.","05/Oct/16 1:27 PM;igler;DefaultedPageable and Hopper-SR4 both fix the problem. Thanx.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1274|https://github.com/spring-projects/spring-data-rest/issues/1274]. ",,,,,,,,,,,,,,
Fix order dependent DuplicateLinkListingTests,DATAREST-902,69878,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,20/Sep/16 5:45 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,20/Sep/16 5:53 AM,2.4.4 (Gosling SR4),,,,2.4.5 (Gosling SR5),,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:54.522,9223372036854775807,issuemaster(issuemaster),,"0|i09frb:",9223372036854775807,9223372036854775807,,,Hopper SR3 / Gosling SR5,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1271|https://github.com/spring-projects/spring-data-rest/issues/1271]. ",,,,,,,,,,,,,,,,,,,,,,,
User registered Hibernate 5 Jackson module should be preferred over the one registered by default,DATAREST-899,69860,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,ptahchiev,ptahchiev,19/Sep/16 3:12 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,20/Dec/16 11:54 AM,,,,,2.6 RC1 (Ingalls),3.0 M2 (Kay),,,,,,0,ingalls,,,,"Hello,

before I was using Gosling SR4 and I was able to configure my own {{Hibernate5Module}} by overriding the {{configureJacksonObjectMapper}} method in {{RepositoryRestConfigurerAdapter}} like this:

{code}
    @Override
    public void configureJacksonObjectMapper(ObjectMapper objectMapper) {
        Hibernate5Module module = new Hibernate5Module();
        module.enable(Hibernate5Module.Feature.FORCE_LAZY_LOADING);
        module.disable(Hibernate5Module.Feature.USE_TRANSIENT_ANNOTATION);
        objectMapper.registerModule(module);
    }
{code}

In there I specificly tell it to disable the {{USE_TRANSIENT_ANNOTATION}} because I want the fields in JPA annotated with {{@Transient}} to be return in the resulting json. However now that DATAREST-607 is fixed it registers the {{Hibernate5Module}} like this:

{code}
		public void registerModule(ObjectMapper mapper) {

			Hibernate5Module module = new Hibernate5Module();
			module.enable(Hibernate5Module.Feature.FORCE_LAZY_LOADING);

			mapper.registerModule(module);
		}
{code}

and even though I keep my old configuration it does not honor it so the {{@Transient}} fields are never returned in the json.

I will create a demo project to demonstrate this soon.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2016-09-21 07:14:20.006,9223372036854775807,issuemaster(issuemaster),,"0|i09fnb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"19/Sep/16 3:26 PM;ptahchiev;Here's a demo project (with a test-case) which works in Gosling, but fails with Ingalls:

https://github.com/ptahchiev/demo-rest-problem","20/Sep/16 6:12 PM;ptahchiev;I think the problem lies in {{RepositoryRestMvcConfiguration:820}}:
{code}
		Jackson2DatatypeHelper.configureObjectMapper(objectMapper);
		// Configure custom Modules
		configurerDelegate.configureJacksonObjectMapper(objectMapper);
{code}

It first goes through the spring-data hibernate5 module registration and then through the customer modules registration. I think the order must be reversed - first call the {{configurerDelegate.configureJacksonObjectMapper(objectMapper);}} to allow customers to register manually hibernate5 module with the settings they want, and then if it is not registered spring-data can register it.","20/Sep/16 6:21 PM;ptahchiev;I have created a pull-request and it works:

https://github.com/spring-projects/spring-data-rest/pull/229

Please can you make it into the release on Wednesday?","21/Sep/16 7:14 AM;olivergierke;Two things: please stop filing every issue as critical. You might consider them critical but they're usually not for the project overall. Especially with this one where the code causing the difficulties is not even contained in a released version. Hopper — by definition — can't be affected as we fixed DATAREST-607 for Ingalls only (to be shipped with RC1) exactly for that reason: to be able to mitigate potential regressions. So, thanks for playing with that stuff early. We will get this sorted out.

I guess we were under the assumption that a later addition of a Module would override the previous ones, but we can easily reverse this.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1268|https://github.com/spring-projects/spring-data-rest/issues/1268]. ",,,,,,,,,,,,,,,,,,,
Typo in EntityLookupConfiguration assertion message,DATAREST-898,69856,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,mp911de,mp911de,mp911de,19/Sep/16 1:38 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,19/Sep/16 1:45 PM,2.5.2 (Hopper SR2),,,,2.5.3 (Hopper SR3),2.6 RC1 (Ingalls),,,Documentation,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:54.057,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/228,"0|i09fmf:",9223372036854775807,9223372036854775807,,,Hopper SR3 / Gosling SR5,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1267|https://github.com/spring-projects/spring-data-rest/issues/1267]. ",,,,,,,,,,,,,,,,,,,,,,,
NestedEntitySerializer fails to serialize Map for Hibernate proxy,DATAREST-897,69850,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,ptahchiev,ptahchiev,18/Sep/16 1:12 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,19/Sep/16 5:19 AM,,,,,2.5.3 (Hopper SR3),2.6 RC1 (Ingalls),,,,,,0,,,,,"Hello,

I have the following JPA entity which I want to expose via rest:
{code}

@Entity
public class ProductEntity {


    @ElementCollection(targetClass = LobValue.class)
    @CollectionTable(name = ""s_name_lv"", joinColumns = @JoinColumn(name = ""s_pk""))
    @MapKeyColumn(name = ""locale"")
    private Map<String, LobValue> s;
    
    //getters/setters

}

{code}

where the {{LobValue}} is an embeddable:

{code}

@Embeddable
@Access(AccessType.FIELD)
public class LobValue {

    private String s;

    public String getS() {
        return s;
    }

    public void setS(String s) {
        this.s = s;
    }
}

{code}

However when I try to access {{http://localhost:8080/rest/productEntities}} from the browser I get the following exception:

{code}
Caused by: org.hibernate.LazyInitializationException: failed to lazily initialize a collection, could not initialize proxy - no Session
	at org.hibernate.collection.internal.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:579)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:203)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:558)
	at org.hibernate.collection.internal.PersistentMap.put(PersistentMap.java:163)
	at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$NestedEntitySerializer.serialize(PersistentEntityJackson2Module.java:362)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:693)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:690)
	... 140 more
{code}

which happens when the {{PersistentEntityJackson2Module}} tries to serialize the json.

This code works perfectly fine with {{Gosling-SR4}} but the exception happens with {{Hopper}} or {{Ingals}}.

Here's a sample repository that reproduces this behavioud:

http://github.com/ptahchiev/demo-rest-problem

Just start the project with {{mvn spring-boot:run}} and then navigate to {{http://localhost:8080/rest/productEntities}}.


P.S. I mark this with blocker because it blocks me to update to Hopper or Ingalls.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2016-09-18 16:32:00.341,9223372036854775807,issuemaster(issuemaster),,"0|i09fl3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18/Sep/16 4:32 PM;olivergierke;Should be an easy fix as this seems to related to Spring's {{CollectionFactory}} using the native Hibernate type which in turn requires an active {{Session}}.

Generally speaking, we use priorities to indicate severance regarding the overall functionality of the library. Otherwise every ticket would be filed as blocker.","19/Sep/16 5:19 AM;olivergierke;This should be fixed. You sample project (already set up to use snapshots) builds fine now.","19/Sep/16 5:22 AM;olivergierke;Please give the snapshots a try. Also, sample projects are most helpful if they're as small as possible and contain a failing test case and then we can just run the build to verify the fix. Having to issue particular requests manually is suboptimal as introduces a lot of other vectors that could potentially cause issues.","19/Sep/16 12:18 PM;ptahchiev;The latest SNAPSHOTs work fine. Thanks for the fix and the feedback - i'll try to create better sample projects from now on :)","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1266|https://github.com/spring-projects/spring-data-rest/issues/1266]. ",,,,,,,,,,,,,,,,,,,
Users should be able to completely configure REST with implementation of RepositoryRestConfigurerAdapter,DATAREST-894,69821,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Won't Fix,olivergierke,ptahchiev,ptahchiev,15/Sep/16 8:25 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,19/Sep/16 8:57 AM,2.5.2 (Hopper SR2),2.6 M1 (Ingalls),,,,,,,,,,1,,,,,"Hello,

at the moment I am still forced to extend {{RepositoryRestMvcConfiguration}} because I have two problems. The first one is I want one-indexed parameters so I do the following:
{code}
    @Override
    public HateoasPageableHandlerMethodArgumentResolver pageableResolver() {
        final HateoasPageableHandlerMethodArgumentResolver resolver = new HateoasPageableHandlerMethodArgumentResolver();
        resolver.setOneIndexedParameters(true);

        return resolver;
    }
{code}

The second one is a bit more tricky. According to this discussion here:

https://gitter.im/spring-projects/spring-data/archives/2015/12/11

postgresql database requires a real transaction if you are serving {{@Lob}} fields in your json. That's why in our configuration class we extend  {{RepositoryRestMvcConfiguration}} and we override the the {{jpaHelper}} method to attach a {{restTransactionInterceptor}}:
{code}
    @Bean
    @Override
    public JpaHelper jpaHelper() {
        return new JpaHelper() {
            @Override
            public List<WebRequestInterceptor> getInterceptors() {
                List<WebRequestInterceptor> interceptors = super.getInterceptors();
                if (restTransactionInterceptor != null) {
                    interceptors.add(restTransactionInterceptor);
                }
                return interceptors;
            }
        };
    }
{code} ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2016-09-15 10:10:01.675,9223372036854775807,issuemaster(issuemaster),,"0|i09fen:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15/Sep/16 10:10 AM;awilkinson;The current situation makes things unnecessarily awkward for users of Spring Boot. Boot takes the presence of an existing {{RepositoryRestMvcConfiguration}} bean as the cue to switch off Boot's auto-configuration of Spring Data REST. In this case, when the user was trying to make an additive change to the configuration, they inadvertently lose all of their environment-based configuration via {{spring.data.rest.*}} properties and the customisation of Data REST's {{ObjectMapper}} using the auto-configured {{JacksonObjectMapper}}.","15/Sep/16 10:59 AM;ptahchiev;I found out one more method that I can't configure with the {{RepositoryRestConfigurer}}:

{code}
    @Override
    protected UriToEntityConverter uriToEntityConverter(ConversionService conversionService) {
        return new NemesisUriToEntityConverter(repositories, repositoryInvokerFactory(conversionService), conversionService);
    }

{code}","19/Sep/16 8:57 AM;olivergierke;I don't think there's much we can do here. TBCH I don't *want* to make all off the components in {{RepositoryRestMvcConfiguration}} configurable for a couple of reasons:

1. Spring Data REST has an opinionated view on how to implement REST resources using Spring MVC. This makes it clearly different from plain Spring MVC. So while being able to reconfigure effectively everything in Spring MVC, I think with SD REST, you're rather recommended to manually implement parts of your API that require more advanced customizations.
2. Spring Data REST does not have access to all the conditional APIs that Spring Boot has. This makes it much more difficult to implement ""if the user provided a bean use that, else use this default. Oh and let the user tweak the default."". Moving all components that some user could want to customize in some way to the configurer API basically removes our freedom to change the internal setup.
3. With Spring Boot, you still *can* extend {{RepositoryRestMvcConfiguration}}. However, I'd argue that if you do that, you basically throw all guarantees and convenience mechanisms over board to gain complete control over everything.

Generally speaking, I am much more in favor of getting concrete requests for customizability and then selectively expose APIs or other means to achieve those (or even reserving the right to recommend to rather implement things manually) than proactively just opening up APIs and basically giving up control and the ability to change things internally.","19/Sep/16 9:30 AM;awilkinson;{quote}I don't want to make all off the components in RepositoryRestMvcConfiguration configurable{quote}

You may not want to make all of the components in {{RepositoryRestMvcConfiguration}} configurable, but the reality is that they already are as the class can be sub-classed. Furthermore, the [documentation encourages users to do so|http://docs.spring.io/spring-data/rest/docs/current/reference/html/#_assigning_validators_manually]. At the least, I think there's a usability or documentation problem here

{quote}I am much more in favor of getting concrete requests for customizability{quote}

There are three such requests in this issue:

- Customisation of  {{HateoasPageableHandlerMethodArgumentResolver}}
- Customisation of {{JpaHelper}}
- Customisation of {{UriToEntityConverter}}

If one or more of those isn't intended to be customised in order that Spring Data REST can keep its opinions, then I think they should be registered via some other means that an overridable {{@Bean}} method on a {{@Configuration}} class that users are encouraged to subclass.","19/Sep/16 9:44 AM;olivergierke;I can see the use case for {{HPHAR}}. What are the ones for the other two? Using the {{JpaHelper}} to register additional interceptors seems to be a weird way in the first place?

As indicated above, I am still fine with someone extending {{RepositoryRestMvcConfiguration}}. If you want all the power, get all the power. However, requesting all the power and keeping the same level of convenience (Boot applying some defaults here and there) won't work. So ""not intended to be customized"" was not the correct phrasing here.

I'll have a look at the docs and make sure we only point to {{RepositoryRestConfigurer}} where possible and make obvious what the consequences of extending {{RepositoryRestMvcConfiguration}} are.","19/Sep/16 10:33 AM;ptahchiev;We are using the {{JPAHelper}} to register a transaction interceptor to keep transaction open or otherwise we can't use postgre db and {{Lobs}}. It may not be the best way but the documentation doesn't say what the best way is nor it says ""we don't fully support postgre db"". If SDR does not want to support postgre please let the documentation say so. Or if SDR wants to fully support postgre then at least please allow users to register their own interceptors.","19/Sep/16 10:44 AM;olivergierke;I guess it's a bit of a stretch to explicitly list all things that might not work out of the box due to a particular technology exposing special requirements. How are we supposed to keep track of that? That — by definition — is an infinite list. Also, Spring Data REST of course supports Postgres and there's no reason we'd want to imply it doesn't. That Postgres might be a PITA to work with for lobs is a completely different story. But that's not Spring Data RESTs business at all. 

Have you tried following [the Spring Boot documentation|http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration] of how to register custom {{WebMvcConfigurerAdapter}} instances? If that doesn't work, we can investigate why.","24/Sep/16 6:44 PM;ptahchiev;Hello,

I tried creating an {{AsyncHandlerInterceptor}} and registering it with spring-boot's {{addInterceptors}} but it didn't work. I'll create a separate issue for this and also a test-project. I'm still wondering - is there any particular reason the transaction is closed before the object is handed to jackson for serialization? 
","06/Dec/16 7:57 PM;ptahchiev;We just had a discussion in the spring-boot gitter channel. Seems like if I declare {{RepositoryRestMvcConfiguration}} then I get one more {{objectMapper}} so now they become 4 in my project:
{code}
0 = {LinkedHashMap$Entry@27909} ""jacksonObjectMapper"" ->  (this one comes from spring-boot)
1 = {LinkedHashMap$Entry@27910} ""objectMapper"" ->  (this one comes from RepositoryRestMvcConfiguration line 446)
2 = {LinkedHashMap$Entry@27911} ""halObjectMapper"" ->  (this one comes from spring data rest I think)
3 = {LinkedHashMap$Entry@27912} ""_halObjectMapper"" -> (this one probably comes from spring hateoas I think)
{code}

:( ","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1263|https://github.com/spring-projects/spring-data-rest/issues/1263]. ",,,,,,,,,,,,,,
Problem serializing JSR-310 types (e.g. LocalDate),DATAREST-893,69766,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,oyku,oyku,10/Sep/16 9:55 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,10/Sep/16 10:43 AM,,,,,,,,,,,,0,,,,,"When using spring-data-rest, serialization of JSR-310 types, the serializer treats them as Resources.

Spring boot 1.4.0, jackson JSR-310 module in the path

{noformat}
spring.jackson.serialization.write-date-keys-as-timestamps=false
{noformat}

{code}
class Person {
    private LocalDate dateOfBirth;
}
{code}

Serialization with jackson yields 

{code}
{dateOfBirth: { ""content"" : ""1970-01-01""}}
{code}

However doing the same thing after removing spring-data-rest starter from pom, yields 

{code}
{dateOfBirth: ""1970-01-01""}
{code}

I've seen the LocalDate attribute was treated as a Resource. The obvious reason is that in NestedEntitiySerializer class within PersistentEntityJackson2Module treats every nested attribute as Resource. That is also why serialization of Maps fail, which is easy to fix by adding an exception for Map. However in cases of LocalDate and other friends this will not work because the language level is 6, not 8

{code}
		@Override
		public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {

			if (value instanceof Collection) {

				Collection<?> source = (Collection<?>) value;
				List<Object> resources = new ArrayList<Object>();

				for (Object element : source) {
					resources.add(toResource(element));
				}

				provider.defaultSerializeValue(resources, gen);
			} else if (value instanceof Map) {
				provider.defaultSerializeValue(value, gen);
			} else if (value instanceof ChronoLocalDate) {
				provider.defaultSerializeValue(value, gen);
			} else if (value instanceof ChronoLocalDateTime) {
				provider.defaultSerializeValue(value, gen);
			} else {
				provider.defaultSerializeValue(toResource(value), gen);
			}
		}
{code}

This looks ugly but LocalDate and LocalDateTime when serialized as string becomes objects not arrays anymore. There must be a way of giving exceptions to ""all nested attributes are resources"" policy and this does not need to be an annotation I believe it can be buried in the Jackson Module class.
",,,,,,,,,,,,,,,,DATAREST-888,,,,,,,,,,,,,,,,2020-12-31 10:30:53.56,9223372036854775807,issuemaster(issuemaster),,"0|i09f2f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1262|https://github.com/spring-projects/spring-data-rest/issues/1262]. ",,,,,,,,,,,,,,,,,,,,,,,
Fix integration tests failing due to more precise Content-Type headers returned by Spring MVC 4.3,DATAREST-892,69765,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,09/Sep/16 8:50 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,09/Sep/16 8:54 PM,,,,,2.6 RC1 (Ingalls),,,,Infrastructure,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:53.416,9223372036854775807,issuemaster(issuemaster),,"0|i09f27:",9223372036854775807,9223372036854775807,,,Hopper SR3 / Gosling SR5,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1261|https://github.com/spring-projects/spring-data-rest/issues/1261]. ",,,,,,,,,,,,,,,,,,,,,,,
JSON Patch silently nullifies property values,DATAREST-889,69734,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,otrosien,otrosien,07/Sep/16 3:51 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,14/Sep/16 8:17 AM,2.5.2 (Hopper SR2),,,,2.5.3 (Hopper SR3),2.6 RC1 (Ingalls),,,,,,0,,,,,"The current JSON patch implementation internally catches exceptions (JsonLateObjectEvaluator line 41) and misses certain cases in if-else-statements (JsonPatchPatchConverter line 127), resulting in SDR setting the property value to {{null}}. This is quite bad, as already noticed in DATAREST-886. Instead some exception, like the PatchException should be thrown to avoid applying wrong changes.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:53.143,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/227,"0|i09evb:",9223372036854775807,9223372036854775807,,,Hopper SR3 / Gosling SR5,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1259|https://github.com/spring-projects/spring-data-rest/issues/1259]. ",,,,,,,,,,,,,,,,,,,,,,,
JsonLateObjectEvaluator uses hard-coded ObjectMapper,DATAREST-887,69722,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,mduesterhoeft,mduesterhoeft,06/Sep/16 1:37 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,12/Sep/16 8:55 AM,2.5.2 (Hopper SR2),,,,2.5.3 (Hopper SR3),2.6 RC1 (Ingalls),,,,,,2,,,,,"JsonLateObjectEvaluator uses a hard-coded jackson {{ObjectMapper}} to deserialize json patch payload. As a result all custom modules to deserialize e.g. LocalDateTime, Money,... will not be available.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2016-09-06 13:39:54.081,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/224,"0|i09esn:",9223372036854775807,9223372036854775807,,,Hopper SR3 / Gosling SR5,,,,,,,,,,,"06/Sep/16 1:39 PM;otrosien;(y) good catch, Mathias!","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1257|https://github.com/spring-projects/spring-data-rest/issues/1257]. ",,,,,,,,,,,,,,,,,,,,,,
JSON Patch for arrays is broken,DATAREST-886,69721,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,otrosien,otrosien,06/Sep/16 1:27 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,12/Sep/16 11:02 AM,2.5.2 (Hopper SR2),,,,2.5.3 (Hopper SR3),2.6 RC1 (Ingalls),,,,,,1,,,,,"There is a TODO in line 126 of org.springframework.data.rest.webmvc.json.patch.JsonPatchPatchConverter pointing out that patching array values is not supported yet.

As a result when you try to patch a collection-based property, Spring Data REST will instead set the value to {{null}}.

Take, for example, this request:

{code}
[{ ""op"": ""replace"", ""path"": ""/hello"", ""value"": [""world"",""galaxy""] }]
{code}

I would expect either...
* a proper implementation (preferred ;-) )
* nothing, but a warning on the server side that this operation was ignored
* an unsupported operation exception indicating the client that his request was rejected
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:52.9,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/226,"0|i09esf:",9223372036854775807,9223372036854775807,,,Hopper SR3 / Gosling SR5,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1256|https://github.com/spring-projects/spring-data-rest/issues/1256]. ",,,,,,,,,,,,,,,,,,,,,,,
Patch with object value omitted,DATAREST-885,69720,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,mduesterhoeft,mduesterhoeft,06/Sep/16 1:14 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,12/Sep/16 9:25 AM,2.5.2 (Hopper SR2),,,,2.5.3 (Hopper SR3),2.6 RC1 (Ingalls),,,,,,1,,,,,"After migrating to spring data rest 2.5.2 the {{PATCH}} operation with {{application/json-patch+json}} for object values is broken.

Consider the following entity:
{code:java}
@Entity
public class Product implements Identifiable<Long> {

    @Id
    @GeneratedValue(strategy = IDENTITY)
    private Long id;

    private String name;

    @Embedded
    private Gtin gtin;
}

@Embeddable
@Getter
@Setter
public class Gtin {

    private String type;
    private String value;
}
{code}

I try to patch with the following payload.
{code}
[
  {
    ""op"":""replace"",
    ""path"":""/gtin"",
    ""value"":{""type"":""EAN"",""value"":""some""}
  }
]
{code}

As a result of this operation the property to update ({{gtin}}) is null. 

{{org.springframework.data.rest.webmvc.json.patch.JsonLateObjectEvaluator#evaluate}} returns null because it receives a {{JsonMappingException}} as it tries to serialize the value json into the entity type.

Please see this product to reproduce the issue https://github.com/mduesterhoeft/spring-data-rest-json-patch-issue",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:52.595,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/223,"0|i09es7:",9223372036854775807,9223372036854775807,https://github.com/mduesterhoeft/spring-data-rest-json-patch-issue,,Hopper SR3 / Gosling SR5,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1255|https://github.com/spring-projects/spring-data-rest/issues/1255]. ",,,,,,,,,,,,,,,,,,,,,,,
Sort mapping does not consider Jackson customizations in field names,DATAREST-883,69686,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,mp911de,olivergierke,olivergierke,01/Sep/16 1:50 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,19/Sep/16 12:16 PM,2.4.4 (Gosling SR4),2.5.2 (Hopper SR2),2.6 M1 (Ingalls),,2.4.5 (Gosling SR5),2.5.3 (Hopper SR3),2.6 RC1 (Ingalls),,,,,0,,,,,"Currently the {{Sort}} instance derived from an HTTP request gets the fields forwarded to the repository without any Jackson customizations (e.g. field name customizations) applied.

That means that although you might have customized the field name in the representation, the request parameter for the sort would still expose the underlying property names.",,,,,,,,,,,,,,,,,,,,,,DATAREST-909,,,,,,,,,,2017-10-29 22:20:24.472,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/222,"0|i09ekn:",9223372036854775807,9223372036854775807,,,Hopper SR3 / Gosling SR5,,,,,,,,,,,"29/Oct/17 10:20 PM;andrii.neverov;It looks like the fix has been reverted and the issue is still present with Spring Boot 1.5.8.RELEASE. Can this request be reopened?","29/Oct/17 10:24 PM;olivergierke;No, as it has been marked fixed against released versions and shows up in those version's changelog. The original fix has been reversed in favor of a better fix (see the commits linked to from the right bar). If you still see erroneous behaviour in current Ingalls, please open a new ticket describing the exact problem you're seeing.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1253|https://github.com/spring-projects/spring-data-rest/issues/1253]. ",,,,,,,,,,,,,,,,,,,,,
ResourceProcessor is not invoked if RepositoryEntityController does not return a subtype of Resources,DATAREST-881,69654,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,mborger,mborger,30/Aug/16 9:57 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,01/Sep/16 2:43 PM,2.5.2 (Hopper SR2),,,,2.5.3 (Hopper SR3),2.6 RC1 (Ingalls),,,,,,0,,,,,"There is a regression from SDR 2.4 to 2.5 where ResourceProcessors are not invoked for CrudRepositories but are invoked for JpaRepositories. I have provided an example project with tests. You can switch between Spring Boot 1.3 and 1.4 in the build script.

We think we traced the issue down to line 154 in ResourceProcessorHandlerMethodReturnValueHandler where it checks if Resources can be assigned from the targetType. It appears that in the CrudRepository case, where findAll returns a Resources<T>, the isAssignableFrom implementation from Spring Core is returning false where as in the JpaRepository case findAll returns a PagedResources<T> and isAssignableFrom returns true. I feel like both of these scenarios should return true for the ResourceProcessor logic to work as expected.",,,,,,,,,,,SPR-14648,,,,,,,,,,,,,,,"30/Aug/16 9:39 PM;mborger;resource-processor-test.zip;https://jira.spring.io/secure/attachment/23530/resource-processor-test.zip",,,,,,2016-08-31 12:03:12.577,9223372036854775807,issuemaster(issuemaster),,"0|i09edj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Aug/16 12:03 PM;olivergierke;Looks like this is caused by a bug in Spring's {{ResolvableType}} and that hasn't been unveiled yet as the tests for {{ResourceProcessorHandlerMethodReturnValueHandler}} haven't been strict enough. Tightening those unveiled a couple more tiny issues I'll fix for that ticket. ","01/Sep/16 2:43 PM;olivergierke;I've filed a ticket and pushed a fix for the [problem in Spring HATEOAS|https://github.com/spring-projects/spring-hateoas/issues/486] as we've moved the affected types to it and use them from current master (Ingalls). I've also applied those fixes to the classes residing in Spring Data REST for the Hopper maintenance branch.

Note however that these fixes will require Spring Framework 4.2.8 (Hopper) or 4.3.3 (Ingalls) to work. The fix is currently only available in snapshots. We will upgrade to those release versions once Spring Framework has shipped those fixes in releases itself.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1251|https://github.com/spring-projects/spring-data-rest/issues/1251]. ",,,,,,,,,,,,,,,,,,,,,
@JsonUnwrapped annotation ignored,DATAREST-880,69630,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,polysantiago,polysantiago,29/Aug/16 8:33 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,29/Aug/16 5:36 PM,2.5.2 (Hopper SR2),,,,2.5.3 (Hopper SR3),2.6 RC1 (Ingalls),,,,,,1,,,,,"Using Spring Boot 1.4.0, Spring Data REST no longer seems to take the {{@JsonUnwrapped}} annotation into account to unwrap entities in the JSON responses. The previous Spring Boot versions (i.c. 1.3.7) does not have this problem.

It can be easily reproduced on the master branch of the RestBucks project. When you PUT a payment for an order, the credit card number should be unwrapped, since it is annotated with {{@JsonUnwrapped}}, but it is not:

{code:javascript}
{
  ""amount"": ""EUR4.20"",
  ""creditCard"": {
    ""number"": {
      ""number"": ""1234123412341234""
    },
    ""cardHolderName"": ""Oliver Gierke"",
    ""expirationDate"": ""2099-12-01""
  },
  ""_links"": {
    ""restbucks:order"": {
      ""href"": ""http://localhost:8080/orders/1{?projection}"",
      ""templated"": true,
      ""title"": ""An order""
    },
    ""curies"": [
      {
        ""href"": ""http://localhost:8080/docs/{rel}.html"",
        ""name"": ""restbucks"",
        ""templated"": true
      }
    ]
  }
}
{code}

The expected output would be (if the {{@JsonUnwrapped}} annotation was parsed correctly):

{code:javascript}
{
  ""amount"": ""EUR4.20"",
  ""creditCard"": {
    ""number"": ""1234123412341234"",
    ""cardHolderName"": ""Oliver Gierke"",
    ""expirationDate"": ""2099-12-01""
  },
  ""_links"": {
    ""restbucks:order"": {
      ""href"": ""http://localhost:8080/orders/1{?projection}"",
      ""templated"": true,
      ""title"": ""An order""
    },
    ""curies"": [
      {
        ""href"": ""http://localhost:8080/docs/{rel}.html"",
        ""name"": ""restbucks"",
        ""templated"": true
      }
    ]
  }
}
{code}

This looks like a Spring Data REST bug. Spring Boot 1.3.x uses Spring Data Gosling and {{@JsonUnwrapped}} works as expected. However if {{spring-data-releasetrain.version}} is overriden to use Spring Data Hopper {{@JsonUnwrapped}} no longer works. You can see this behaviour if you check out and run [this commit|https://github.com/olivergierke/spring-restbucks/commit/6ab6937cdd4bc0b32a1ab352becbc18758f444f3] in RestBucks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2016-08-29 17:33:53.352,9223372036854775807,issuemaster(issuemaster),,"0|i09e87:",9223372036854775807,9223372036854775807,https://github.com/spring-projects/spring-boot/issues/6722,,Ingalls M1,,,,,,,,,,,"29/Aug/16 5:33 PM;olivergierke;This is fixed in master and the maintenance for Hopper to be included in Boot 1.4.1. Feel free to give the snapshots a try.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1250|https://github.com/spring-projects/spring-data-rest/issues/1250]. ",,,,,,,,,,,,,,,,,,,,,,
@Transactional annotation is not being enforced on repository methods,DATAREST-876,69542,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,nfedyk,nfedyk,18/Aug/16 4:37 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,03/Nov/16 9:10 AM,2.5.2 (Hopper SR2),,,,,,,,,,,2,,,,,"I'm trying to fetch ""golden"" copy of record from DB while validating the entity to check passed field being unique.  Since I cannot change the DB structure to enforce this with annotation, I had to pass repository reference into validator with expected result of being able to refetch the record. 

Here is the link to s sample project that reproduces the issue:
https://github.com/nfedyk/spring-boot-repository-caching-issue-01","JVM: 1.8.0_51 (Oracle Corporation 25.51-b03) 
OS: Mac OS X 10.10.5 x86_64",,,,,,,,,,,,,,,DATAREST-373,DATAREST-678,,,,,DATAREST-874,,,,,,,,,,2016-08-18 20:19:41.013,9223372036854775807,issuemaster(issuemaster),,"0|i09don:",9223372036854775807,9223372036854775807,https://gitter.im/spring-projects/spring-data?at=57b4ceffbe8025f1694b05d9,,,,,,,,,,,,,"18/Aug/16 8:19 PM;olivergierke;I don't think that what you think you observe is what you observe. The {{@Transactional}} annotation is not the culprit here but the fact that you issue a query and the persistence provider flushing the pending changes to the database at this point already. This is something we don't really control, as unfortunately that's just the way JPA is defined to behave in {{FlushModeType.AUTO}}.","18/Aug/16 8:23 PM;bitsofinfo;So how does one do what is trying to be achieved in this case? Is our use case reasonable?

Simply trying to lookup the real value of this record as it resides in the database, in the middle of this existing transaction? We've tried creating a completely separate repository instance off a duplicate interface and inject that for the ""find"" call, but still get this same mutated instance. ","18/Aug/16 8:32 PM;olivergierke;There unfortunately currently is no really great way. I am not even sure there's a way at all, you might wanna try injecting the {{EntityManager}} manually set the {{FlushModeType}} to {{COMMIT}}, proceed with your calls and then set it back to {{AUTO}}. I am currently looking into options how we can make sure that is managed behind the scenes so that you don't have to.","18/Aug/16 8:37 PM;bitsofinfo;Help me understand this. If we were to declare a 2nd interface for a repository (that manages the same JPA pojo), it would be a completely separate instance with an entirely separate EntityManager, yes? So if we were to inject that ""2nd instance"" of our repo into the repo handling this PATCH, then that one should be hitting a different hibernate session (or none at all) and should hit the DB?

Or is there another alternate way? Are there any hooks to ""load the entity instance"" prior to the invocation of all the PATCH handling by spring-data-rest, where we can have a pre-mutated copy to compare against?","03/Nov/16 9:03 AM;olivergierke;No, an {{EntityManager}} is a thread-bound instance, so all repositories invoked on a single thread see the same {{EntityManager}}. Also, JPA simply doesn't support loading an old instance of an entity in case an instance has already been loaded, e.g. load user 4711, invoke setters on it, change its state. There is no way to get user instance that represents the state in the database without throwing away all modifications. The only thing you can do is suppress the flushing (to avoid the changes being written to the database eagerly) and then issue a query that uses a DTO constructor expression to retrieve ""old"" data.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1246|https://github.com/spring-projects/spring-data-rest/issues/1246]. ",,,,,,,,,,,,,,,,,,
"spring-data-rest JPA repository, transaction issue",DATAREST-874,69528,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Duplicate,olivergierke,bitsofinfo,bitsofinfo,17/Aug/16 8:57 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,03/Nov/16 9:10 AM,2.5.2 (Hopper SR2),,,,,,,,Repositories,,,0,,,,,"I have a {{@RestRepositoryResource}} annotated Spring Data JPA repository that is handling a {{PATCH}} to an existing object. While this ""transaction"" is running, I have additional code that that needs to lookup/find the existing, non-modified record from the database. I am trying to just use the repository instance (the same one fielding the PATH request) to do this lookup. I can't get the real underlying database record, but keep getting back the same object instance in memory that is already mutated by the {{PATCH}}.

Now I know this has to do w/ the underlying hibernate {{Session}} being managed in that {{EntityManager}} in the Spring Data JPA repository but my question is, how can I do this simple thing that I want to do?  I feel like I've spent hours trying to figure this out just so I can code 3 minutes of business logic I need to get done. How can I use this repository to lookup the current state of the record as it exists in the DB (and not get back the already mutated instance)? 

So far the options are not jumping out or seem all that intuitive. Have tried {{@Transactional}} on another wrapper method around the repo find method etc, to no avail.",,,,,,,,,,,,,,,,DATAREST-373,DATAREST-876,,,,,,,,,,,,,,,2016-11-03 09:06:02.239,9223372036854775807,issuemaster(issuemaster),,"0|i09dlj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03/Nov/16 9:06 AM;olivergierke;The short — and probably unsatisfying — answer is: you can't. There's just no way in JPA to get ""the old entity state"" from the database once an instance has been modified. The only workaround is preventing the {{EntityManager}} from flushing and the triggering a query that rather returns a custom DTO through a constructor expression.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1244|https://github.com/spring-projects/spring-data-rest/issues/1244]. ",,,,,,,,,,,,,,,,,,,,,,
Allow excluding properties from being nullified in PUT requests,DATAREST-873,69514,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,nfedyk,nfedyk,16/Aug/16 5:55 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,18/Aug/16 11:26 AM,2.4.4 (Gosling SR4),2.5.2 (Hopper SR2),2.6 M1 (Ingalls),,2.4.5 (Gosling SR5),2.5.3 (Hopper SR3),2.6 RC1 (Ingalls),,,,,0,,,,,"Hi guys, I ran into strange issue with spring-data-rest. I have two columns being updated by *@CreatedDate* and *@LastModifiedDate* annotations. When I submit update *PUT* request without *createdAt* property specified in the body, it gets nullified in DB. Is this the expected behavior?
I have the following entity structure
{code:java}
@Entity
@EntityListeners(AuditingEntityListener.class)
@Table(name=""Items"")
public class Item implements Serializable {
    private static final long serialVersionUID = 1L;

    @Id
    @Column(name=""itemId"")
    private int itemId;

    @Column(name=""itemName"")
    private String itemName;

    @Column(name=""CreatedAt"")
    @CreatedDate
    private Date createdAt;

    @Column(name=""ModifiedAt"")
    @LastModifiedDate
    private Date modifiedAt;
}
{code}","JVM:          1.8.0_51 (Oracle Corporation 25.51-b03)
OS:           Mac OS X 10.10.5 x86_64",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2016-08-18 10:35:41.83,9223372036854775807,issuemaster(issuemaster),,"0|i09dif:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18/Aug/16 10:35 AM;olivergierke;Generally speaking, yes. {{PUT}} requires the resource identified by the URI the request is sent to to be replaced with what the client sends. So unless you take dedicated action on the server side to tweak those semantics. Spring Data REST already does so for properties that are better reflected through dedicated means HTTP exposes for their technical purpose: database identifiers are removed from the representation as HTTP defines URIs to be the primary means for identification. We also remove the last modified property from the representation as there's a standard header for that.

I just tried to use {{@ReadOnlyProperty}} on a class structured like yours and it looks like the component handling the application of JSON payloads to domain objects but it seems it currently doesn't have any effect. I guess that should be fixed here.","18/Aug/16 11:26 AM;olivergierke;That's in place now. Feel free to give the snapshots a try.","18/Aug/16 1:22 PM;nfedyk;Thanks for quick fix. Do you have anticipated release date?","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1243|https://github.com/spring-projects/spring-data-rest/issues/1243]. ",,,,,,,,,,,,,,,,,,,,
Jackson's @JsonTypeInfo is not supported,DATAREST-872,69502,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,mduesterhoeft,mduesterhoeft,15/Aug/16 12:10 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,19/Sep/16 8:40 AM,2.5.2 (Hopper SR2),,,,2.5.3 (Hopper SR3),2.6 RC1 (Ingalls),,,,,,2,,,,,"I am trying to use spring data rest in a scenario with spring-data-jpa and entity inheritance.

Spring data rest seems to be able to serialize entities with inheritance. But as soon as I add {{@JsonTypeInfo}} annotations (to be able to deserialize) I get the following error when serializing such entities:

{code}
Failed to write HTTP message: org.springframework.http.converter.HttpMessageNotWritableException:
    Could not write content: Type id handling not implemented for type java.lang.Object (by serializer of type org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$NestedEntitySerializer)
    (through reference chain: org.springframework.hateoas.PagedResources[""_embedded""]->java.util.UnmodifiableMap[""parents""]->java.util.ArrayList[0]->org.springframework.data.rest.webmvc.json.[""content""]->com.example.Parent[""valueHolder""]);
{code}

The problem seems to be that the custom serializer used here ({{PersistentEntityJackson2Module$NestedEntitySerializer}}) does not implement {{com.fasterxml.jackson.databind.JsonSerializer#serializeWithType}} - which throw an Exception by default.

Please see this repo to reproduce the issue:
https://github.com/mduesterhoeft/spring-data-rest-entity-inheritance",,,,,,,,,,,,,,,,,,,,,,,,,,"14/Sep/16 12:19 PM;rbaily@etranssystems.com;DecimalValue.java;https://jira.spring.io/secure/attachment/23543/DecimalValue.java","14/Sep/16 12:19 PM;rbaily@etranssystems.com;Parent.java;https://jira.spring.io/secure/attachment/23546/Parent.java","14/Sep/16 12:19 PM;rbaily@etranssystems.com;StringValue.java;https://jira.spring.io/secure/attachment/23545/StringValue.java","14/Sep/16 12:19 PM;rbaily@etranssystems.com;Value.java;https://jira.spring.io/secure/attachment/23544/Value.java","14/Sep/16 12:15 PM;rbaily@etranssystems.com;spring-data-rest error stacktrace.txt;https://jira.spring.io/secure/attachment/23542/spring-data-rest+error+stacktrace.txt",,2016-08-17 08:06:09.346,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/221,"0|i09dfr:",9223372036854775807,9223372036854775807,https://github.com/mduesterhoeft/spring-data-rest-entity-inheritance,,,,,,,,,,,,,"17/Aug/16 7:37 AM;mduesterhoeft;Just read this one - https://twitter.com/olivergierke/status/765812150220759040 - and and I am happy to provide a maven project if that helps ;)","17/Aug/16 8:06 AM;olivergierke;:D The important bit is the last part. If your project builds fine and I can get it imported into Eclipse easily, there's nothing to worry about. :)","17/Aug/16 8:36 AM;mduesterhoeft;Then I should be on the safe side - the foundation of the project is basically the output of start.spring.io :D","31/Aug/16 2:12 PM;rbaily@etranssystems.com;I have just been fighting with this issue in the last day as well.  The reason this is an issue (for me at least) is if you want to take the same entity (one with an abstract type member) and try to send it through a REST service (I'm using Spring Boot) and you do not define some way to define the type for the abstract class you will get this message: ""abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information"".  I am assuming Spring Data Rest has no issue with this because the class name is stored in the document repository.  I've tried all sorts of configurations and none of them allow the repository and the REST service to both work.  I debugged and got down to the same point that Mathias found.  Guessing that at some point the Jackson folks added this serializeWithType method and it was never added to the class in this module.

I may try submitting a pull request for this if no one else plans to work on this soon. BTW https://github.com/spring-projects/spring-data-rest/blob/master/CONTRIBUTING.adoc points to https://github.com/spring-projects/spring-data-build/blob/master/CONTRIBUTING.md which gives a 404 error.","31/Aug/16 7:11 PM;rbaily@etranssystems.com;I went ahead and submitted a pull request that addresses this issue.  Oliver, please check it out and let me know what you think.  I added an integration test and verified that the error referenced here occurs without the change and does not occur with the change in place.

Mathias, I reformatted your test code to go into the Spring Data Rest project without adding more dependencies and trying to follow some other test setups that they had.  I noted you as an author in the code since I copied over what you used before modifying.

One thing to note is that your percentage value test did not work for me so I did not include it.  I could not see where percentageValue was referenced anywhere else so not sure whether or not there was something else missing.  Below is code that can be inserted into the DataRest872Tests class that compiles and runs, just the assertions fail.
{code:java}
	@Test
	public void testCreatePercentageValue() throws Exception {
		Map<Object, Object> subMap = new HashMap<>();
		subMap.put(""type"", ""DECIMAL"");
		subMap.put(""value"", 0.95);
		Map<Object, Object> jsonMap = new HashMap<>();
		jsonMap.put(""valueHolder"", subMap);

		Link parentsLink = client.discoverUnique(""parents"");
		MockHttpServletResponse parent = postAndGet(parentsLink, objectMapper.writeValueAsString(jsonMap),
				MediaType.APPLICATION_JSON);
		assertThat((String) JsonPath.read(parent.getContentAsString(), ""$.valueHolder.type""), is(""DECIMAL""));
		assertThat((String) JsonPath.read(parent.getContentAsString(), ""$.valueHolder.percentageValue""), is(0.95d));
	}
{code}
","31/Aug/16 7:33 PM;mduesterhoeft;Rob, looks great.

I think the last line in the test you mentioned is wrong. The test used to fail on on the check for type so I did not realize this error. I think it should be

{code:java}
@Test
	public void testCreatePercentageValue() throws Exception {
		Map<Object, Object> subMap = new HashMap<>();
		subMap.put(""type"", ""DECIMAL"");
		subMap.put(""value"", 0.95);
		Map<Object, Object> jsonMap = new HashMap<>();
		jsonMap.put(""valueHolder"", subMap);
 
		Link parentsLink = client.discoverUnique(""parents"");
		MockHttpServletResponse parent = postAndGet(parentsLink, objectMapper.writeValueAsString(jsonMap),
				MediaType.APPLICATION_JSON);
		assertThat((String) JsonPath.read(parent.getContentAsString(), ""$.valueHolder.type""), is(""DECIMAL""));
		assertThat((String) JsonPath.read(parent.getContentAsString(), ""$.valueHolder.value""), is(0.95d));
	}
{code}","13/Sep/16 5:01 PM;rbaily@etranssystems.com;Oliver, as there is a pull request is there any chance this can be slotted for an upcoming release?  I am currently using a patched version locally for my project.","14/Sep/16 8:58 AM;olivergierke;Sorry, I didn't see the pull request coming in. Feel free to use the Workflow > Submit for Review step going forward.

TBCH, I don't see the PR to fly. It's adding a lot of code but doesn't really make obvious why that code needs to be there. We don't need any repository, JPA or the like to test this as it's about the Jackson serialization, right. The test case provided, doesn't even test anything. I've tried to replicate the fix and see the effect of it on a smaller scale — basically adding a test in {{PersistentEntitySerializationTests}} — but failed to actually change anything in the output generated. But maybe that's due to the fact that I don't get the details of the problematic case in the first place.

Would you mind to simply report here: an as tiny as possible set of domain classes, the JSON output it currently generates, describe what is missing or wrong and the JSON output you'd like to see? Happy to then find the most concise way of testing a fix for that :).","14/Sep/16 12:29 PM;rbaily@etranssystems.com;Ah, did not see the workflow step there.  Will do so shortly for this and for the future.

As far as not getting the details I guess you did not see the GitHub project that Mathias submitted when he created the issue?  It has code and the error that occurs.    Also if you remove the 5 lines of code that I added to the PersistentEntityJackson2Module and run the test in DataRest872Tests you will see this error:
{code}org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.http.converter.HttpMessageNotWritableException: Could not write content: Type id handling not implemented for type java.lang.Object (by serializer of type org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$NestedEntitySerializer) (through reference chain: org.springframework.hateoas.PagedResources[""_embedded""]->java.util.UnmodifiableMap[""parents""]->java.util.ArrayList[0]->org.springframework.data.rest.webmvc.json.[""content""]->org.springframework.data.rest.webmvc.jpa.Parent[""valueHolder""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Type id handling not implemented for type java.lang.Object (by serializer of type org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$NestedEntitySerializer) (through reference chain: org.springframework.hateoas.PagedResources[""_embedded""]->java.util.UnmodifiableMap[""parents""]->java.util.ArrayList[0]->org.springframework.data.rest.webmvc.json.[""content""]->org.springframework.data.rest.webmvc.jpa.Parent[""valueHolder""])
{code}
I've attached a file with the full stack trace from this here in case that is helpful.

I agree that it is definitely an issue with Jackson serialization.  I've attached the files that were used in the test case I wrote as you should be able to use them.  It appears as though you need to have a parent with JsonTypeInfo and then child classes that set up with JsonSubTypes.  The trick seems to be is that this also has to be a nested entity in order to hit the NestedEntitySerializer so it does not apply in every case, like when you get a single entity of the parent class.

Please let us know if this does not give you enough info and we will try to provide more.  I'll take a look to see if  I can do any more on the tests.  It seem like the PersistentEntityJackson2ModuleUnitTests.resolvesReferenceToSubtypeCorrectly test should be similar so maybe I can start there.

Not sure why you wouldn't want an additional integration test though.  Seems like the more of those you have the better! (y)","14/Sep/16 12:30 PM;rbaily@etranssystems.com;Pushing to review state for now.","14/Sep/16 1:23 PM;rbaily@etranssystems.com;Ok, when I looked at the stack trace and thought about it a little more it looks like it has to with lists of objects.  Sure enough I was able to create the small test method below in PersistentEntityJackson2ModuleUnitTests which throws the exception mentioned previously.  If I add my code back into PersistentEntityJackson2Module it throws a different exception about ""PersistentEntity must not be null!"" which I'm sure because I did not set up other things correctly.  

Oliver, please let us know if you can create an appropriate test method from this.

{code:java}
	@Test
	public void handlesTypeInfoInListCorrectly() throws IOException {

		ArrayList<PetOwner> petOwners = new ArrayList<PetOwner>();
		Pet pet = new Cat();
		PetOwner owner = new PetOwner();
		owner.pet = pet;
		petOwners.add(owner);
		String jsonOutput = mapper.writeValueAsString(petOwners);
	}
{code}
","14/Sep/16 9:59 PM;alexleigh;Using the Parent, Value, and StringValue classes you added, here's a test you can add to PersistentEntitySerializationTests.java to verify the behavior:

{code:java}
	@Test
	public void serializesInheritance() throws Exception {

		StringValue stringValue = new StringValue();
		stringValue.setValue(""A string"");

		Parent parent = new Parent();
		parent.setValueHolder(stringValue);

		PersistentEntityResource resource = PersistentEntityResource.
				build(parent, repositories.getPersistentEntity(Parent.class)).
				withLink(new Link(""/parents/1"")).
				build();

		String result = mapper.writeValueAsString(resource);

		assertThat(JsonPath.read(result, ""$.valueHolder.type""), equalTo(""STRING""));
	}
{code}

Unfortunately this test won't pass because the ""type"" field is missing from the serialized JSON. The fix implemented in the PR does not actually use the TypeSerializers to property serialize the type information that Jackson needs to deserialize. I'm working on improving the fix to actually include the type info but it does not appear to be a simple fix.
","15/Sep/16 1:57 PM;rbaily@etranssystems.com;Alex, yes I knew that might be the case although in this use case does it make sense to add extra fields to the JSON that is returned?  I suppose it could but it is not really a representation of what is in the storage.","15/Sep/16 8:22 PM;alexleigh;Rob: yes, in this case, adding the extra field is exactly the intention of this annotation:

{code:java}
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = ""type"")
{code}

Let's call the use of this annotation Scenario 1. Here, the annotation tells Jackson that when serializing objects of this type, add a new property to the serialized object, whose name is ""type"", and whose value is the logical name for this type. In this scenario, the fix in the PR does not behave as expected, because the ""type"" field is not being written when serializing.

However, there is another scenario worth considering, with a slightly different usage of the annotation:

{code:java}
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = ""type"")
{code}

Let's call this Scenario 2. Here the annotation tells Jackson that the logical type name is contained in the ""type"" property already existing on the object. In this scenario, assuming the class has something like a ""getType()"" method, the fix in the PR does behave as expected. The polymorphic classes are correctly serialized with the ""type"" property.

So I think this PR does not fully work as expected with all different usages of Jackson polymorphic annotations, however it is strictly an improvement over the current behavior. Currently, both scenario 1 and scenario 2 causes SDR to throw the ""Type id handling not implemented for type java.lang.Object (by serializer of type org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$NestedEntitySerializer)"" exception. With the fix in the PR, neither scenario 1 nor scenario 2 throw exceptions, and for scenario 2 the behavior is exactly what is desired. Moreover, I tried to work on an improvement that would work for scenario 1 as well, but it turns out to be very difficult. This is because the PersistentEntityResourceSerializer and NestedEntitySerializer wrap objects inside a Resource before invoking the Jackson BeanSerializer to serialize. This wrapping causes the BeanSerializer to pass the wrong type info to the TypeSerializer, and so the wrong type name gets written. This is not too difficult to fix for simple objects, but for collections it is much more difficult. Jackson needs both the type info for each element in the collection as well as the type parameter of the collection to correctly invoke the TypeSerializer, and the way the PersistentEntityResourceSerializer wraps elements and collections in Resource and Resources prevents both kinds of type detection. Thus I've come to the conclusion that attempting a fix that works for scenario 1 would be very time consuming, and so a fix that addresses scenario 2 only is good enough.

I've created a commit that demonstrates how this fix addresses scenario 2 here: https://github.com/alexleigh/spring-data-rest/commit/9b1c5190f57e718924e23548a61e4b79da8e818e
I haven't created a PR for this commit because my change differ from this PR only in the tests. Feel free to use my tests without needing to attribute me.","19/Sep/16 8:39 AM;olivergierke;I've applied and polished the commit you linked to and would like to resolve this one as fixed as there's now a way to use {{@JsonTypeInfo}} in the first place. Would you mind creating a new ticket and (optionally) a failing test case for the second case you outlined? I'll have a look at what we can do then.","19/Sep/16 6:41 PM;alexleigh;Thank you for the fix! I created DATAREST-900 for the other use cases.","19/Sep/16 6:57 PM;mduesterhoeft;Thanks for the fix and clarification. I tested against the snapshot and can confirm that {{@JsonTypeInfo}} with {{include=JsonTypeInfo.As.EXISTING_PROPERTY}} is working now both for serialization and deserialization.

Added a branch to my original example that confirms it is fixed - https://github.com/mduesterhoeft/spring-data-rest-entity-inheritance/tree/fixed-hopper-sr3-snapshot","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1242|https://github.com/spring-projects/spring-data-rest/issues/1242]. ",,,,,,
CustomAcceptHeaderHttpServletRequest doesn't work as intended with Spring Framework 4.3.2,DATAREST-870,69448,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Duplicate,olivergierke,awilkinson,awilkinson,08/Aug/16 12:45 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,08/Aug/16 1:00 PM,,,,,,,,,,,,0,,,,,"{{CustomAcceptHeaderHttpServletRequest}} tries to provide a custom view of the request's {{Accept}} header by overriding {{getHeader(String)}}. It works with Spring Framework 4.2.x but doesn't work with Spring Framework 4.3.2. As a result of [SPR-14506|https://jira.spring.io/browse/SPR-14506], Spring Framework 4.3.2 now calls {{getHeaderValues(String)}} rather than {{getHeader(String)}} and the original {{Accept}} header is returned.",,,,,,,,,,,,,,,,DATAREST-863,,,,,,,,,,,,,,,,2016-08-08 13:00:11.924,9223372036854775807,issuemaster(issuemaster),,"0|i09d3r:",9223372036854775807,9223372036854775807,https://github.com/spring-projects/spring-boot/issues/6567,,,,,,,,,,,,,"08/Aug/16 1:00 PM;olivergierke;That's a duplicate of DATAREST-863, which has already been fixed.","08/Aug/16 1:03 PM;awilkinson;Oops, sorry. My search-fu clearly failed me. That's good news though.","08/Aug/16 1:05 PM;olivergierke;Probably not easy to spot as the other ticket is so much written from the effect point of view rather than the cause. Nevermind, glad we got it covered.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1240|https://github.com/spring-projects/spring-data-rest/issues/1240]. ",,,,,,,,,,,,,,,,,,,,
Fix Solr integration tests after Jackson upgrade,DATAREST-868,69445,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,08/Aug/16 10:47 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,08/Aug/16 10:53 AM,,,,,2.6 RC1 (Ingalls),,,,Infrastructure,,,0,,,,,"After the upgrade to Jackson 2.8 in the build parent, we need to make sure the SOlr related integration tests pick up that version.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:50.537,9223372036854775807,issuemaster(issuemaster),,"0|i09d33:",9223372036854775807,9223372036854775807,,,Ingalls M1,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1238|https://github.com/spring-projects/spring-data-rest/issues/1238]. ",,,,,,,,,,,,,,,,,,,,,,,
NullPointerException from RepositoryRestConfiguration if you inject mvcValidator into RepositoryRestConfigurer,DATAREST-866,69419,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,ptahchiev,ptahchiev,04/Aug/16 2:18 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,01/Sep/16 5:28 PM,2.5.2 (Hopper SR2),,,,2.5.3 (Hopper SR3),2.6 RC1 (Ingalls),,,,,,0,,,,,"Hopper release throws a null-pointer exception when you inject ""mvcValidator"" in your {{RepositoryRestConfigurer}}.",,,,,,,,,,,,,,,,,,,,,,,,,,"11/Aug/16 4:16 PM;ptahchiev;output.log;https://jira.spring.io/secure/attachment/23501/output.log",,,,,,2016-08-08 10:11:36.083,9223372036854775807,issuemaster(issuemaster),,"0|hzzy4x:zzzzzzzzzzzzzzzzzr",9223372036854775807,9223372036854775807,,,Ingalls M1,Hopper SR3 / Gosling SR5,,,,,,,,,,"04/Aug/16 2:21 AM;ptahchiev;Here's a demo project:

https://github.com/ptahchiev/DATAREST-866

Just switch version in {{pom.xml}} - it works with 1.3.7.RELEASE and fails with 1.4.0.RELEASE","08/Aug/16 10:11 AM;olivergierke;The issue stemmed from a non-static bean factory method to declare a {{BeanPostProcessor}}. That should be fixed now in master and the bug fix branch for Hopper.","10/Aug/16 11:10 AM;ptahchiev;I tried testing the demo project with {{<spring-data-releasetrain.version>Ingalls-BUILD-SNAPSHOT</spring-data-releasetrain.version>}} and I still see the same error. I don't think this has been fixed :( . I will reopen it. ","10/Aug/16 11:21 AM;ptahchiev;As per previous comment, I'm reopening this issue.","10/Aug/16 11:43 AM;olivergierke;Would you mind tweaking the project you linked to showing that it's failing on current snapshots? I can successfully bootstrap your project on both Spring 1.3.7 and 1.4.0 with both Hopper and Ingalls snapshots.","11/Aug/16 6:46 AM;ptahchiev;I have already. If you look inside the demo project you will see this:
{code}
       <version>1.4.0.RELEASE</version>
        <!--version>1.3.7.RELEASE</version-->
    </parent>
    
    <properties>
       <spring-data-releasetrain.version>Ingalls-BUILD-SNAPSHOT</spring-data-releasetrain.version>
    </properties>
{code}

I have cloned {{spring-data-rest}} and I made sure the {{RepositoryRestMvcConfiguration}} has the {{static}} modified. I rebuild the spring-data-rest and then I try to start my demo project with {{mvn spring-boot:run}} but then I get this exception:
{code}
Caused by: java.lang.NullPointerException
	at com.fasterxml.jackson.databind.ObjectMapper.registerModule(ObjectMapper.java:706)
	at org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.basicObjectMapper(RepositoryRestMvcConfiguration.java:802)
	at org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.objectMapper(RepositoryRestMvcConfiguration.java:440)
{code}","11/Aug/16 12:45 PM;olivergierke;Well, to verify wether our fix works, you need to ouse our artifacts, not some locally hacked version of SD REST ;). Please wipe your SD REST snapshots from your local Maven repository to make sure you use our latest builds. If you can still se it fail, please tweak the example you have linked to up there to exactly the version combination that you see the the failure in.","11/Aug/16 4:15 PM;ptahchiev;Hi Oliver,

please find {{output.log}} which is a complete output from my command line. To spare the details here's what I do:
{code}
> git clone git@github.com:spring-projects/spring-data-rest.git spring-data-rest-orig
> cd spring-data-rest-orig/
> mvn clean install
> cd ..
> cd DATAREST-866/
> mvn spring-boot:run
{code}

And then the exception happens. Please let me know what wrong I am doing :(","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1236|https://github.com/spring-projects/spring-data-rest/issues/1236]. ",,,,,,,,,,,,,,,
"EndpointMBeanExportAutoConfiguration required a single bean, but 3 were found",DATAREST-865,69392,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Invalid,olivergierke,bitsofinfo,bitsofinfo,01/Aug/16 1:10 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,01/Aug/16 6:30 PM,2.5.2 (Hopper SR2),,,,,,,,Infrastructure,,,0,,,,,"My Application.java defines no such bean, but extends from RepositoryRestMvcConfiguration

This worked in w/ Spring 1.3.6 but when I upgraded to 1.4.0 I now get this

{code}
Constructor in org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfiguration required a single bean, but 3 were found:
        - objectMapper: defined by method 'objectMapper' in my.package.Application
        - halObjectMapper: defined by method 'halObjectMapper' in my.package.Application
        - _halObjectMapper: defined in null
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2016-08-01 17:09:53.195,9223372036854775807,issuemaster(issuemaster),,"0|i09crb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"01/Aug/16 5:09 PM;olivergierke;We don't control that particular class. Please file an issue in the [Spring Boot tracker|https://github.com/spring-projects/spring-boot/issues].","01/Aug/16 6:10 PM;bitsofinfo;https://github.com/spring-projects/spring-boot/issues/6529","01/Aug/16 6:30 PM;olivergierke;Awesome, thanks!","02/Aug/16 12:25 AM;ceefour;However I'm curious, are {{halObjectMapper}} and {{_halObjectMapper}} created by Spring Data REST?

If so, then:

1. Spring Data REST and Spring Boot needs to work out the mechanism to select the {{@Primary}} one.
2. Why {{_halObjectMapper}} is defined in null? It's strange...","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1235|https://github.com/spring-projects/spring-data-rest/issues/1235]. ",,,,,,,,,,,,,,,,,,,
NestedEntitySerializer does not support Maps,DATAREST-864,69389,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,ptahchiev,ptahchiev,01/Aug/16 4:48 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,19/Sep/16 12:51 PM,2.5.2 (Hopper SR2),,,,2.5.3 (Hopper SR3),2.6 RC1 (Ingalls),,,,,,3,,,,,"With the latest {{Hopper-SR2}} I get the following error:
{code}
2016-07-30 15:50:16,189 [main] WARN : Failed to write HTTP message: org.springframework.http.converter.HttpMessageNotWritableException: Could not write content: PersistentEntity must not be null! (through reference chain: org.springframework.data.rest.webmvc.json.[""content""]->com.nemesis.platform.module.cms.core.entity.ListerPageEntity[""title""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: PersistentEntity must not be null! (through reference chain: org.springframework.data.rest.webmvc.json.[""content""]->com.nemesis.platform.module.cms.core.entity.ListerPageEntity[""title""])
{code}

My entity has a {{Map<Locale, LocalizedValue>}} where {{LocalizedValue}} is {{@Embedable}} and in my case entity is null because in {{PersistentEntityJackson2Module}} you look it up like this 
{code}
PersistentEntity<?, ?> entity = entities.getPersistentEntity(value.getClass());
{code}
but value is a {{Map}} so {{value.getClass()}} returns {{PersistentMap}}.

Sounds like you need a dedicated clause for {{Maps}} in {{NestedEntitySerializer.serialize(…)}}.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2016-08-24 17:38:09.079,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/219,"0|i09cqn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05/Aug/16 7:13 AM;ptahchiev;Here's a very trivial pull-request. I've tested and it worked fine with it: https://github.com/spring-projects/spring-data-rest/pull/219","22/Aug/16 1:50 PM;ptahchiev;Any updates here? I'm really hoping this could go into HopperSR3 :)","24/Aug/16 5:38 PM;lixlix;I tried the changed PersistentEntityJackson2Module with Spring Data Hopper SR2 and it solved my serialization problem (a Map<Date, @Embeddable>) as well.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1234|https://github.com/spring-projects/spring-data-rest/issues/1234]. ",,,,,,,,,,,,,,,,,,,,
REST calls to /api always redirect to HAL Browser if no accept header is specified,DATAREST-863,69385,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,toedter_k,toedter_k,30/Jul/16 7:55 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,05/Aug/16 4:22 AM,2.4.4 (Gosling SR4),2.5.2 (Hopper SR2),2.6 M1 (Ingalls),,2.4.5 (Gosling SR5),2.5.3 (Hopper SR3),2.6 RC1 (Ingalls),,Infrastructure,,,0,,,,,"After updating 2 projects to Spring Boot 1.4 (and Spring Data Rest 2.5.2) all REST calls to /api  that don't specify a header like ""accept: application/json"" redirect to /api/browser/index.html#/api/. In previous versions this was only the case when the accept header was text/html, but now the redirect happens with empty accept header.

This may have nothing to do with Spring Data Rest directly, I just put it here because HAL Browser is involved.

But as a result, the default HAL browser itself cannot get the /api and shows its own index.html.","Spring Boot 1.4, Windows 10, Java 8",,,,,,,,,,,DATAREST-870,,,,,,,,,,,,,,"22/Aug/16 8:49 AM;oyku;halbrowser.jpg;https://jira.spring.io/secure/attachment/23511/halbrowser.jpg",,,,,,2016-07-31 16:30:35.543,9223372036854775807,issuemaster(issuemaster),,"0|i09cpr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"30/Jul/16 12:13 PM;toedter_k;I investigated further. When I set the accept header to application/json ist works.
But still: HAL Browser does not work out of the box...","31/Jul/16 4:30 PM;olivergierke;Actually I am suspecting a change in Spring 4.3 to cause that as we haven't changed our {{produces}} clauses. {{RepositoryController.listRepositories(…)}} is still bound to a {{GET}} request without a produces clause and {{HalBrowser.index(…)}} explicitly maps to {{text/html}}.

I'll bring that up with the Spring team but generally speaking, issuing a request without any {{Accept}} header is not guaranteed to return a particular representation. That the HAL browser does that by default is unfortunate. Adding the {{Accept}} header in the Custom Request Headers section of the browser.","31/Jul/16 4:43 PM;toedter_k;Probably we could enhance the JavaScript code of the HAL browser that it always uses a proper accept header.","02/Aug/16 8:22 PM;olivergierke;I've identified the issue to be in a (didn't find out which one yet) Spring 4.3.2. In {{DelegatingHandlerMapping}} we consult the {{HandlerMapping}} instances for a matching handler. On Spring 4.3.1, the first one (which maps the browser, the JSON schema etc.) throws an exception as the direct path match, which is the method issuing the redirect to the browser, doesn't contain a matching produces clause. On 4.3.2 however, the handler lookup returns that method, although it doesn't actually match (we default the media type to {{application/hal+json}}) as apparently no matching media type check is done for direct path matches?. /cc [~rstoya05-aop]","05/Aug/16 4:22 AM;olivergierke;It turned out the issue was caused by [this commit|https://github.com/spring-projects/spring-framework/commit/e59a5993f37393b2bf6fe02e61f29de7d8b18eca] to fix SPR-14506. It changed the way the {{ContentNegotiationStrategy}} looks up the {{Accept}} header in the request and the custom request wrapper that we put into place to default the header to a certain value not getting picked up anymore. That caused the mapping for the redirect to the HAL Browser to be picked up as it didn't cause any media type conflict anymore which would've triggered further handler mapping resolution.

That change basically flew under our radar as we didn't have any integration builds running against Spring Framework 4.3 (we're building against 4.2 currently). I've filed DATAREST-867 to keep track of that. Snapshots should be available as I write this. Feel free to give them a spin.","16/Aug/16 5:27 PM;bitsofinfo;Is there a workaround in the meantime?","19/Aug/16 9:16 PM;oyku;any workarounds except cloning and removing the / redirection from HalController?","20/Aug/16 12:03 PM;olivergierke;The easiest workaround is to let clients specify an explicit accept header. The HAL Browser has a text field to add custom headers, so putting {{Accept: application/hal+json}} in there should do the trick.","20/Aug/16 12:18 PM;oyku;By ""client"" I suppose you mean the browser.?","20/Aug/16 12:19 PM;oyku;BTW, you've mentioned a snapshot would be available. What's the version tag? 
Thanks in advance.","20/Aug/16 12:23 PM;olivergierke;By client I mean client. Whoever uses your API.

That depends on how you're acutally using Spring Data REST. Boot? Standalone? The BOM? With Boot, set the {{spring-data-releasetrain.version}} property to either {{Ingalls-BUILD-SNAPSHOT}}, {{Hopper-BUILD-SNAPSHOT}} or {{Gosling-BUILD-SNAPSHOT}}. If you use the BOM, it's the same values but a slightly [different mechanism|https://github.com/spring-projects/spring-data-examples/tree/master/bom].","22/Aug/16 8:48 AM;oyku;Thanks for the version explanation. Actually the problem I was trying to solve is the HAL Browser itself displaying HTML instead of the hal json content. See the screenshot attached. This happens with spring boot 1.4 and spring-boot-starter-data-rest and spring-data-rest-hal-browser as dependencies

Adding Accept: application/hal+json to custom headers does the trick but just wanted to point this out","22/Aug/16 9:27 AM;olivergierke;I know, I know :). As described slightly more above, putting {{Accept: application/hal+json}} into the {{Custom Request Headers}} should to the trick until the fix is released.","07/Apr/17 3:28 PM;TimSchwalbe;Is this still not fixed? I have to apply ""Accept: application/hal+json"" to the custom request header. I am using:

{code:java}
	<parent>
	     <groupId>org.springframework.boot</groupId>
	    <artifactId>spring-boot-starter-parent</artifactId>
	    <version>1.4.0.RELEASE</version>
	</parent>
<dependencies>
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-data-rest</artifactId>
	</dependency>
	<dependency>
		<groupId>org.springframework.data</groupId>
		<artifactId>spring-data-rest-hal-browser</artifactId>
       </dependency>
</dependencies>
{code}
","19/Apr/17 1:26 PM;olivergierke;Boot 1.4.0 defaults to Hopper SR2. This one was fixed in SR3. So upgrading to the latest 1.4.x or even 1.5.x of Spring Boot should give you the fix.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1146|https://github.com/spring-projects/spring-data-rest/issues/1146]. ",,,,,,,,
ControllerLinkBuilder does not work with new @GetMapping,DATAREST-861,69312,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Invalid,olivergierke,j@n-ophey.de,j@n-ophey.de,26/Jul/16 12:14 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,26/Jul/16 12:30 PM,2.5.2 (Hopper SR2),,,,,,,,,,,0,,,,,"As a user of SpringWebMVC/SpringHATEOAS I need the ControllerLinkBuilder to consider paths denoted by both of @RequestMapping and @GetMapping/@PostMapping.

Currently the ControllerLinkBuilder does not consider paths mapped via @GetRequest/@PostRequest introduced during the last SpringWebMVC-Releases.

Using the example provided below, the ""wizardUrl"" getting generated does not reflect the path-fragment ""/new"" mapped by the referenced method.
Only the path mapped by class-level ""@RequestMapping""-Annotation is beeing reflected, so the generated Url is  http://myHost/myApp/some/controller/base/path?redirectUrl=http://myHost/myApp/some/controller/base/path where it should have been http://myHost/myApp/some/controller/base/path/new?redirectUrl=http://myHost/myApp/some/controller/base/path

Framework Stack used:
{code:java}
<properties>
    <spring-framework.version>4.3.1.RELEASE</spring-framework.version>
    <spring-security.version>4.1.1.RELEASE</spring-security.version>
    <spring-hateoas.version>0.20.0.RELEASE</spring-hateoas.version>
    <fasterxml-jackson.version>2.8.1</fasterxml-jackson.version>
    <spring-data-releasetrain.version>Hopper-SR2</spring-data-releasetrain.version>
</properties>
{code}

Steps to reproduce:
Build MVC-Controller:

{code:java}
@Controller
@RequestMapping(path = ""/some/controller/base/path"")
public class SomeController {

    @GetMapping(path = """",  produces = MediaType.TEXT_HTML_VALUE)
    public ModelAndView getSomePageAsHtml() {
        ModelAndView model = new ModelAndView(""somePageThymeleafTemplate"");
        String redirectToSelfUrl = ControllerLinkBuilder.linkTo(ControllerLinkBuilder.methodOn(this.getClass()).getSomePageAsHtml()).toUri().toString();
        String wizardUrl = ControllerLinkBuilder.linkTo(ControllerLinkBuilder.methodOn(this.getClass()).getNewItemWizardAsHtml(redirectToSelfUrl )).toUri().toString();
        System.out.println(""Wrong Url: ""+wizardUrl)
        model.addObject(""wizardUrl"", wizardUrl);
        return model;
    }

    @GetMapping(path = ""/new"", produces = MediaType.TEXT_HTML_VALUE)
    public ModelAndView getNewItemWizardAsHtml(@RequestParam(required = false) String redirectUrl) {
        ModelAndView model = new ModelAndView(""newItemWizardThymeleafTemplate"");
        model.addObject(""redirectUrl"", redirectUrl);
        return model;
    }
}
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2016-07-26 12:30:11.493,9223372036854775807,issuemaster(issuemaster),,"0|i09c9j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"26/Jul/16 12:16 PM;j@n-ophey.de;If you need to get in touch with me quickly, feel free to contact me via twitter: jOphey","26/Jul/16 12:30 PM;olivergierke;Needs to be fixed in Spring HATEOAS. A ticket has just been created [here|https://github.com/spring-projects/spring-hateoas/issues/471].","26/Jul/16 12:42 PM;j@n-ophey.de;Thanks for forwarding this!
Was not sure which bugtracker to use.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1232|https://github.com/spring-projects/spring-data-rest/issues/1232]. ",,,,,,,,,,,,,,,,,,,,
Broken links to included code in conditionals reference documentation,DATAREST-859,69304,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,mp911de,jpilgrim,jpilgrim,26/Jul/16 8:56 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,19/Sep/16 1:52 PM,2.5.2 (Hopper SR2),,,,2.5.3 (Hopper SR3),2.6 RC1 (Ingalls),,,Documentation,,,0,,,,,"Wrong links in asciidoc to a mongodb and security related examples, wrong link to hal-browser images.

Fixed that already, will provide patch in a minute.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:49.504,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/217,"0|i09c7r:",9223372036854775807,9223372036854775807,,,Hopper SR3 / Gosling SR5,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1230|https://github.com/spring-projects/spring-data-rest/issues/1230]. ",,,,,,,,,,,,,,,,,,,,,,,
Broken links to included code in security reference documentation,DATAREST-858,69290,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,mp911de,paulnuk,paulnuk,25/Jul/16 8:16 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,19/Sep/16 1:50 PM,2.5.2 (Hopper SR2),,,,2.5.3 (Hopper SR3),2.6 RC1 (Ingalls),,,Documentation,,,0,,,,,"In the reference doc, there is an error in the documentation generation which stops the example being shown. Specifically this bit:

{code}
Example 5. spring-data-rest-webmvc/src/test/java/org/springframework/data/rest/webmvc//security/PreAuthorizedOrderRepository.java
Unresolved directive in security.adoc - include::../../../spring-data-rest-webmvc/src/test/java/org/springframework/data/rest/webmvc//security/PreAuthorizedOrderRepository.java[tag=code]
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:49.504,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/212,"0|i09c4n:",9223372036854775807,9223372036854775807,http://docs.spring.io/spring-data/rest/docs/current/reference/html/#security,,Hopper SR3 / Gosling SR5,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1229|https://github.com/spring-projects/spring-data-rest/issues/1229]. ",,,,,,,,,,,,,,,,,,,,,,,
Feign client doesn't serialize LocalDate's correctly with Brixton,DATAREST-851,69149,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Invalid,olivergierke,fabmars,fabmars,11/Jul/16 8:12 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,12/Jul/16 7:38 AM,,,,,,,,,,,,0,cloud,feign,netflix,spring,"First things first, I'm not sure it's the right place to log this issue. It may be @Netflix/feign. Please advise.

It is no longer possible to use a Feign client accepting a java.time.LocalDate as a method param where it is supposed to comply with a given format like @DateTimeFormat(iso = ISO.DATE).

If you do, you get a *java.time.format.DateTimeParseException: Text '7/11/16' could not be parsed at index 0""*, where it's clear the serialization format is NOT the requested ISO-8601 uuuu-MM-dd but M/d/uu. I put the whole stacktrace below.

I made a stripped project to reproduce the issue: https://github.com/fabmars/feign-localdate-bug
Just import, run ApplicationServer, ApplicationClient, they are supposed to query a local eureka server, and hit http://localhost:8080/bug

It's worth noticing that LocalDate's used to be serialized correctly back in spring-cloud-netflix:1.0.7, you may even try it in my example project. So there is a strong suspiscion there is a regression since spring-cloud-netflix:1.1.0 at least (before Brixton, even).

{code}
2016-07-11 21:48:32.838 ERROR 9398 --- [nio-8080-exec-7] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.netflix.hystrix.exception.HystrixRuntimeException: getTomorrow failed and no fallback available.] with root cause

feign.FeignException: status 400 reading TimeClient#getTomorrow(LocalDate,String); content:
{""timestamp"":1468266512745,""status"":400,""error"":""Bad Request"",""exception"":""org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"",""message"":""Failed to convert value of type [java.lang.String] to required type [java.time.LocalDate]; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.time.LocalDate] for value '7/11/16'; nested exception is java.time.format.DateTimeParseException: Text '7/11/16' could not be parsed at index 0"",""path"":""/tomorrow""}
	at feign.FeignException.errorStatus(FeignException.java:62) ~[feign-core-8.16.2.jar:8.16.2]
	at feign.codec.ErrorDecoder$Default.decode(ErrorDecoder.java:91) ~[feign-core-8.16.2.jar:8.16.2]
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:134) ~[feign-core-8.16.2.jar:8.16.2]
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:76) ~[feign-core-8.16.2.jar:8.16.2]
	at feign.hystrix.HystrixInvocationHandler$1.run(HystrixInvocationHandler.java:97) ~[feign-hystrix-8.16.2.jar:8.16.2]
	at com.netflix.hystrix.HystrixCommand$1.call(HystrixCommand.java:293) ~[hystrix-core-1.5.3.jar:1.5.3]
	at com.netflix.hystrix.HystrixCommand$1.call(HystrixCommand.java:289) ~[hystrix-core-1.5.3.jar:1.5.3]
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:46) ~[rxjava-1.1.5.jar:1.1.5]
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35) ~[rxjava-1.1.5.jar:1.1.5]
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:50) ~[rxjava-1.1.5.jar:1.1.5]
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30) ~[rxjava-1.1.5.jar:1.1.5]
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:50) ~[rxjava-1.1.5.jar:1.1.5]
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30) ~[rxjava-1.1.5.jar:1.1.5]
	at rx.Observable.unsafeSubscribe(Observable.java:8460) ~[rxjava-1.1.5.jar:1.1.5]
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51) ~[rxjava-1.1.5.jar:1.1.5]
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35) ~[rxjava-1.1.5.jar:1.1.5]
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:50) ~[rxjava-1.1.5.jar:1.1.5]
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30) ~[rxjava-1.1.5.jar:1.1.5]
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:50) ~[rxjava-1.1.5.jar:1.1.5]
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30) ~[rxjava-1.1.5.jar:1.1.5]
	at rx.Observable.unsafeSubscribe(Observable.java:8460) ~[rxjava-1.1.5.jar:1.1.5]
	at rx.internal.operators.OperatorSubscribeOn$1.call(OperatorSubscribeOn.java:94) ~[rxjava-1.1.5.jar:1.1.5]
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction$1.call(HystrixContexSchedulerAction.java:56) ~[hystrix-core-1.5.3.jar:1.5.3]
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction$1.call(HystrixContexSchedulerAction.java:47) ~[hystrix-core-1.5.3.jar:1.5.3]
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction.call(HystrixContexSchedulerAction.java:69) ~[hystrix-core-1.5.3.jar:1.5.3]
	at rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55) ~[rxjava-1.1.5.jar:1.1.5]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_72]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_72]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_72]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_72]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_72]
{code}
","Spring Boot 1.3.6, Spring Cloud Brixton.SR3, Java 1.8",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2016-07-12 07:38:20.37,9223372036854775807,issuemaster(issuemaster),,"0|i09bcf:",9223372036854775807,9223372036854775807,https://github.com/fabmars/feign-localdate-bug,,,,,,,,,,,,,"12/Jul/16 7:38 AM;olivergierke;Spring Data REST has got nothing to with Feign. I guess if at all, the Spring Cloud tracker is the right place to file a ticket.","12/Jul/16 8:18 AM;fabmars;Where is this please, I can't find the projet in this JIRA.
","12/Jul/16 9:15 AM;olivergierke;https://github.com/spring-cloud","12/Jul/16 9:20 AM;mgrzejszczak;Here you can file any issue: https://github.com/spring-cloud/spring-cloud-netflix/issues","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1222|https://github.com/spring-projects/spring-data-rest/issues/1222]. ",,,,,,,,,,,,,,,,,,,
RepositoryEntityController.saveAndReturn calls AfterSaveEvent with wrong domain object,DATAREST-847,69078,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,mzampetti,mzampetti,30/Jun/16 1:34 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,01/Jul/16 12:46 PM,2.3.2 (Fowler SR2),2.4.4 (Gosling SR4),2.5.2 (Hopper SR2),,2.4.5 (Gosling SR5),2.5.3 (Hopper SR3),2.6 M1 (Ingalls),,Repositories,,,0,,,,,"The *saveAndReturn* method has the following code to handle the Repository Event logic.


{code:java}
publisher.publishEvent(new BeforeSaveEvent(domainObject));
Object obj = invoker.invokeSave(domainObject);
publisher.publishEvent(new AfterSaveEvent(domainObject));
{code}

but I think this is wrong. It is using the provided *domainObject* for the *AfterSaveEvent*, instead of the *obj* returned by the *invoker*. From what I can tell, the expectation is that the After events should be supplied the object with its current state (i.e. after the change has been applied). This is further born out by the behavior of the createAndReturn method, which uses:

{code:java}
publisher.publishEvent(new BeforeCreateEvent(domainObject));
Object savedObject = invoker.invokeSave(domainObject);
publisher.publishEvent(new AfterCreateEvent(savedObject));
{code}

Here it is using the returned object (*savedObject* in this case). This gets even more confusing in the case of a REST PUT call, since that method first determines if the request should create a new item or update an existing item. Granted, since the contract of PUT is to always supply a complete object, the impact is less then a PATCH case, if one is using Generated fields or has EntityListeners that affect the object, those changes would be hidden to the *AfterSaveEvent*.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2016-06-30 14:33:12.34,9223372036854775807,issuemaster(issuemaster),,"0|i09awv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"30/Jun/16 2:33 PM;olivergierke;Good catch. Did you just get puzzled looking at the code or did this cause any real issues? Asking because in theory the object returned from the method should be the one handed to it in the first place. A JPA persistence provider is allowed to return a completely different instance bu so far I haven't seen that ever being done.

That said, I'm definitely going ahead to fix this. Would just be interested personally :).","30/Jun/16 3:21 PM;mzampetti;I discovered looking at the code when researching how to handle a different use case. I haven't identified a known issue caused by this yet. The way I read it, the most likely cause where this could case problems is if you have JPA-level EntityListeners or @Generated field values that would have been modified by the save() call (such as db triggers, etc.). We don't have much of that at the moment, but are planning to add some more soon.","01/Jul/16 12:46 PM;olivergierke;That's in place now.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1218|https://github.com/spring-projects/spring-data-rest/issues/1218]. ",,,,,,,,,,,,,,,,,,,,
HAL browser redirect fails when proxied through Zuul,DATAREST-815,68466,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,timtebeek,timtebeek,25/Apr/16 3:40 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,27/Apr/16 1:44 PM,2.5.1 (Hopper SR1),,,,2.4.5 (Gosling SR5),2.5.2 (Hopper SR2),2.6 M1 (Ingalls),,,,,0,,,,,"I have an app called {{viewer}} with little more than {{@SpringBootApplication}} & {{@EnableEurekaClient}} that has {{spring-data-rest-hal-browser:2.5.1.RELEASE}} on it's classpath, along with spring cloud Brixton.RC2 dependencies. {{application.yml}} only holds the {{spring.application.name}}, no {{context-path}}. This app connects to a eureka instance and is routed through a Zuul proxy, both also running Brixton.RC2. The Zuul proxy automatically routes {{/viewer}} to the backend service.

When I open the root URL from whatever port the viewer app is running on, I'm correctly redirected to {{/browser/index.html#}}.

When I open the root URL through my separate Zuul proxy, I'm again redirected to {{/browser/index.html#}}, but that fails because the {{/viewer}} {{x-forwarded-prefix}} header is ignored. Here's a sample response from the actuator {{/trace}} page:

{code:json}
{
  ""timestamp"": 1461596698378,
  ""info"": {
    ""method"": ""GET"",
    ""path"": ""/"",
    ""headers"": {
      ""request"": {
        ""accept"": ""text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"",
        ""upgrade-insecure-requests"": ""1"",
        ""user-agent"": ""Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.87 Safari/537.36"",
        ""dnt"": ""1"",
        ""accept-language"": ""en-US,en;q=0.8,nl;q=0.6"",
        ""cookie"": ""JSESSIONID="",
        ""x-forwarded-host"": ""canary.company.nl"",
        ""x-forwarded-proto"": ""https"",
        ""x-forwarded-prefix"": ""/viewer"",
        ""x-forwarded-port"": ""443"",
        ""connection"": ""Keep-Alive"",
        ""accept-encoding"": ""gzip"",
        ""transfer-encoding"": ""chunked"",
        ""host"": ""canary.company.nl:56260""
      },
      ""response"": {
        ""X-Application-Context"": ""viewer:0"",
        ""Location"": ""https://canary.company.nl/browser/index.html#"",
        ""status"": ""302""
      }
    }
  }
}
{code}

As you can see the {{Location}} header does not include the {{/viewer}} prefix. Opening {{/viewer/browser/index.html#/}} directly works as expected.",Spring Cloud Brixton.RC2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2016-04-27 13:44:59.455,9223372036854775807,issuemaster(issuemaster),,"0|i09753:",9223372036854775807,9223372036854775807,,,Hopper SR2,,,,,,,,,,,"27/Apr/16 1:44 PM;olivergierke;That should be fixed. I've changed the implementation of the initial redirect to make use of the Spring MVC APIs that automatically consider proxy headers. Backported into the maintenance branches for Hopper and Gosling. Feel free to give the snapshots a spin.","28/Apr/16 1:27 PM;timtebeek;That works, thanks a lot!
Seems like I'm always looking forward to the next release lately.. :)","28/Apr/16 1:28 PM;olivergierke;We're just trying to keep you excited! :D","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1191|https://github.com/spring-projects/spring-data-rest/issues/1191]. ",,,,,,,,,,,,,,,,,,,,
RFC 6902 style patch operation not working anymore,DATAREST-813,68418,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,florin,florin,20/Apr/16 2:19 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,01/Feb/17 4:33 PM,2.5.1 (Hopper SR1),,,,2.5.7 (Hopper SR7),2.6 GA (Ingalls),,,,,,1,,,,,"I have just upgraded from Spring Boot 1.4.0.M1 to 1.4.0.M2 and I noticed that the RFC6902 style patch operations don't seem to work for me anymore. 
Test project: https://github.com/florind/spring-boot-rfc6902
I'm getting now:

{noformat}
    Could not read an object... nested exception is org.springframework.expression.spel.SpelEvaluationException: EL1034E:(pos 0): A problem occurred whilst attempting to set the property 'payment': Type conversion failure
{noformat}

The data structure like this:

{code:java}
@Data
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonIgnoreProperties(ignoreUnknown = true)
@EntityListeners(AuditingEntityListener.class)
@Entity(name = ""POLICY_BUNDLE"")
@NoArgsConstructor
public class PolicyBundle  implements Identifiable<Long> {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Embedded
    @Valid private Payment payment;

    @Embeddable @Data
    public static class Payment {
        public enum PaymentFrequency {Monthly, Quarterly, Yearly}
        @NotNull private String price;
        @NotNull private PaymentFrequency frequency;
    }
}
{code}

and the PATCH operation is

{code:javascript}
[
    {""op"":""add"",""path"":""/payment"",""value"":{""price"":""EUR 19.00"",""frequency"":""Monthly""}}
]
{code}

Now I am seeing that {{org.springframework.expression.spel.support.StandardTypeConverter::convertValue(…)}} catches a {{ConversionException}} with message {{org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [com.domain.policy.PolicyBundle] to type [@javax.persistence.Embedded @javax.validation.Valid com.domain.policy.PolicyBundle$Payment]}} and rethrows a {{SpelEvaluationException}} that bubbles up eventually into the error above.",,,,,,,,,,,,,,,,,,,,,,DATAREST-995,,,,,,,,,,2017-02-01 12:55:46.041,9223372036854775807,issuemaster(issuemaster),,"0|i096uf:",9223372036854775807,9223372036854775807,https://github.com/spring-projects/spring-boot/issues/5742,,,,,,,,,,,,,"01/Feb/17 12:55 PM;shakuzen;I'm not certain the root cause is the same, but I am also unable to successfully use JSON Patch for my use case with Hopper or Ingalls. I have made a reproduction repository here: https://github.com/shakuzen/aggregate-child-update-sample","01/Feb/17 1:24 PM;olivergierke;Would you mind turning the manual testing procedure into an integration test so that I can more reliably execute it repeatedly?","01/Feb/17 4:23 PM;florin;I'm updating my findings since I'm the reporter: I just checked the same with Spring Boot releases beyond 1.4.0.M2 and the issue above is gone when using Spring Boot 1.4.x.RELEASE and 1.5.x.RELEASE.
I've updated my linked github project accordingly. Tommy, what you see might be a different issue.","01/Feb/17 4:29 PM;olivergierke;That's helpful, [~florin]. I was just about to investigate your case, too. I'll just mark this one as resolved against latest Hopper and Ingalls releases and go ahead with a new ticket for Tommy's case. That indeed is still broken, as we apparently use {{~}} instead of {{-}} to indicate ""append"" on a collection property.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1189|https://github.com/spring-projects/spring-data-rest/issues/1189]. ",,,,,,,,,,,,,,,,,,,
"After upgrading Spring Data Hopper SR1, projection doesn't work",DATAREST-812,68401,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Duplicate,olivergierke,izeye,izeye,19/Apr/16 8:45 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,18/May/16 6:07 AM,2.5.1 (Hopper SR1),,,,,,,,,,,1,,,,,"With Spring Data Hopper M1, I got the following response:

{code:java}
http://localhost:18080/persons?projection=groupInlined
{code}

{code:java}
{
  ""_embedded"" : {
    ""persons"" : [ {
      ""id"" : 1,
      ""group"" : {
        ""name"" : ""CTB""
      },
      ""age"" : 35,
      ""firstName"" : ""Johnny"",
      ""lastName"" : ""Lim"",
      ""favoriteFruit"" : null,
      ""_links"" : {
        ""self"" : {
          ""href"" : ""http://localhost:18080/persons/1""
        },
        ""person"" : {
          ""href"" : ""http://localhost:18080/persons/1{?projection}"",
          ""templated"" : true
        },
        ""group"" : {
          ""href"" : ""http://localhost:18080/persons/1/group""
        },
        ""activities"" : {
          ""href"" : ""http://localhost:18080/persons/1/activities""
        }
      }
    } ]
  },
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:18080/persons""
    },
    ""profile"" : {
      ""href"" : ""http://localhost:18080/profile/persons""
    },
    ""search"" : {
      ""href"" : ""http://localhost:18080/persons/search""
    }
  },
  ""page"" : {
    ""size"" : 20,
    ""totalElements"" : 1,
    ""totalPages"" : 1,
    ""number"" : 0
  }
}
{code}

Note that `group` is inlined due to the projection.

But with Spring Data Hopper SR1, I got the following response:

{code:java}
{
  ""_embedded"" : {
    ""persons"" : [ {
      ""firstName"" : ""Johnny"",
      ""lastName"" : ""Lim"",
      ""age"" : 35,
      ""favoriteFruit"" : null,
      ""_links"" : {
        ""self"" : {
          ""href"" : ""http://localhost:18080/persons/1""
        },
        ""person"" : {
          ""href"" : ""http://localhost:18080/persons/1{?projection}"",
          ""templated"" : true
        },
        ""activities"" : {
          ""href"" : ""http://localhost:18080/persons/1/activities""
        },
        ""group"" : {
          ""href"" : ""http://localhost:18080/persons/1/group""
        }
      }
    } ]
  },
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:18080/persons""
    },
    ""profile"" : {
      ""href"" : ""http://localhost:18080/profile/persons""
    },
    ""search"" : {
      ""href"" : ""http://localhost:18080/persons/search""
    }
  },
  ""page"" : {
    ""size"" : 20,
    ""totalElements"" : 1,
    ""totalPages"" : 1,
    ""number"" : 0
  }
}
{code}

This is a sample project reproducing the problem: https://github.com/izeye/spring-boot-throwaway-branches/tree/data-jpa-and-rest-with-inline

This was originally reported at https://github.com/spring-projects/spring-boot/issues/5732",,,,,,,,,,,,,,,,DATAREST-806,,,,,,,,,,,,,,,,2016-05-05 11:30:13.165,9223372036854775807,issuemaster(issuemaster),,"0|i096qn:",9223372036854775807,9223372036854775807,https://github.com/izeye/spring-boot-throwaway-branches/tree/data-jpa-and-rest-with-inline,,,,,,,,,,,,,"05/May/16 11:30 AM;adamp;I am also experiencing this issue - the projection parameter appears to be being ignored. Debugging, it never seems to enter the SpelAwareProxyProjectionFactory class.

If you manually use a projector in a custom controller it works fine, but with the SDR exporting controller it does not.

The ALPS metadata still lists the projections correctly. ","18/May/16 6:07 AM;olivergierke;That's a duplicate of DATAREST-806, which ha already been fixed and is due to release for the next Hopper service release.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1188|https://github.com/spring-projects/spring-data-rest/issues/1188]. ",,,,,,,,,,,,,,,,,,,,,
Incorrect @Version documentation,DATAREST-811,68383,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,ww4,ww4,16/Apr/16 7:14 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,04/Jul/18 2:37 PM,2.5.1 (Hopper SR1),,,,2.6.14 (Ingalls SR14),3.0.9 (Kay SR9),3.1 RC1 (Lovelace),,Documentation,,,0,contributions-welcome,,,,"The annotation in section 9.1, example 3 says to use Spring Data Commons @Version annotation:

http://docs.spring.io/spring-data/rest/docs/current/reference/html/#conditional

But that doesn't generate the Etag header. Instead we need to use the JPA @Version annotation.

See Oliver's answer here:

http://stackoverflow.com/questions/31882180/why-is-the-version-property-not-set-with-spring-data-jpa/31883006
I verified that it's indeed the JPA annotation that's required.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2018-07-04 14:37:45.082,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/295,"0|i096mv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04/Jul/18 2:37 PM;olivergierke;The analysis – and thus the suggested fix – is not entirely correct. Which {{@Version}} annotation has to be used depends on the datastore that's backing the entity. The snippet included in the reference documentation section is indeed using Spring Data's {{@Version}}, which sort of made it correct. I've applied the fix provided in the pull request but broadened the description to mention when to use which {{@Version}} annotation.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1187|https://github.com/spring-projects/spring-data-rest/issues/1187]. ",,,,,,,,,,,,,,,,,,,,,,
Minor typo in reference documentation,DATAREST-810,68378,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,bebenja5,bebenja5,15/Apr/16 10:13 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,04/Jul/18 2:35 PM,2.5.1 (Hopper SR1),,,,2.6.14 (Ingalls SR14),3.0.9 (Kay SR9),3.1 RC1 (Lovelace),,Documentation,,,0,contributions-welcome,,,,"Little typo spotted in the documentation of method headForItemResource
repsoitory instead of repository
:)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:43.891,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/295,"0|i096lr:",9223372036854775807,9223372036854775807,https://github.com/spring-projects/spring-data-rest/blob/master/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/RepositoryEntityController.java,,,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1186|https://github.com/spring-projects/spring-data-rest/issues/1186]. ",,,,,,,,,,,,,,,,,,,,,,,
Projection application failed,DATAREST-808,68291,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,neo,neo,12/Apr/16 6:41 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,12/Apr/16 8:53 AM,,,,,,,,,,,,0,,,,,"After migration from Hopper-M1 to Hopper-SR1, the projection application does not work anymore for HTTP GET on a collection.",Windows 8.1,,,,,,,,,,,,,,,DATAREST-806,,,,,,,,,,,,,,,,2016-04-12 08:53:02.47,9223372036854775807,issuemaster(issuemaster),,"0|i0962n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"12/Apr/16 8:53 AM;olivergierke;Thanks for filing this one. We already got a report for that (DATAREST-808) and the issue is already fixed. Feel free to give the snapshots a try.","12/Apr/16 8:56 AM;neo;Thank you Oliver Gierke. Sorry for that duplicate issue. I already tested the current BUILD-SNAPSHOT and it works fine at first sight.","12/Apr/16 9:24 AM;olivergierke;No worries, sorry for the hassle in the first place, glad to hear it works for you :)!","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1184|https://github.com/spring-projects/spring-data-rest/issues/1184]. ",,,,,,,,,,,,,,,,,,,,
Projections are no longer applied to collection result,DATAREST-806,68275,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,svennold,svennold,11/Apr/16 6:02 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,11/Apr/16 8:00 AM,2.5.1 (Hopper SR1),,,,2.5.2 (Hopper SR2),2.6 M1 (Ingalls),,,Repositories,,,0,,,,,"In Gosling you could apply projections also on collection results (user defined query). In Hopper SR1 those projections are not applied, adding it as excerpt projection it works.

Attached a simple test (spring boot). Default is using Gosling release train. {{-PHopper}} activates Hopper release train.",,,,,,,,,,,,DATAREST-808,DATAREST-812,,,,,,,,,,,,,"11/Apr/16 6:21 AM;svennold;test.zip;https://jira.spring.io/secure/attachment/23371/test.zip",,,,,,2016-04-11 08:00:00.697,9223372036854775807,issuemaster(issuemaster),,"0|i095z3:",9223372036854775807,9223372036854775807,,,Hopper GA,,,,,,,,,,,"11/Apr/16 8:00 AM;olivergierke;That's a great catch! Thanks for preparing the example so well, too. That's a glitch we apparently introduced in the refactorings to support the new nested resource handing. I've pushed a fix to master and the maintenance branch, snapshot builds ({{Hopper-BUILD-SNAPSHOT}}, {{Ingalls-BUILD-SNAPSHOT}}) should be available in a couple of minutes. I locally verified the fix to work for the latter (Ingalls).","11/Apr/16 1:12 PM;varpa89;https://repo.spring.io/libs-snapshot/org/springframework/data/spring-data-rest-webmvc/
still no  2.5.2 SNAPSHOT","18/May/16 6:08 AM;olivergierke;Should be here now: https://repo.spring.io/libs-snapshot/org/springframework/data/spring-data-rest-webmvc/2.5.2.BUILD-SNAPSHOT/","18/May/16 6:54 AM;varpa89;thx)","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1182|https://github.com/spring-projects/spring-data-rest/issues/1182]. ",,,,,,,,,,,,,,,,,,,
RepositoryConstraintViolationExceptionMessage produces inaccurate output,DATAREST-805,68260,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,christian.bongiorno@gmail.com,christian.bongiorno@gmail.com,09/Apr/16 12:08 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,14/Apr/16 6:12 PM,2.4.4 (Gosling SR4),2.5.1 (Hopper SR1),,,2.5.2 (Hopper SR2),2.6 M1 (Ingalls),,,Infrastructure,,,0,,,,,"The {{invalidValue}} field of {{RepositoryConstraintViolationExceptionMessage.ValidationError}} is a string even if the failed member is of another type because it is being string formatted. By maintaining the original type we allow better debugging by expressing more closely the true type input and not just its {{toString()}}  and also allow the original marshaller/unmarshaller to express the object as is more appropriate. 

Example input:

{code}
{
    ""givenName"" : ""null"",
    ""familyName"" : ""Bongiorno"",
    ""dob"" : ""2007-12-03"",
    ""nationalId"" : ""12345687"",
    ""photo"" : null
    
}
{code}
or

{code}
{
    ""givenName"" : null,
    ""familyName"" : ""Bongiorno"",
    ""dob"" : ""2007-12-03"",
    ""nationalId"" : ""12345687"",
    ""photo"" : null
    
}
{code}
example output

{code}
{
    ""errors"": [
        {
            ""entity"": ""Worker"",
            ""message"": ""may not be null"",
            ""invalidValue"": ""null"",
            ""property"": ""givenName""
        }
    ]
}
{code}

Entity:

{code:java}
@Entity
public class Worker {

    @Id
    private Long id;

    @NotNull
    @Pattern(regexp = ""[^null]"", message = ""may not be null"")
    private String givenName;

    @NotNull
    private String familyName;

    private LocalDate dob;

    private String nationalId;

    private byte[] photo;
}
{code}

I intentionally added a silly validation constraint to demonstrate
","ubuntu xenial 
java version ""1.8.0_74""
Java(TM) SE Runtime Environment (build 1.8.0_74-b02)
Java HotSpot(TM) 64-Bit Server VM (build 25.74-b02, mixed mode)
",0,0,,0%,0,0,,,,,,,,,,,,,,,,,,,,,,,,,2016-04-09 07:33:14.881,9223372036854775807,issuemaster(issuemaster),,"0|hzzy6d:zzzzzzzzzzv",9223372036854775807,9223372036854775807,,,Hopper GA,Hopper SR2,,,,,,,,,,"09/Apr/16 7:34 AM;olivergierke;Thanks for filing that one. As I understand this correctly is that you'd expect a plain {{null}} instead of {{""null""}}, right.","10/Apr/16 5:03 PM;christian.bongiorno@gmail.com;Yes. And,  if it were and out-of-range integer I  would expect an unquoted json integer. 

I already made the changes locally. ","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1181|https://github.com/spring-projects/spring-data-rest/issues/1181]. ",,,,,,,,,,,,,,,,,,,,,
Nested validation errors reported as top level ones,DATAREST-801,68189,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,06/Apr/16 3:14 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,14/Apr/16 7:35 PM,,,,,2.5.2 (Hopper SR2),2.6 M1 (Ingalls),,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,DATAREST-798,,,,,,,2020-12-31 10:30:42.791,9223372036854775807,issuemaster(issuemaster),,"0|hzzy6d:zzzzzzzzzz",9223372036854775807,9223372036854775807,,,Hopper GA,Hopper SR2,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1177|https://github.com/spring-projects/spring-data-rest/issues/1177]. ",,,,,,,,,,,,,,,,,,,,,,,
Nested validation errors reported as top level ones ,DATAREST-798,68152,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,04/Apr/16 1:07 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,06/Apr/16 3:13 PM,2.4.4 (Gosling SR4),2.5 RC1 (Hopper),,,2.5 GA (Hopper),,,,,,,0,,,,,{{ValidationErrors}} doesn't consider the nested path of fields correctly.,,,,,,,,,,,,,,,,,,,,,,,,DATAREST-801,,"06/Apr/16 11:39 AM;bandersson;0001-Failing-test-for-getting-nested-values.patch;https://jira.spring.io/secure/attachment/23359/0001-Failing-test-for-getting-nested-values.patch",,,,,,2016-04-06 11:38:59.389,9223372036854775807,issuemaster(issuemaster),,"0|i0957r:",9223372036854775807,9223372036854775807,,,Hopper GA,,,,,,,,,,,"06/Apr/16 11:38 AM;bandersson;I found another issue with nesting where {{ValidationErrors}} differs from the {{BeanPropertyBindingResult}}","06/Apr/16 11:41 AM;bandersson;These two new tests highlights the difference in behavior between {{ValidationErrors}} and {{BeanPropertyBindingResult}}.","06/Apr/16 3:14 PM;olivergierke;I created DATAREST-801 as a follow up, as this one was included in the Spring Data REST 2.5 GA release notes already.","14/Apr/16 7:35 PM;olivergierke;DATAREST-801 is now fixed, too.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1175|https://github.com/spring-projects/spring-data-rest/issues/1175]. ",,,,,,,,,,,,,,,,,,,
Build for Solr integration tests broken after upgrade to Solr 5.5 in Spring Data Solr,DATAREST-794,68133,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,01/Apr/16 8:34 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,01/Apr/16 8:42 AM,,,,,2.5 GA (Hopper),,,,Infrastructure,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:42.074,9223372036854775807,issuemaster(issuemaster),,"0|i0953j:",9223372036854775807,9223372036854775807,,,Hopper GA,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1168|https://github.com/spring-projects/spring-data-rest/issues/1168]. ",,,,,,,,,,,,,,,,,,,,,,,
PUT request for item resource with customized entity lookup fails,DATAREST-792,68118,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,PaTom,PaTom,31/Mar/16 8:40 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,02/Apr/16 5:00 PM,2.5 RC1 (Hopper),,,,2.5 GA (Hopper),,,,Repositories,,,0,,,,,"PUT /user/olivergierke
content-type: application/jason
content: indenpendent e.g.: {""alias"" : [""OG"",""Ollie""]}

(Repos-Customization: config.withEntityLookup().forRepository(UserRepository.class, Person::getUsername, UserRepository::findByUsername , see https://jira.spring.io/browse/DATAREST-724)

results in a NumberFormatException:

 ERROR o.s.d.r.w.RepositoryRestExceptionHandler - Failed to convert from type [java.lang.String] to type [java.lang.Long] for value 'olivergierke'; nested exception is java.lang.NumberFormatException: For input string: ""olivergierke""
> org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [java.lang.Long] for value 'olivergierke'; nested exception is java.lang.NumberFormatException: For input string: ""olivergierke""
> at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41) ~[spring-core-4.2.4.RELEASE.jar:4.2.4.RELEASE]
...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:41.617,9223372036854775807,issuemaster(issuemaster),,"0|i09507:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1165|https://github.com/spring-projects/spring-data-rest/issues/1165]. ",,,,,,,,,,,,,,,,,,,,,,,
Repository with EntityLookup not resolving for POST on an Association-Ressource,DATAREST-791,68117,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,PaTom,PaTom,31/Mar/16 8:19 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,01/Apr/16 8:42 AM,2.5 RC1 (Hopper),,,,2.5 GA (Hopper),,,,Repositories,,,0,,,,,"POST /user/olivergierke/friends
content-type: text/uri-list
content: /person/{username}
(username=asterix, user_Id=12345)

Generate SQL with ""user_ID"" in where-Clause, but the ""username"" as param.

select person.user_id as user_id,  ... , person.username as username
from persontable person
where person.user_id='asterix'

URI for User-Resource ""asterix"" is /person/asterix
Using the person/12345 instead of person/asterix as paylod works fine, but  thats not as intended.
(see config.withEntityLookup().forRepository(PersonRepository.class, Person::getUsername, PersonRepository::findByUsername);)

Otherwise, following example works fine:
PATCH /user/olivergierke/
{""friends"": [ ""/person/asterix"" ]}


(see https://jira.spring.io/browse/DATAREST-724)",,,,,,,,,,,,,,,,,DATAREST-724,,,,,,,,,,,,,,,2020-12-31 10:30:41.619,9223372036854775807,issuemaster(issuemaster),,"0|i094zz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1164|https://github.com/spring-projects/spring-data-rest/issues/1164]. ",,,,,,,,,,,,,,,,,,,,,,,
Downgrade to Jackson 2.6.5 until 2.7.2 is released,DATAREST-770,67726,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,19/Feb/16 8:56 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,18/Mar/16 8:49 AM,,,,,2.5 RC1 (Hopper),,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:39.244,9223372036854775807,issuemaster(issuemaster),,"0|hzzy6h:zzzzzzzzzzzzzr",9223372036854775807,9223372036854775807,https://github.com/FasterXML/jackson-databind/issues/1132,,Hopper M1,Hopper RC1,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1144|https://github.com/spring-projects/spring-data-rest/issues/1144]. ",,,,,,,,,,,,,,,,,,,,,,,
Pagination links incorrect when using QueryDSL integration,DATAREST-762,67527,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,dennislaumen,dennislaumen,03/Feb/16 2:50 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,30/Mar/20 9:13 PM,2.4.2 (Gosling SR2),,,,3.3 RC1 (Neumann),,,,Repositories,,,8,,,,,"As described in the [linked StackOverflow question|http://stackoverflow.com/questions/35175515/can-spring-data-rests-querydsl-integration-integrate-with-the-existing-paginati], it appears the pagination links are not correct or complete when using the QueryDSL integration. One would expect applied filters to also be applied to the pagination links but this isn't the case.

I first suspected I might be using the wrong {{Repository}} interface as I was using the {{PagingAndSortingRepository}} and I had the suspicion that the paging and sorting in this repository might interfere with the paging in {{QueryDslPredicateExecutor}}. This isn't the case though as I get the exact same behavior when using {{CrudRepository}} and {{JpaRepository}}.

I attached an example project which demonstrates this.

h4. Reproduction scenario

* Extract the attached ZIP file.
* Run the application: {{./mvnw spring-boot:run}}
* {{GET}} the collection resource: {{curl http://localhost:8080/examples}}
* Verify that the response body contains *correct* pagination links in the {{_links} field.
* Filter the collection resource with QueryDSL: {{curl http://localhost:8080/examples?exampleText=Another%20example}}
* Verify that the response body contains *incorrect* pagination links in the {{_links} field as the applied filter is not present in the links. Clients can not use these links to page through their results.

h4. Additional information

It appears that the generated links are *based* on the result set of the applied filter. For example when applying a stricter filter (e.g. {{curl http://localhost:8080/examples?exampleText=First%20example}} only the {{self}} and {{profile}} links are displayed because the applied filter only returns one result.",,,,,,,,,,,,,,,,,,,,,,,,,,"03/Feb/16 2:29 PM;dennislaumen;spring-data-rest-querydsl-pagination-bug.zip;https://jira.spring.io/secure/attachment/23282/spring-data-rest-querydsl-pagination-bug.zip",,,,,,2020-03-26 19:05:31.894,9223372036854775807,issuemaster(issuemaster),,"0|i091dj:",9223372036854775807,9223372036854775807,http://stackoverflow.com/questions/35175515/can-spring-data-rests-querydsl-integration-integrate-with-the-existing-paginati,,,,,,,,,,,,,"26/Mar/20 7:05 PM;gregturn;I am doing some digging. Grabbed the sample project, updated to Spring Boot 2.2.5.RELEASE, and trimmed out some stuff.

Problem still present itself. Putting checkpoints in places like {{HateoasPageableHandlerMethodArgumentResolver}} (which BTW is actually in Spring Data Commons), I can find no evidence that paging has any awareness of Querydsl.

It's looking like Querydsl is ONLY used in {{QuerydslAwareRootResourceInformationHandlerMethodArgumentResolver}} to process incoming parameters. But it doesn't seem to get held onto. At least not long enough to be used to influence link building.","26/Mar/20 7:23 PM;gregturn;{{QuerydslAwareRootResourceInformationHandlerMethodArgumentResolver.getRepositoryAndPredicate()}} has the inputs sent in, e.g. 

{code}
$ curl -v ""localhost:8080/examples/?exampleText=Another%20example&size=2""
{code}

The two query parameters, {{exampleText}} and {{size}} (with their values) is visible inside this method as a plain old Java {{Map}}. If there were a way to hold onto this information, and pick it up during link creation, I believe it should be carried forward and put into links.

Of course, when building *next* and *prev* links, you must replace certain parameters. But anything not replaced should simply be carried forward.","30/Mar/20 9:13 PM;olivergierke;That's fixed in master and will make it into the Neumann RC1 release tomorrow. For the pagination links, we now use the URI of the incoming request as the base URI. Not backporting for now as it changes the API contract slightly.","01/Apr/20 4:27 PM;lenzls;That's very awesome to hear!

I asked about this issue on gitter merely five or six days ago and now it's already fixed.

 

Thanks to you guys and keep up the good work.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1135|https://github.com/spring-projects/spring-data-rest/issues/1135]. ",,,,,,,,,,,,,,,,,,,
Spring Data REST throws NPE when exposing JSON Schema for a Groovy domai object,DATAREST-754,67391,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,gregturn,gregturn,gregturn,22/Jan/16 2:41 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,25/Jan/16 4:53 PM,2.2.4 (Evans SR4),2.3.2 (Fowler SR2),2.4.2 (Gosling SR2),,2.4.4 (Gosling SR4),2.5 M1 (Hopper),,,,,,0,,,,,"While looking up the JSON Schema for a Groovy domain object-based repository, Spring Data REST threw an NPE. It was trying to parse Groovy's ""metaClass"" attribute, which doesn't exist in a pure Java-based domain object definition.

Need to add groovy-all as a test dependency and then craft some Groovy-based test cases so we can then patch whatever is needed inside PersistentEntityToJsonSchemaConverter to make this work.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:37.317,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/206,"0|i090jj:",9223372036854775807,9223372036854775807,,,Hopper M1,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1125|https://github.com/spring-projects/spring-data-rest/issues/1125]. ",,,,,,,,,,,,,,,,,,,,,,,
ProjectionDefinitionConfiguration does not select projection for most concrete type,DATAREST-747,67288,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,11/Jan/16 6:14 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,11/Jan/16 7:03 PM,2.4.2 (Gosling SR2),,,,2.4.4 (Gosling SR4),2.5 M1 (Hopper),,,,,,0,,,,,"If two projections of the same name are registered for an inheritance hierarchy, the current projection selection algorithm doesn't necessarily prefer the projection defined for the most concrete type.",,,,,,,,,,DATAREST-739,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:36.705,9223372036854775807,issuemaster(issuemaster),,"0|i08zwv:",9223372036854775807,9223372036854775807,,,Hopper M1,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1119|https://github.com/spring-projects/spring-data-rest/issues/1119]. ",,,,,,,,,,,,,,,,,,,,,,,
Rest Endpoints produce HttpMessageNotWritableException sometimes after restarts,DATAREST-743,67262,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,curb47,curb47,07/Jan/16 5:40 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,07/Jan/16 8:56 PM,2.4.2 (Gosling SR2),,,,2.4.4 (Gosling SR4),2.5 M1 (Hopper),,,,,,0,,,,,"Occasionally, the application throws a HttpMessageNotWritableException on start up.  See #DATAREST-716.  It appears this is still happening in Gosling SR2 (Spring Boot 1.3.1).

{noformat}
2016-01-06 19:27:54.639  INFO 1783 --- [ost-startStop-1] o.a.catalina.util.SessionIdGenerator     : Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [9,898] milliseconds.
Jan 06, 2016 7:27:54 PM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler [""http-bio-8080""]
Jan 06, 2016 7:27:54 PM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler [""ajp-bio-8009""]
Jan 06, 2016 7:27:54 PM org.apache.catalina.startup.Catalina start
INFO: Server startup in 59514 ms
Jan 06, 2016 7:27:54 PM org.apache.catalina.core.ApplicationContext log
INFO: Initializing Spring FrameworkServlet 'dispatcherServlet'
2016-01-06 19:27:54.817  INFO 1783 --- [bio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization started
2016-01-06 19:27:54.854  INFO 1783 --- [bio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization completed in 28 ms
2016-01-06 19:27:58.029  WARN 1783 --- [io-8080-exec-11] .w.s.m.s.DefaultHandlerExceptionResolver : Failed to write HTTP message: org.springframework.http.converter.HttpMessageNotWritableException: Could not write content: org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$ProjectionResourceContentSerializer cannot be cast to com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer (through reference chain: org.springframework.hateoas.PagedResources[""_embedded""]->java.util.UnmodifiableMap[""activities""]->java.util.ArrayList[0]->org.springframework.data.rest.webmvc.json.ProjectionResource[""content""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$ProjectionResourceContentSerializer cannot be cast to com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer (through reference chain: org.springframework.hateoas.PagedResources[""_embedded""]->java.util.UnmodifiableMap[""activities""]->java.util.ArrayList[0]->org.springframework.data.rest.webmvc.json.ProjectionResource[""content""])
{noformat}",Spring Boot 1.3.1,,,,,,,,,,,,,,,,DATAREST-716,,,,,,,,,,,,,,,2016-01-07 18:11:11.422,9223372036854775807,issuemaster(issuemaster),,"0|i08zr3:",9223372036854775807,9223372036854775807,http://stackoverflow.com/questions/32572525/spring-data-rest-2-4-intermittent-error-classcastexception,,,,,,,,,,,,,"07/Jan/16 6:11 PM;olivergierke;Looks like we really have to implement {{UnwrappingSerializer}}. I'll get right to it.","07/Jan/16 8:56 PM;olivergierke;This should be fixed in master and the bugfix branch for Gosling. In the fix for DATAREST-716 I missed {{ProjectionResourceContentSerializer}} which suffered from the same mutability problem as {{ProjectionSerializer}}. This should be fixed now so that the instances don't get mutated anymore and the suspicious code path casting the instance to {{UnwrappingBeanSerializer}} shouldn't actually be triggered anymore as the unwrapping instances are just created on the fly while the default ones (which get tested by that code path) remain non-unwrapping.

Feel free to give the snapshots a try!","08/Jan/16 5:04 PM;curb47;Great! Thank you for the quick turn-around!","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1116|https://github.com/spring-projects/spring-data-rest/issues/1116]. ",,,,,,,,,,,,,,,,,,,,
embeddeds are not working with Jackson REQUIRE_SETTERS_FOR_GETTERS configuration,DATAREST-742,67251,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Works as Designed,olivergierke,MichaReiser,MichaReiser,07/Jan/16 6:15 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,11/Jan/16 5:36 PM,2.4.2 (Gosling SR2),,,,,,,,,,,0,mvc,,,,"The embeddeds are not emitted for PersistedEntityResources when MapperFeature.REQUIRE_SETTERS_FOR_GETTERS is used. Add an explicit JsonProperty annotation to enforce JSON output for getEmbedded in the PersistentEntityResourceSerializer

Fixed with Jackson 2.6.4 #1013 (https://github.com/FasterXML/jackson-databind/issues/1013)
So if someone can close the issue but leave it for documentation purpose...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2016-01-07 07:14:27.954,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/204,"0|i08zon:",9223372036854775807,9223372036854775807,https://github.com/FasterXML/jackson-databind/issues/1013,,,,,,,,,,,,,"07/Jan/16 7:14 AM;olivergierke;I wouldn't mind applying the fix nonetheless as it doesn't seem to hurt and would allow us to get this to work on older Jackson generations (Fowler is still on 2.5). So I am still up for a test case on the PR and would happily apply it then :).","07/Jan/16 10:59 AM;MichaReiser;Ok  I will try to implement one... Tried this morning and failed because of the newer Jackson version. It's hard to verify that the test is working...","11/Jan/16 5:36 PM;olivergierke;Alright. Gosling is already on 2.6.x as well. I think we can just leave it as is and recommend people to upgrade to Jackson 2.6.4 in case they run into the issue.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1115|https://github.com/spring-projects/spring-data-rest/issues/1115]. ",,,,,,,,,,,,,,,,,,,,
Deserialization of association URIs does not consider EntityLookups,DATAREST-741,67242,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,06/Jan/16 9:12 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,11/Jan/16 9:19 PM,,,,,2.5 M1 (Hopper),,,,,,,1,,,,,,,,,,,,,,,,,,,,,,DATAREST-724,,,,,,,,,,,,,,,2020-12-31 10:30:35.925,9223372036854775807,issuemaster(issuemaster),,"0|i08zmn:",9223372036854775807,9223372036854775807,,,Hopper M1,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1114|https://github.com/spring-projects/spring-data-rest/issues/1114]. ",,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException,DATAREST-723,66980,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,igler,igler,07/Dec/15 4:02 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,16/Dec/15 5:01 PM,2.4.1 (Gosling SR1),,,,2.4.2 (Gosling SR2),2.5 M1 (Hopper),,,,,,0,,,,,"From time to time I am getting the following ConcurrentModificationException. Hopefully the stack trace helps:

{noformat}
2015-12-03 14:54:42,255 ERROR    o.a.c.c.C.[.[localhost].[/].[dispatcherServlet]: 182 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.util.ConcurrentModificationException] with root cause
java.util.ConcurrentModificationException: null
	at java.util.HashMap$HashIterator.nextNode(HashMap.java:1429) ~[na:1.8.0_45]
	at java.util.HashMap$ValueIterator.next(HashMap.java:1458) ~[na:1.8.0_45]
	at org.springframework.data.rest.core.mapping.MappingResourceMetadata$PropertyMappings.getMappingFor(MappingResourceMetadata.java:186) ~[spring-data-rest-core-2.4.1.RELEASE.jar:na]
	at org.springframework.data.rest.core.mapping.MappingResourceMetadata.getProperty(MappingResourceMetadata.java:118) ~[spring-data-rest-core-2.4.1.RELEASE.jar:na]
	at org.springframework.data.rest.core.mapping.RepositoryAwareResourceMetadata.getProperty(RepositoryAwareResourceMetadata.java:93) ~[spring-data-rest-core-2.4.1.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.doWithReferencedProperty(RepositoryPropertyReferenceController.java:427) ~[spring-data-rest-webmvc-2.4.1.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.followPropertyReference(RepositoryPropertyReferenceController.java:149) ~[spring-data-rest-webmvc-2.4.1.RELEASE.jar:na]
	at sun.reflect.GeneratedMethodAccessor427.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_45]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_45]
	at org.springsource.loaded.ri.ReflectiveInterceptor.jlrMethodInvoke(ReflectiveInterceptor.java:1432) ~[springloaded-1.2.4.RELEASE.jar:1.2.4.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:222) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:814) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:737) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.0.28.jar:8.0.28]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:242) ~[spring-boot-actuator-1.3.0.RELEASE.jar:1.3.0.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:111) ~[spring-boot-actuator-1.3.0.RELEASE.jar:1.3.0.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:207) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:176) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:87) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:103) ~[spring-boot-actuator-1.3.0.RELEASE.jar:1.3.0.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:217) ~[tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) [tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:676) [tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142) [tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518) [tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091) [tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:673) [tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1500) [tomcat-embed-core-8.0.28.jar:8.0.28]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1456) [tomcat-embed-core-8.0.28.jar:8.0.28]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.0.28.jar:8.0.28]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:33.863,9223372036854775807,issuemaster(issuemaster),,"0|i08y0v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1094|https://github.com/spring-projects/spring-data-rest/issues/1094]. ",,,,,,,,,,,,,,,,,,,,,,,
HAL Browser default URI doesn't respect context path,DATAREST-720,66944,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,03/Dec/15 2:01 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,01/Apr/16 11:00 AM,2.3.2 (Fowler SR2),2.4.1 (Gosling SR1),,,2.4.5 (Gosling SR5),2.5 GA (Hopper),,,API Documentation,,,0,,,,,"If a Spring Data REST application is deployed into a servlet container the HAL browser points to the server root, not the context path under which the the API is deployed.

We should switch to an absolute URI in the Explorer field.",,,,,,,,,,,,,,,,,,,,,,DATAREST-565,,,,,,,,,,2020-12-31 10:30:33.44,9223372036854775807,issuemaster(issuemaster),,"0|hzzy6h:zzzzqzzr",9223372036854775807,9223372036854775807,,,Hopper M1,Hopper RC1,Hopper GA,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1089|https://github.com/spring-projects/spring-data-rest/issues/1089]. ",,,,,,,,,,,,,,,,,,,,,,,
Rest Endpoints produce HttpMessageNotWritableException sometimes after restarts,DATAREST-716,66875,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,Tim.Meissner,Tim.Meissner,27/Nov/15 9:01 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,07/Jan/16 2:23 PM,2.4.1 (Gosling SR1),2.5 M1 (Hopper),,,2.4.2 (Gosling SR2),2.5 M1 (Hopper),,,Repositories,,,1,,,,,"In some cases after application start some rest repositories fail to handle the http request and throw a HttpMessageNotWritableException (see StackOverflow reference)

{noformat}
2015-11-27 09:56:19.015  WARN 1207 --- [nio-9000-exec-9] .w.s.m.s.DefaultHandlerExceptionResolver : Failed to write HTTP message: org.springframework.http.converter.HttpMessageNotWritableException: Could not write content: org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$ProjectionResourceContentSerializer cannot be cast to com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer (through reference chain: org.springframework.hateoas.PagedResources[""_embedded""]->java.util.UnmodifiableMap[""permissions""]->java.util.ArrayList[0]->org.springframework.data.rest.webmvc.json.ProjectionResource[""content""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$ProjectionResourceContentSerializer cannot be cast to com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer (through reference chain: org.springframework.hateoas.PagedResources[""_embedded""]->java.util.UnmodifiableMap[""permissions""]->java.util.ArrayList[0]->org.springframework.data.rest.webmvc.json.ProjectionResource[""content""])
2015-11-27 09:56:19.024  WARN 1207 --- [nio-9000-exec-2] .w.s.m.s.DefaultHandlerExceptionResolver : Failed to write HTTP message: org.springframework.http.converter.HttpMessageNotWritableException: Could not write content: org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$ProjectionResourceContentSerializer cannot be cast to com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer (through reference chain: org.springframework.hateoas.PagedResources[""_embedded""]->java.util.UnmodifiableMap[""userroles""]->java.util.ArrayList[0]->org.springframework.data.rest.webmvc.json.ProjectionResource[""content""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$ProjectionResourceContentSerializer cannot be cast to com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer (through reference chain: org.springframework.hateoas.PagedResources[""_embedded""]->java.util.UnmodifiableMap[""userroles""]->java.util.ArrayList[0]->org.springframework.data.rest.webmvc.json.ProjectionResource[""content""])
{noformat}
",Spring Boot 1.3.0,,,,,,,,,,,,,,,DATAREST-697,,,,,,DATAREST-743,,,,,,,,,,2016-01-06 00:01:47.327,9223372036854775807,issuemaster(issuemaster),,"0|i08xdz:",9223372036854775807,9223372036854775807,http://stackoverflow.com/questions/32572525/spring-data-rest-2-4-intermittent-error-classcastexception,,,,,,,,,,,,,"06/Jan/16 12:01 AM;nugs;The root cause of this seems to lie in the jackson-databind library:

{{UnwrappingBeanPropertyWriter.java:214}}
{code}
        if (serializer.isUnwrappingSerializer()) {
            t = NameTransformer.chainedTransformer(t, ((UnwrappingBeanSerializer) serializer)._nameTransformer);
        }
{code}

In the case of the {{ProjectionResourceContentSerializer}}, the {{isUnwrappingSerialzer()}} method returns  true under certain conditions (if {{unwrappingSerializer(NameTransformer unwrapper)}} is invoked on it). As {{ProjectionResourceContentSerializer}} doesn't extend {{UnwrappingBeanSerializer}} we end up with this blowing up.

Now, I'm not a fan of how that's been implemented - a boolean check guarding a class cast which can end up with a blow up like this isn't great - but I think there's an issue within {{PersistentEntityJackson2Module}} that might be causing this (unverified at this time). At 2 points, a call is made to {{unwrappingSerializer(null)}} which is probably intended to ensure Unwrapping is disabled, but for the implementation in {{PersistentEntityJackson2Module}} it has what I imagine is the unintended consequence of setting {{isUnwrappingSerializer}} to true:

{code}
		public JsonSerializer<ProjectionResourceContent> unwrappingSerializer(NameTransformer unwrapper) {

			this.unwrapping = true;
			return this;
		}
{code}

A null check here would ensure the property is never inadvertently set to true, but I don't think the implementation as it stands will ever do anything practical anyway - I presume to have any impact (and be compatible with the jackson-databind code) we'd need to return an instance of {{UnwrappingBeanSerializer}} here.

At least in the short term though a null guard should be put in place which should alleviate this issue (though as I've said this is unconfirmed - I've only had time to trace the code through from stack traces, not execution - as the actual cause but looks a bad smell at the very least).
","06/Jan/16 12:15 AM;nugs;Actually taking a bit more of a look, even a null check probably isn't sufficient - the unwrapping property should be always set to false until a proper UnwrappingBeanSerializer can be returned as other code within jackson-databind invokes the {{unwrappingSerializer}} as well which will have the consequence of potentially leading to this failure.

Interim solution - remove {{this.unwrapping = true;}} @PersistentEntityJackson2Module:566","06/Jan/16 7:16 AM;olivergierke;Sounds like a duplicate of DATREST-697, which was fixed for Gosling SR2 and is already available via Spring Boot 1.3.1. Would you mind giving that a try?","06/Jan/16 9:24 AM;nugs;Looks good to me Oliver. Upgrading from Gosling-RELEASE to SR2 seems to resolve the issue as you've said.","06/Jan/16 10:13 AM;olivergierke;Awesome, happy coding! :)","07/Jan/16 12:36 AM;curb47;It looks like I am still seeing this occur in Spring Boot 1.3.1.

{noformat}
2016-01-06 19:27:54.639  INFO 1783 --- [ost-startStop-1] o.a.catalina.util.SessionIdGenerator     : Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [9,898] milliseconds.
Jan 06, 2016 7:27:54 PM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler [""http-bio-8080""]
Jan 06, 2016 7:27:54 PM org.apache.coyote.AbstractProtocol start
INFO: Starting ProtocolHandler [""ajp-bio-8009""]
Jan 06, 2016 7:27:54 PM org.apache.catalina.startup.Catalina start
INFO: Server startup in 59514 ms
Jan 06, 2016 7:27:54 PM org.apache.catalina.core.ApplicationContext log
INFO: Initializing Spring FrameworkServlet 'dispatcherServlet'
2016-01-06 19:27:54.817  INFO 1783 --- [bio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization started
2016-01-06 19:27:54.854  INFO 1783 --- [bio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization completed in 28 ms
2016-01-06 19:27:58.029  WARN 1783 --- [io-8080-exec-11] .w.s.m.s.DefaultHandlerExceptionResolver : Failed to write HTTP message: org.springframework.http.converter.HttpMessageNotWritableException: Could not write content: org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$ProjectionResourceContentSerializer cannot be cast to com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer (through reference chain: org.springframework.hateoas.PagedResources[""_embedded""]->java.util.UnmodifiableMap[""activities""]->java.util.ArrayList[0]->org.springframework.data.rest.webmvc.json.ProjectionResource[""content""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$ProjectionResourceContentSerializer cannot be cast to com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer (through reference chain: org.springframework.hateoas.PagedResources[""_embedded""]->java.util.UnmodifiableMap[""activities""]->java.util.ArrayList[0]->org.springframework.data.rest.webmvc.json.ProjectionResource[""content""])
{noformat}
","07/Jan/16 2:23 PM;olivergierke;Please don't reopen tickets that have been marked as fixed on already released versions (Gosling SR2 in this case) as this will create inconsistencies regarding the changelogs. Feel free to create a new ticket, which we can link to this one then.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1085|https://github.com/spring-projects/spring-data-rest/issues/1085]. ",,,,,,,,,,,,,,,,
Search a repository that implements QueryDslPredicateExecutor by a related Entity doesn't work anymore,DATAREST-712,66838,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,m4ng0,m4ng0,24/Nov/15 10:19 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,24/Nov/15 2:38 PM,2.4.1 (Gosling SR1),,,,2.4.2 (Gosling SR2),2.5 M1 (Hopper),,,,,,0,,,,,"If you define a repository this way:

{code:java}
@RepositoryRestResource(collectionResourceRel = ""people"", path = ""people"")
public interface PersonRepository extends PagingAndSortingRepository<Person, Long> {
  Page<Person> findByAddress(@Param(""address"") Address address, Pageable p);
}
{code}

where {{Address}} in another Entity, you can invoke the search method like this:
http://localhost:8080/people/search/findByAddress?address=/addresses/1
and everything works like a charm.

Now suppose you want to use QueryDSL predicates on the repository, so the repository must implement {{QueryDslPredicateExecutor}} interface:

{code:java}
@RepositoryRestResource(collectionResourceRel = ""people"", path = ""people"")
public interface PersonRepository extends PagingAndSortingRepository<Person, Long>, QueryDslPredicateExecutor<Person>
{
  Page<Person> findByAddress(@Param(""address"") Address address, Pageable p);
}
{code}

By implementing this interface something changes in the REST behaviour of the repository and if you try to invoke the same search method:
http://localhost:8080/people/search/findByAddress?address=/addresses/1
you get this exception:


{noformat}
org.springframework.core.convert.ConversionFailedException: Failed to convert from type java.lang.String to type java.lang.Long for value '/addresses/1'; nested exception is java.lang.NumberFormatException: For input string: ""/addresses/1""
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41) ~[spring-core-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192) ~[spring-core-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:176) ~[spring-core-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.data.repository.support.DomainClassConverter$ToEntityConverter.convert(DomainClassConverter.java:159) ~[spring-data-commons-1.11.1.RELEASE.jar:na]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35) ~[spring-core-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192) ~[spring-core-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.data.querydsl.binding.QuerydslPredicateBuilder.convertToPropertyPathSpecificType(QuerydslPredicateBuilder.java:217) ~[spring-data-commons-1.11.1.RELEASE.jar:na]
	at org.springframework.data.querydsl.binding.QuerydslPredicateBuilder.getPredicate(QuerydslPredicateBuilder.java:109) ~[spring-data-commons-1.11.1.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.config.QuerydslAwareRootResourceInformationHandlerMethodArgumentResolver.postProcess(QuerydslAwareRootResourceInformationHandlerMethodArgumentResolver.java:88) ~[spring-data-rest-webmvc-2.4.1.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.config.RootResourceInformationHandlerMethodArgumentResolver.resolveArgument(RootResourceInformationHandlerMethodArgumentResolver.java:92) ~[spring-data-rest-webmvc-2.4.1.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.config.RootResourceInformationHandlerMethodArgumentResolver.resolveArgument(RootResourceInformationHandlerMethodArgumentResolver.java:40) ~[spring-data-rest-webmvc-2.4.1.RELEASE.jar:na]
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:78) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	[...]
Caused by: java.lang.NumberFormatException: For input string: ""/addresses/1""
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) ~[na:1.8.0_66]
	at java.lang.Long.parseLong(Long.java:578) ~[na:1.8.0_66]
	at java.lang.Long.valueOf(Long.java:803) ~[na:1.8.0_66]
	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:197) ~[spring-core-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.core.convert.support.StringToNumberConverterFactory$StringToNumber.convert(StringToNumberConverterFactory.java:61) ~[spring-core-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.core.convert.support.StringToNumberConverterFactory$StringToNumber.convert(StringToNumberConverterFactory.java:48) ~[spring-core-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:425) ~[spring-core-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35) ~[spring-core-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	... 60 common frames omitted
{noformat}

Trying to use the ""previous"" format (by passing the id of the related entity)
http://localhost:8080/people/search/findByAddress?address=1
doesn't work either (this used to work with 2.2.3.RELEASE):

{noformat}
java.lang.IllegalArgumentException: Cannot resolve URI 1. Is it local or remote? Only local URIs are resolvable.
	at org.springframework.data.rest.core.UriToEntityConverter.convert(UriToEntityConverter.java:114) ~[spring-data-rest-core-2.4.1.RELEASE.jar:na]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35) ~[spring-core-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192) ~[spring-core-4.2.3.RELEASE.jar:4.2.3.RELEASE]
	at org.springframework.data.repository.support.ReflectionRepositoryInvoker.convert(ReflectionRepositoryInvoker.java:248) ~[spring-data-commons-1.11.1.RELEASE.jar:na]
	at org.springframework.data.repository.support.ReflectionRepositoryInvoker.prepareParameters(ReflectionRepositoryInvoker.java:238) ~[spring-data-commons-1.11.1.RELEASE.jar:na]
	at org.springframework.data.repository.support.ReflectionRepositoryInvoker.invokeQueryMethod(ReflectionRepositoryInvoker.java:203) ~[spring-data-commons-1.11.1.RELEASE.jar:na]
	at org.springframework.data.rest.core.support.UnwrappingRepositoryInvokerFactory$UnwrappingRepositoryInvoker.invokeQueryMethod(UnwrappingRepositoryInvokerFactory.java:153) ~[spring-data-rest-core-2.4.1.RELEASE.jar:na]
	at org.springframework.data.querydsl.QuerydslRepositoryInvokerAdapter.invokeQueryMethod(QuerydslRepositoryInvokerAdapter.java:149) ~[spring-data-commons-1.11.1.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.RepositorySearchController.executeQueryMethod(RepositorySearchController.java:313) ~[spring-data-rest-webmvc-2.4.1.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.RepositorySearchController.executeSearch(RepositorySearchController.java:177) ~[spring-data-rest-webmvc-2.4.1.RELEASE.jar:na]
{noformat}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-11-24 14:38:14.95,9223372036854775807,issuemaster(issuemaster),,"0|i08x5r:",9223372036854775807,9223372036854775807,,,Hopper M1,,,,,,,,,,,"24/Nov/15 2:38 PM;olivergierke;That's actually a bug we introduced in 2.4.0 with the general support of Querydsl predicates on collection resources. I've tweaked this to now apply to exactly those (i.e. {{/customers}} etc.) so that they don't get applied to query executions by accident. Back ported into the Gosling maintenance branch. Feel free to give the snapshots a try.","24/Nov/15 3:55 PM;m4ng0;I confirm that with the snapshot version it works as expected. Thank you for the fix!","05/Jan/17 9:00 PM;Doogie;There is another scenario that results in exactly the same error:  When an @Entity references itself, e.g. when you need to store a tree structure in the DB.


{code:java}
@Entity
public class NodeModel {
  public String nodeName;
  @ManyToOne(optional = false)
  @NotNull
  NodeModel parentNode;
  [...]
}
{code}

exposed as a @RepositoryRestResource 

When you try to POST a new Node (with a link to an existing parent node)

{code:java}
{
   nodeName: ""example name"",
   parentNode: ""/api/nodes/47""
}
{code}

then the exaxt same error message is thrown.","05/Jan/17 9:11 PM;Doogie;Sorry, my fault:   You get the same error, when you misspell the reference to the parentNode and happen to append a string to it:

{code:java}
{
   nodeName: ""example name"",
   parentNode: ""/api/nodes/47/someString""
}
{code}

The ""someString"" is completely wrong here. And also gives that error message.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1081|https://github.com/spring-projects/spring-data-rest/issues/1081]. ",,,,,,,,,,,,,,,,,,,
RepositoryExceptionHandler passes null instead of exception,DATAREST-706,66714,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,13/Nov/15 4:28 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,13/Nov/15 4:35 PM,,,,,2.3.3 (Fowler SR3),2.4.1 (Gosling SR1),2.5 M1 (Hopper),,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:31.816,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/200,"0|i08wen:",9223372036854775807,9223372036854775807,,,Gosling SR1,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1075|https://github.com/spring-projects/spring-data-rest/issues/1075]. ",,,,,,,,,,,,,,,,,,,,,,,
Cannot PUT versioned entity returned by spring-data-rest,DATAREST-705,66709,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,koscejev,koscejev,13/Nov/15 12:10 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,20/Nov/15 3:58 PM,2.4 GA (Gosling),,,,2.3.3 (Fowler SR3),2.4.2 (Gosling SR2),2.5 M1 (Hopper),,,,,0,,,,,"I would expect it to be possible to execute PUT by simply supplying all fields returned by GET. However, this is currently broken as a consequence of DATAREST-160. 

Now when an entity is exposed via REST API (either as part of a list, or directly), it's returned without version property. However, when PUT operation is performed, version property can be required, since the whole entity is persisted (as opposed to PATCH logic where only changed fields need to be supplied). This is true, for example, for JPA, which will check version and refuse updating if version is missing.

This means that REST API client is expected to send a property that it never received. In fact, the client might not even be aware that such property exists, how it's called, and what value it should contain.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-11-20 15:58:00.727,9223372036854775807,issuemaster(issuemaster),,"0|i08wdj:",9223372036854775807,9223372036854775807,,,Hopper M1,,,,,,,,,,,"13/Nov/15 12:11 PM;koscejev;It seems that to be consistent Spring-Data-Rest should either:
1) populate version property with value of ETag on incoming entities, or
2) return version property when GET is performed (perhaps not for lists, but at least for single entities)

Also, if the first option is chosen, it seems redundant to load entity from DB and merge incoming entity with existing one, if module (JPA) will check it anyway. Perhaps each module can specify whether it will check version itself, so Spring-Data-Rest doesn't have to handle ETag directly.","20/Nov/15 3:58 PM;olivergierke;This should be fixed. I explicitly removed the wiping for version and identifier properties from {{DomainObjectReader}} to make sure we preserve the server side values. For PUT scenarios this now gives the following situation:

1. PUTting the document as received will not wipe the version property, thus use the value loaded from the server and only fail (cause a conflict) in case someone else updates the same entity in between load, application of the sent payload and saving. All other requests will strictly write the sent payload.
2. Conditional PUTs can be issued by adding the {{If-Match}} header and using the {{ETag}} header received in the original request as it's evaluated independently of the payload merge and will return {{412 Precondition failed}} as defined by the HTTP spec.

Does that make sense?","20/Nov/15 4:44 PM;koscejev;That would solve the original issue, yes.

What do you think about the fact that an unnecessary DB operation is performed, when module (JPA) supports optimistic locking natively, and both ID (in URL) and version (in ETag) are provided? In this specific scenario it would be more efficient to simply:
1) deserialize incoming entity
2) apply ID from URL (fail if deserialized entity already has different ID specified)
3) apply version from ETag (fail if different)
4) persist

Perhaps this could be an additional feature? ""Increase performance by delegating optimistic locking to underlying module.""","21/Nov/15 10:53 AM;olivergierke;Interesting thoughts. I am fearing this approach would cause quite a bit of trouble or would only be suitable in very edge cases due the following problems:

1. *The resource representation you might see doesn't have to be a 1:1 representation of the underlying entity.* Just imagine one property being {{@JsonIgnore}}-ed. That means the client would never see it. If we apply the suggested algorithm, the {{PUT}} request would wipe out the properties that were ignored.
2. *I think it's an anti-pattern to delay the recognition of a potential optimistic locking exception.* As it basically means you hand object instances through business logic (e.g. Spring Data REST pre-save events) although you could've recognized they would never even have to be fired in the first place just to eventually run into the database layer rejecting the update.

To summarize we're basically optimizing for correctness instead of backend update performance by default. You can always go ahead an simply override the {{PUT}} method for a particular item resource if performance is really bad and use more immediate means (e.g. a dedicated repository method that optimizes the call).","21/Nov/15 12:20 PM;koscejev;Regarding @JsonIgnore, I see that you're basing additional features on top of this, so yes, increased performance would have to come at the cost of purposely avoiding using those features. To be honest, until you said this, I didn't realize spring-data-rest actually allows some fields to be ignored and not wiped on update. It's an interesting feature. So losing this (and potentially other) features sounds like a big drawback, but at the same time I can see it being helpful to skip the check, because sometimes increased performance is more important than secondary features.

I see your point about delaying the recognition, but this is not so clear-cut. This is not just about rearranging things in correct order, so you can skip some things, because other things are more likely to fail. The whole idea of optimistic locking is that you don't expect to hit the lock often (hence ""optimistic""). You expect most of the operations to be fine and you want increased performance that comes with optimistic lock (as opposed to the pessimistic one). Adding an additional check with every operation is exactly the opposite of what one would expect from optimistic locking. In other words, adding that check means you're being pessimistic. :)

Considering the business logic point (e.g., pre-save events), doing an additional check still doesn't prevent the situation when underlying module will reject the update. So it might still happen that business logic events run through, and then update fails. So the system becomes less consistent/predictable with the idea that you might get increased performance from it (by skipping business logic sometimes). But while the drawback (inconsistency) is introduced, the benefit is questionable - this is because, like I tried to explain in the previous point, the idea of optimistic lock is to allow ""good"" operations to pass through with as few checks as possible (= as fast as possible) at the cost of perhaps losing some performance when ""bad"" operations occur. Because if we were properly pessimistic in the first place and locked the record, then ""bad"" operation would've been prevented sooner - but that would be pessimistic lock.

Basically, I'm not saying this has to be fixed. I'm saying this implementation doesn't follow the core idea of optimistic locking as strictly as it could. Indeed, if someone wanted increased performance, they could create a workaround. The question is: should it really be a workaround or could there be a feature specifically for this?

Anyhow, thanks for fixing this bug, we're looking forward to the next version! ;)","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1074|https://github.com/spring-projects/spring-data-rest/issues/1074]. ",,,,,,,,,,,,,,,,,,
NPE when updating resource via PUT,DATAREST-701,66629,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,jsalmon,jsalmon,09/Nov/15 4:01 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,10/Nov/15 1:09 PM,2.4 GA (Gosling),,,,2.3.3 (Fowler SR3),2.4.1 (Gosling SR1),2.5 M1 (Hopper),,,,,0,,,,,"I'm not sure if this is a regression, but it is basically the same issue as [DATAREST-491|https://jira.spring.io/browse/DATAREST-491] and [DATAREST-605|https://jira.spring.io/browse/DATAREST-605]. I'm seeing this using spring-boot-starter-data-rest:1.3.0.M5.

Check out the [demo project|https://github.com/jlsalmon/mongo_data_rest] and do the following to reproduce:

Create a resource:
{code}
curl -v -X POST http://localhost:8080/tickets -H ""Content-Type: application/json"" -d '{""properties"" : {""a"": ""1"", ""b"": {""c"": ""2""}}}'
{code}

Try to update the properties of the resource via PUT:
{code}
curl -v -X PUT http://localhost:8080/tickets/5640c0b6b760828633d03cca -H ""Content-Type: application/json"" -d '{""properties"" : {""a"": ""3"", ""b"": {""c"": ""4""}}}'
{code}

The following NPE is observed:

{code}
org.springframework.http.converter.HttpMessageNotReadableException: Could not read an object of type class demo.Ticket from the request!; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: Could not read payload!; nested exception is java.lang.NullPointerException
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.readPutForUpdate(PersistentEntityResourceHandlerMethodArgumentResolver.java:206) ~[spring-data-rest-webmvc-2.4.0.RELEASE.jar:na]
	...
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.0.28.jar:8.0.28]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_25]
Caused by: org.springframework.http.converter.HttpMessageNotReadableException: Could not read payload!; nested exception is java.lang.NullPointerException
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.merge(DomainObjectReader.java:138) ~[spring-data-rest-webmvc-2.4.0.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.readPut(DomainObjectReader.java:130) ~[spring-data-rest-webmvc-2.4.0.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.config.JsonPatchHandler.applyPut(JsonPatchHandler.java:134) ~[spring-data-rest-webmvc-2.4.0.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.readPutForUpdate(PersistentEntityResourceHandlerMethodArgumentResolver.java:203) ~[spring-data-rest-webmvc-2.4.0.RELEASE.jar:na]
	... 52 common frames omitted
Caused by: java.lang.NullPointerException: null
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.getJacksonProperties(DomainObjectReader.java:254) ~[spring-data-rest-webmvc-2.4.0.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.doMerge(DomainObjectReader.java:158) ~[spring-data-rest-webmvc-2.4.0.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.doMergeNestedMap(DomainObjectReader.java:238) ~[spring-data-rest-webmvc-2.4.0.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.doMerge(DomainObjectReader.java:196) ~[spring-data-rest-webmvc-2.4.0.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.merge(DomainObjectReader.java:136) ~[spring-data-rest-webmvc-2.4.0.RELEASE.jar:na]
	... 55 common frames omitted
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-11-09 17:19:01.872,9223372036854775807,issuemaster(issuemaster),,"0|i08vwf:",9223372036854775807,9223372036854775807,,,Gosling SR1,,,,,,,,,,,"09/Nov/15 5:19 PM;olivergierke;Thanks for filing that one Justin. As you already have a sample project in place, would you mind adding a test case that executes the requests so that we have something easily repeatable?","09/Nov/15 5:48 PM;olivergierke;Nevermind, I got it reproduced in a small test case :). ","09/Nov/15 5:50 PM;jsalmon;Ok, great, I won't update my project then. As always, thanks for the swift response Oliver!","10/Nov/15 1:09 PM;olivergierke;This should be fixed in master and the bugfix branches for Fowler and Gosling.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1072|https://github.com/spring-projects/spring-data-rest/issues/1072]. ",,,,,,,,,,,,,,,,,,,
"On Java 8, link templates to search resources using pagination contain pageable variable",DATAREST-699,66610,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,06/Nov/15 3:28 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,06/Nov/15 3:40 PM,2.3.2 (Fowler SR2),2.4 GA (Gosling),,,2.3.3 (Fowler SR3),2.4.1 (Gosling SR1),2.5 M1 (Hopper),,API Documentation,,,0,,,,,"When using Java 8 with parameter name discovery added, the links pointing to search methods using a {{Pageable}} contain a {{pageable}} URI template variable. This is caused by the {{RepositoryMethodResourceMapping}} only dropping parameters without names (assuming {{Pageable}} and {{Sort}} were never annotated with {{@Param}}).

We should explicitly exclude parameters of these types from being exposed as explicit search method parameters.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:31.161,9223372036854775807,issuemaster(issuemaster),,"0|i08vrz:",9223372036854775807,9223372036854775807,,,Gosling SR1,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1020|https://github.com/spring-projects/spring-data-rest/issues/1020]. ",,,,,,,,,,,,,,,,,,,,,,,
Returned size is the -1 from the parameter that is given,DATAREST-698,66489,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,ptahchiev,ptahchiev,28/Oct/15 11:22 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,02/Nov/15 10:20 AM,2.4 GA (Gosling),,,,2.4.1 (Gosling SR1),2.5 M1 (Hopper),,,,,,0,,,,,"I'm calling this url:

{code}
https://solar.local:8112/storefront/rest/product?projection=search&_dc=1445984507953&page=2&size=10
{code}

and I only get 9 results back. As far as I understand the reason is in {{PageableHandlerMethodArgumentResolver:240}} and there we see the following:
{code}

		int page = StringUtils.hasText(pageString) ? parseAndApplyBoundaries(pageString, Integer.MAX_VALUE)
				: defaultOrFallback.getPageNumber();
		int pageSize = StringUtils.hasText(pageSizeString) ? parseAndApplyBoundaries(pageSizeString, maxPageSize)
				: defaultOrFallback.getPageSize();
{code} 

The same method {{parseAndApplyBoundaries}} is called for both {{page}} and {{size}} parameters. And in this method there is a check if I'm using {{oneIndexedParameters}} which is yes in my case. Then it will substract -1 because I'm using {{oneIndexedParameters}}:
{code}
int parsed = Integer.parseInt(parameter) - (oneIndexedParameters ? 1 : 0);
{code}

so now it becomes 9. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-11-02 10:20:56.892,9223372036854775807,issuemaster(issuemaster),,"0|i08v67:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02/Nov/15 10:20 AM;olivergierke;I think that's a duplicate of DATACMNS-761, which is already fixed for Gosling SR1 and Hopper. Feel free to give the snapshots a spin.","02/Nov/15 3:48 PM;ptahchiev;Just to confirm that the latest {{Hopper}} SNAPSHOT works as expected.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1070|https://github.com/spring-projects/spring-data-rest/issues/1070]. ",,,,,,,,,,,,,,,,,,,,,
ProjectionSerializer doesn't react to unwrapping mode correctly,DATAREST-697,66462,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,adamp,adamp,26/Oct/15 7:40 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,10/Dec/15 2:07 PM,2.4 GA (Gosling),,,,2.4.2 (Gosling SR2),2.5 M1 (Hopper),,,Repositories,,,0,,,,,"Previously, it was possible to have a controller method that returned a Resource-wrapped {{@Projection}} interface of a domain type. Somewhere between 2.3.2 and 2.4, this functionality was broken. 

The below code sample works fine in SDR 2.3.2, but in 2.4 and current SNAPSHOTs it results in the following error: 

{code:java}
Failed to write HTTP message: org.springframework.http.converter.HttpMessageNotWritableException: Could not write content: Can not start an object, expecting field name; nested exception is com.fasterxml.jackson.core.JsonGenerationException: Can not start an object, expecting field name
{code} 

Testing this out, serializing a Resource-wrapped POJO works fine, a Resource-wrapped domain type works fine, a non-wrapped Projection works fine, but a Resource-wrapped projection fails with the above error. Using the SDR repository controller to return the projection works fine, too.

This feels like a bug? 

Below is sample code for reproducing this. Tested with Spring Boot 1.2.7 and SDR 2.3.2 (working) and Spring Boot 1.3.1.RC1 and SDR 2.4.0.RELEASE (not working).

{code:java}
@SpringBootApplication
public class Sandbox {

    public static void main(String[] args) {
        SpringApplicationBuilder builder = new SpringApplicationBuilder(Sandbox.class);
        builder.run(args);

    }
}
{code}

{code:java}
public interface PersonRepository extends CrudRepository<Person,Long> {
}
{code}

{code:java}
@Projection(types=Person.class,name=""test"")
public interface PersonProjection {

    String getName();
}
{code}
{code:java}
@Entity
@Getter
@Setter
public class Person {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    private String phone;

}
{code}

{code:java}
@BasePathAwareController
public class TestController {

    private final ProjectionFactory projectionFactory = new SpelAwareProxyProjectionFactory();

    @Autowired
    private PersonRepository personRepository;

    @RequestMapping(value = ""/test/{id}"", produces = ""application/hal+json"")
    public ResponseEntity<Resource<PersonProjection>> getProjection(@PathVariable Long id){
        Person one = personRepository.findOne(id);
        PersonProjection projection = projectionFactory.createProjection(PersonProjection.class, one);
        return ResponseEntity.ok(new Resource<>(projection));
    }

    @RequestMapping(value = ""/test"", produces = ""application/hal+json"")
    public ResponseEntity<Resources<Resource<PersonProjection>>> getProjections(){
        Set<Person> people = Sets.newHashSet(personRepository.findAll());
        Resources<Resource<PersonProjection>> wrap = Resources.wrap(people.stream().map(o -> projectionFactory.createProjection(PersonProjection.class, o)).collect(Collectors.toSet()));
        return ResponseEntity.ok(wrap);
    }
{code}

{code:java}
@WebAppConfiguration
@SpringApplicationConfiguration(classes = Sandbox.class)
@RunWith(SpringJUnit4ClassRunner.class)
public class TestProjection {

    private MockMvc mockMvc;

    @Autowired
    private WebApplicationContext webApplicationContext;
    
    @Autowired
    private PersonRepository personRepository;

    @Before
    public void before(){
        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
        Person person = new Person();
        person.setName(""Adam"");
        person.setPhone(""123456"");
        personRepository.save(person);
        
    }

    @Test 
    public void testProjection() throws Exception {
        mockMvc.perform(get(""/test"")).andDo(print()).andExpect(status().is2xxSuccessful()).andExpect(jsonPath(""$._embedded.persons[0].name"").value(""Adam"")).andExpect(jsonPath(""$._embedded.persons[0].phone"").doesNotExist());
    }

    @Test
    public void testProjectionSingleResource() throws Exception {
        mockMvc.perform(get(""/test/1"")).andDo(print()).andExpect(status().is2xxSuccessful()).andExpect(jsonPath(""$.name"").value(""Adam"")).andExpect(jsonPath(""$.phone"").doesNotExist());
    }

    @Test
    public void testProjectionViaSDR() throws Exception {
        mockMvc.perform(get(""/persons?projection=test"")).andDo(print()).andExpect(status().is2xxSuccessful()).andExpect(jsonPath(""$._embedded.persons[0].name"").value(""Adam"")).andExpect(jsonPath(""$._embedded.persons[0].phone"").doesNotExist());
    }

    @Test
    public void testProjectionViaSDRSingleResource() throws Exception {
        mockMvc.perform(get(""/persons/1?projection=test"")).andDo(print()).andExpect(status().is2xxSuccessful()).andExpect(jsonPath(""$.name"").value(""Adam"")).andExpect(jsonPath(""$.phone"").doesNotExist());
    }


}
{code}",,,,,,,,,,,,DATAREST-716,,,,,,,,,,,,,,"27/Oct/15 12:39 PM;adamp;DATAREST-697.zip;https://jira.spring.io/secure/attachment/23198/DATAREST-697.zip",,,,,,2015-10-27 10:07:20.135,9223372036854775807,issuemaster(issuemaster),,"0|i08v07:",9223372036854775807,9223372036854775807,,,Hopper M1,,,,,,,,,,,"27/Oct/15 10:07 AM;olivergierke;Thanks for that one Adam. Would you mind adding the complete exception stack trace and wrap up the sample code in some tiny sample executable project, that shows the error?","27/Oct/15 12:16 PM;adamp;Apologies, meant to include the stack trace. Will attach sample project shortly. 
{code:java}
{""timestamp"":1445947947870,""status"":500,""error"":""Internal Server Error"",""exception"":""org.springframework.http.converter.HttpMessageNotWritableException"",""message"":""Could not write content: Can not start an object, expecting field name; nested exception is com.fasterxml.jackson.core.JsonGenerationException: Can not start an object, expecting field name"",""trace"":""org.springframework.http.converter.HttpMessageNotWritableException: Could not write content: Can not start an object, expecting field name; nested exception is com.fasterxml.jackson.core.JsonGenerationException: Can not start an object, expecting field name
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:271)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:100)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:202)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:186)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:80)
	at org.springframework.data.rest.webmvc.ResourceProcessorHandlerMethodReturnValueHandler.handleReturnValue(ResourceProcessorHandlerMethodReturnValueHandler.java:174)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:80)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:806)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:729)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:87)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:217)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:673)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1500)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1456)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: com.fasterxml.jackson.core.JsonGenerationException: Can not start an object, expecting field name
	at com.fasterxml.jackson.core.JsonGenerator._reportError(JsonGenerator.java:1649)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._verifyValueWrite(UTF8JsonGenerator.java:949)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject(UTF8JsonGenerator.java:314)
	at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$ProjectionSerializer.serialize(PersistentEntityJackson2Module.java:464)
	at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$ProjectionSerializer.serialize(PersistentEntityJackson2Module.java:432)
	at com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter.serializeAsField(UnwrappingBeanPropertyWriter.java:124)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:675)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:157)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:130)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1387)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:889)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:264)
	... 53 more
"",""path"":""/test/1""}
{code}","27/Oct/15 12:40 PM;adamp;[^DATAREST-697.zip] Hi Oliver, please see attached sample project and stack trace. Cheers! ","02/Dec/15 4:53 PM;adamp;Had a little more time to play with this recently - looks like this was introduced by the changes in DATAREST-521. 

The exception is thrown when rendering the content field of the Resource - which is annotated @JsonUnwrapped, but the serialization of the content field is handled by the ProjectionSerializer, which makes a `jgen.writeStartObject();` call, which is not going to work. 

When attempting to serialize a resource projection via a SDR controller (which works fine), it makes use of the PersistentEntityResourceSerializer and the ProjectionResourceContentSerializer (as you would expect). When attempting to serialize a resource-wrapped projection via any other standard controller, the above two are not used, and instead we just hit the ProjectionSerializer. Is the ProjectionSerializer intended only for use for serializing excerpt projections? ","10/Dec/15 2:07 PM;olivergierke;Thanks for the ticket, Adam. The sample project helped to identify the issue. We basically didn't tweak our behavior depending on whether the seriliazer was used in an unwrapping context or not. Even more so, we altered the state of the serializer instance which caused the instance to be tied to unwrapping particular mode once it got set to it once.

This is now fixed by considering the unwrapping mode on serialization as well as making sure we crate a new unwrapping serializer instance on request instead of modifying state on the existing one.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1069|https://github.com/spring-projects/spring-data-rest/issues/1069]. ",,,,,,,,,,,,,,,,,,
Invalid JSON Schema for properties pointing to association resources,DATAREST-690,66110,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,muenchdo,muenchdo,30/Sep/15 8:52 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,13/Nov/15 2:33 PM,2.4 GA (Gosling),,,,2.4.1 (Gosling SR1),2.5 M1 (Hopper),,,API Documentation,,,0,,,,,"I am using a [Spring Data REST version|https://github.com/kolorobot/spring-boot-petclinic-api] of Spring Boot's PetClinic application for playing around with the JSON Schema support. I noticed the following:

A property which represents a one-to-many association is of type _string_ and format _uri_. However, it also contains the properties _uniqueItems_ and _items_, which, according to the JSON Schema [validation docs|http://json-schema.org/latest/json-schema-validation.html#anchor25], only exist for _array_ types. Below is an excerpt of the JSON Schema for the _Owner_ class:

{code:JavaScript}
{
  ""title"": ""Owner"",
  ""properties"": {
    ""pets"": {
      ""title"": ""Pets"",
      ""readOnly"": false,
      ""type"": ""string"",
      ""format"": ""uri"",
      ""uniqueItems"": true,
      ""items"": {
        ""type"": ""object""
      }
    },
    ...
  }
}
{code}

I think the correct representation would be the following, do you agree?

{code:JavaScript}
{
  ""title"": ""Owner"",
  ""properties"": {
    ""pets"": {
      ""title"": ""Pets"",
      ""readOnly"": false,
      ""type"": ""array"",
      ""uniqueItems"": true,
      ""items"": {
        ""type"": ""string"",
        ""format"": ""uri""
      }
    },
    ...
  }
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-10-05 09:43:52.979,9223372036854775807,issuemaster(issuemaster),,"0|i08syn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05/Oct/15 9:43 AM;olivergierke;I agree that the current arrangement is invalid. But I don't agree on the arrangement you propose. For a association resource that's pointing to a collection, there's a single URI pointing to a resource that manages the collection association.

So we basically need to make sure that for resources, that are not embedded, we treat the property a string with format URI. For embedded resources (i.e. associations that do not point to a repository managed type) your suggested arrangement is valid and already works correctly (see {{PersistentEntityToJsonSchemaConverterUnitTests}}).","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1062|https://github.com/spring-projects/spring-data-rest/issues/1062]. ",,,,,,,,,,,,,,,,,,,,,,
Issue in loading an endpoint,DATAREST-688,65992,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Cannot Reproduce,olivergierke,pranesh002,pranesh002,24/Sep/15 2:59 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,13/Nov/15 5:09 PM,,,,,,,,,,,,0,,,,,"I am getting this exception when i tried to access my end point. Same code works fine in all lower environment, but when i moved to stag i am getting this exception. Anybody can please help to fix this issue.

{noformat}
ERROR [ajp-bio-8009-exec-459] ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(343) | Failed to invoke @ExceptionHandler method: protected org.springframework.http.ResponseEntity<java.lang.Object> com.uma.umasearch.edsrest.web.controller.EDSErrorHandler.handleInvalidRequest(java.lang.Throwable,org.springframework.web.context.request.WebRequest)
ClientAbortException:  java.net.SocketException: Broken pipe
        at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:413)
        at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:480)
        at org.apache.tomcat.util.buf.ByteChunk.append(ByteChunk.java:366)
        at org.apache.catalina.connector.OutputBuffer.writeBytes(OutputBuffer.java:438)
        at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:426)
        at org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:91)
        at org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper$SaveContextServletOutputStream.write(SaveContextOnUpdateOrErrorResponseWrapper.java:457)
        at com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer(UTF8JsonGenerator.java:1846)
        at com.fasterxml.jackson.core.json.UTF8JsonGenerator.flush(UTF8JsonGenerator.java:1039)
        at com.fasterxml.jackson.databind.ObjectMapper.writeValue(ObjectMapper.java:2242)
        at org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.writeInternal(MappingJackson2HttpMessageConverter.java:253)
        at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:208)
        at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:143)
        at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:125)
        at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:71)
        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:120)
        at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:339)
        at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:60)
        at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:138)
        at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1161)
        at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:998)
        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:952)
        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:870)
        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961)
        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:852)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:620)
        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118)
        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
        at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
        at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
        at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
        at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
        at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:140)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
        at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
        at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
        at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192)
        at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160)
        at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344)
        at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
        at com.uma.umasearch.edsrest.config.SimpleCORSFilter.doFilter(SimpleCORSFilter.java:43)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:950)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)
        at org.apache.coyote.ajp.AjpProcessor.process(AjpProcessor.java:193)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:607)
        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:314)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
        at java.lang.Thread.run(Thread.java:745)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-10-07 09:23:23.696,9223372036854775807,issuemaster(issuemaster),,"0|i08sa7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"07/Oct/15 9:23 AM;olivergierke;To be honest, I am not sure how we can be able to help here as it looks infrastructure related, and we obviously don't have any insights into that.","12/Nov/15 2:21 PM;pranesh002;Thanks Oliver Gierke, yes this is infrastructure issue, i fixed it!!! we can close this ticket.","24/Nov/17 8:27 PM;aminnasiri;Spring team resolved this issue, so this link would be helpful. It describes how we can handle Broken Pipe issue in Spring scope.

[link How to handle IOException: Broken Pipe in Spring MVC|https://mtyurt.net/2016/04/18/spring-how-to-handle-ioexception-broken-pipe/]","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1060|https://github.com/spring-projects/spring-data-rest/issues/1060]. ",,,,,,,,,,,,,,,,,,,,
resourceDescriptionMessageSource does not support UTF-8 property files,DATAREST-686,65982,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,Ungomma,Ungomma,24/Sep/15 7:52 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,02/Nov/15 10:58 AM,,,,,2.4.1 (Gosling SR1),2.5 M1 (Hopper),,,,,,0,,,,,"The message source created in {{RepositoryRestMvcConfiguration.resourceDescriptionMessageSourceAccessor}} does not support property files with UTF8 symbols (e.g. cyrillic alphabet :)). Resource descriptions come out as garbage.

Other Spring message sources have no such problem.

That is easily fixed by adding {{messageSource.setDefaultEncoding(""UTF-8"");}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:29.687,9223372036854775807,issuemaster(issuemaster),,"0|i08s7z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1058|https://github.com/spring-projects/spring-data-rest/issues/1058]. ",,,,,,,,,,,,,,,,,,,,,,,
ALPS profile does not reflect jackson customization (e.g. enableEnumTranslation=true),DATAREST-683,65973,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,otrosien,otrosien,23/Sep/15 1:49 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,06/Nov/15 3:41 PM,2.4 GA (Gosling),,,,2.4.1 (Gosling SR1),2.5 M1 (Hopper),,,,,,0,,,,,"Found while trying to document the enums of my REST API with ALPS.
See example including failing test here: https://github.com/otrosien/spring-alps-bug

The alps profile starts like below, but seems like it uses a differently configured jackson mapper, as the main one is configured to ""enableEnumTranslation"" (""Payment expected"" instead of ""PAYMENT_EXPECTED"").

{noformat}
{
  ""version"" : ""1.0"",
  ""descriptors"" : [ {
    ""id"" : ""order-representation"",
    ""href"" : ""http://localhost/profile/orders"",
    ""descriptors"" : [ {
      ""name"" : ""status"",
      ""doc"" : {
        ""value"" : ""PAYMENT_EXPECTED, PAID"",
        ""format"" : ""TEXT""
      },
      ""type"" : ""SEMANTIC""
    } ]
{noformat}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-11-06 15:41:00.555,9223372036854775807,issuemaster(issuemaster),,"0|i08s5z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"23/Sep/15 1:50 PM;otrosien;maybe related to DATAREST-676.

Another question: Is the ALPS JSON response actually valid ALPS? For example the alps-console project cannot read this file ( https://github.com/tkawa/alps-console ), and I did notice some differences, like missing ""alps"" root element, or ""descriptors"" instead of ""descriptor"".","06/Nov/15 3:41 PM;olivergierke;That's both fixed for Hopper and Gosling.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1056|https://github.com/spring-projects/spring-data-rest/issues/1056]. ",,,,,,,,,,,,,,,,,,,,,
@HandleBeforeSave seems like override jpa sessions,DATAREST-678,65889,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,david.eko,david.eko,18/Sep/15 4:23 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,03/Nov/16 9:09 AM,2.4 GA (Gosling),,,,,,,,,,,2,,,,,"In Spring Boot 1.3.0.M5, i'm using Spring Data Rest 2.4.0 RELEASE @RepositoryEventHandler. Below is the code snippet, when i try to findOne currentSomething somehow the result is same as updatedSomething, but this change is not already commited in database. Can anyone explain what happened? because i didnt face this issue in Spring Boot 1.3.0.M2
{code:java}
@Configuration
@RepositoryEventHandler(Something.class)
public class VehicleEventHandler {

    @Autowired
    private SomethingRepository somethingRepository;

    @HandleBeforeSave
    public void handleBeforeSave(Something updatedSomething) {
         Something currentSomething = somethingRepository.findOne(currentSomething.getSomethingId());
        if (!currentSomething.getPlateNumber().equals(updatedSomething.getPlateNumber())) {
            SomethingLogService.saveLog(updatedSomething);
        }
    }
}
{code}",,,,,,,,,,,,,,,,DATAREST-373,,,,,,DATAREST-876,,,,,,,,,,2016-08-17 15:34:34.87,9223372036854775807,issuemaster(issuemaster),,"0|i08rqv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"17/Aug/16 3:34 PM;bitsofinfo;Been nearing one year.... any movement on this?","03/Nov/16 9:08 AM;olivergierke;I doubt that this has ever worked. First of all because the code doesn't compile ;). Second, because there's just no way to get access to the old state of an already loaded and manipulated entity in JPA. Resolving as duplicate as it's essentially asking for the same thing as DATAREST-373.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1052|https://github.com/spring-projects/spring-data-rest/issues/1052]. ",,,,,,,,,,,,,,,,,,,,,
Upgrading Spring Data Release Train to Gosling-RELEASE introduces Jackson errors,DATAREST-667,65710,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Works as Designed,olivergierke,mzampetti,mzampetti,02/Sep/15 8:15 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,03/Sep/15 4:25 PM,,,,,,,,,,,,0,,,,,"Updating an existing Spring Boot application to Gosling-RELEASE Spring Data Release chain causes issues when making REST calls due to Jackson errors.

{noformat}
{{{""timestamp"":1441221162636,""status"":500,""error"":""Internal Server Error"",""exception"":""java.lang.AbstractMethodError"",""message"":""com.fasterxml.jackson.databind.JsonSerializer.isEmpty(Ljava/lang/Object;)Z"",""path"":""/avail/avails""}[~/git/avails-api/avails-server]}}
{noformat}

This is the error returned to {{curl}} when making call to the base Spring Data REST endpoint. Before changing the dependancies, this worked fine and returned the normal HAL JSON of the endpoints available. Upgrading the full Jackson set of dependencies to 2.6.1 resolved this issue. It appears that the {{Gosling-RELEASE}} is not specifying the necessary Jackson dependencies.","Spring Boot application using Spring Data JPA, Spring Data REST, HATEOAS, Spring Boot 1.2.5-RELEASE",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-09-03 16:25:03.927,9223372036854775807,issuemaster(issuemaster),,"0|i08qnj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03/Sep/15 4:25 PM;olivergierke;That's cause by Boot using {{<dependencyManagement />}} to enforce dependency versions, which effectively downgrades some of the transitive dependencies of Spring Data REST. To use the Gosling release with Spring Boot 1.2.5 you need to set the following properties:

* {{spring-hateoas.version}} to 0.19.0.RELEASE
* {{jackson.version}} to 2.6.1","03/Sep/15 4:44 PM;mzampetti;Actually, I had already tried that. Just setting the jackson.version as a property doesn't affect the jackson versions. I had to explicitly add the various packages to my maven dependency section to update the versions. Here is the relevant sections of my pom.

{code:xml}
    <properties>
           <build.timestamp>${maven.build.timestamp}</build.timestamp>
           <build.name>${env.BUILD_DISPLAY_NAME}</build.name>
           <jackson.version>2.6.1</jackson.version>
           <spring-hateoas.version>0.19.0.RELEASE</spring-hateoas.version>
           <spring-data-releasetrain.version>Gosling-RELEASE</spring-data-releasetrain.version>
           <spring-boot-release>1.2.5.RELEASE</spring-boot-release>
    </properties>

	<dependencyManagement>
		<dependencies>

			<dependency>
				<groupId>org.springframework.data</groupId>
				<artifactId>spring-data-releasetrain</artifactId>
				<version>${spring-data-releasetrain.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring-boot-release}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-parent</artifactId>
				<version>1.0.2.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

		</dependencies>
	</dependencyManagement>
{code}","03/Sep/15 6:38 PM;olivergierke;That's only needed if you don't use the Boot parent pom with your project.","03/Sep/15 6:52 PM;mzampetti;When you say ""that's only needed"", do you mean I have to include the specific dependancies in the ```<dependency>``` section if I'm NOT using the Spring Boot parent pom? That is the case I'm in, and I just want to be clear. ","03/Sep/15 6:59 PM;olivergierke;We're on the same table :). I just wanted to make sure that others don't get to impression that your setup is strictly required. If you have:

{code:xml}
<parent>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-parent</artifactId>
	<version>…</version>
</parent>
{code}

simply setting the properties as you did should work (i.e. {{spring-data-releasetrain}} and {{spring-boot-dependencies}} don't have to be declared explicitly. ","03/Sep/15 7:03 PM;mzampetti;Great! I agree, and also wanted to make it clear to others.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1008|https://github.com/spring-projects/spring-data-rest/issues/1008]. ",,,,,,,,,,,,,,,,,
Use consistent scheme for property titles in JSON Schema,DATAREST-665,65686,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,02/Sep/15 6:42 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,02/Sep/15 1:23 PM,2.4 GA (Gosling),,,,2.4.1 (Gosling SR1),2.5 M1 (Hopper),,,API Documentation,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:27.385,9223372036854775807,issuemaster(issuemaster),,"0|i08qif:",9223372036854775807,9223372036854775807,,,Gosling GA,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1007|https://github.com/spring-projects/spring-data-rest/issues/1007]. ",,,,,,,,,,,,,,,,,,,,,,,
GET on single resource does not show link for association collection resource,DATAREST-664,65673,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Works as Designed,olivergierke,jsalmon,jsalmon,01/Sep/15 7:43 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,02/Sep/15 9:35 AM,2.4 RC1 (Gosling),,,,,,,,,,,0,,,,,"Doing a GET on a collection correctly renders association collection resource links, but a GET on a single resource of the collection does not. 

[this github repo|https://github.com/jlsalmon/spring-data-rest-mongodb-test] contains a minimal sample to reproduce the problem with {{spring-data-rest-core:2.4.0.RC1}} (gotten via {{spring-boot-starter-data-rest:1.3.0.M4}}).

This may be related to the use of {{@DBRef}}.",,,,,,,,,,,,,,,,,SPR-13318,,,,,,,,,,,,,,,2015-09-02 06:20:18.992,9223372036854775807,issuemaster(issuemaster),,"0|i08qfr:",9223372036854775807,9223372036854775807,http://stackoverflow.com/questions/32338018/accessing-and-updating-association-resources-with-spring-data-rest-and-mongodb/32338841#32338841,,,,,,,,,,,,,"01/Sep/15 8:47 PM;jsalmon;This is definitely a bug, as I just tried this with {{spring-data-rest-core:2.4.0.M1}} and {{spring-data-rest-webmvc:2.4.0.M1}} and it works as expected. I get the links properly and I get the list of sub-resources when I ask for it. So I guess that this was introduced in {{2.4.0.RC1}}.","02/Sep/15 6:20 AM;olivergierke;Care to add a few instructions on how to reproduce the issue? I ran the app but only get two empty collection resources. Maybe you can either add a bit of data on application bootstrap or POST the cURL/httpie commands to add data and see the error?","02/Sep/15 6:22 AM;olivergierke;Also, you might wanna try upgrading to the latest Gosling GA release, Spring HATEOAS 0.19.0.RELEASE and most importantly Spring 4.2.1.RELEASE. Esp. the latter fixed a few Jackson glitches introduced in 4.2.0 that very unfortunately misshaped the representation rendering for SD REST.","02/Sep/15 7:40 AM;jsalmon;I added some bootstrap data to the sample: {{Request(id=1, name=""request 1"")}} and {{Point(id=1, name=""point 1"")}}

To reproduce:

GET the request and see that the ""points"" link is not added (issue #1):

{{curl -X GET http://localhost:8080/requests/1}}

Link the {{point}} to the {{request}}:

{{curl -H ""Content-Type: text/uri-list"" -X PUT http://localhost:8080/requests/1/points -d ""http://localhost:8080/points/1""}}

Try to GET the points nested inside the request and see that they are not displayed (issue #2):

{{curl -X GET http://localhost:8080/requests/1/points}}

GET the nested point resource and see that it is in fact attached:

{{curl -X GET http://localhost:8080/requests/1/points/1}}
","02/Sep/15 8:15 AM;jsalmon;I can confirm that using Gosling-RELEASE train, HATEAOAS 0.19.0 and Spring 4.2.1 this works as expected.","02/Sep/15 8:19 AM;jsalmon;One strange thing though, is that now all resources have an extra link with the singular name of the resource as the rel:

{{curl -X GET http://localhost:8080/requests/1}}

{code}
{
  ""name"" : ""request 1"",
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/requests/1""
    },
    ""request"" : {
      ""href"" : ""http://localhost:8080/requests/1""
    },
    ""points"" : {
      ""href"" : ""http://localhost:8080/requests/1/points""
    }
  }
}
{code}

What's the point of the ""request"" link? How is it different from the ""self"" link?","02/Sep/15 9:18 AM;olivergierke;The {{self}} link needs to be canonical (i.e. no template variables). The resource however might accept optional parameters (e.g. a {{?projection=…}}). That's why as of Spring Data REST 2.4 add another link using the item resource relation which would then advertise these parameters if available. We could've tried to be clever and not render it if it was completely equal to the self link but favored to alway render it so that clients can rely on them always being there.

That said, I also discovered Spring 4.2.0 being the issue here. The Jackson bug (see SPR-13318) causes the {{PersistentEntityResource}} being rendered as a {{Resource}} only, which prevents the custom serializer that adds the association links to the response from kicking in.

So I am inclined to close this one as works as designed as it can be solved by moving to a fixed version of Spring Framework. Agreed?","02/Sep/15 9:28 AM;jsalmon;Agreed. Thanks very much for your prompt response!

Cheers,
Justin","02/Sep/15 9:35 AM;olivergierke;For reference, I upgraded the Boot plugin in your sample to 1.3.0.M4 and then upgraded the Spring version to 4.2.1.RELEASE with that declaration:

{code:groovy}
ext['spring.version'] = '4.2.1.RELEASE'
{code}

I've also updated the question on StackOverflow with our findings.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1041|https://github.com/spring-projects/spring-data-rest/issues/1041]. ",,,,,,,,,,,,,,
Unable to post entity with subclassed property (JPA),DATAREST-662,65614,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,vrentschler,vrentschler,29/Aug/15 8:55 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,29/Aug/15 1:46 PM,2.3.2 (Fowler SR2),2.4 RC1 (Gosling),,,2.3.3 (Fowler SR3),2.4 GA (Gosling),,,Repositories,,,0,,,,,"Given these entities:

{code:java}
static class PetOwner {
    private Pet pet;
}

@JsonTypeInfo(include = JsonTypeInfo.As.PROPERTY, use = JsonTypeInfo.Id.MINIMAL_CLASS)
static class Pet {}
static class Cat extends Pet {}
{code}

Submitting a post like

{code:bash}
curl -d '{""pet"" : ""http://localhost:8080/pets/1""}' -H 'Content-Type: application/json' 'http://localhost:8080/petOwners/'
{code}

fails, because Jackson will try and deserialize ""with type"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-08-29 13:46:26.005,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/198,"0|i08q2v:",9223372036854775807,9223372036854775807,,,Gosling GA,,,,,,,,,,,"29/Aug/15 1:46 PM;olivergierke;Good catch, I've polished your PR and merged it into master and the maintenance branch for Fowler.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1039|https://github.com/spring-projects/spring-data-rest/issues/1039]. ",,,,,,,,,,,,,,,,,,,,,,
HTTP PATCH request for non-existent resource returns HTTP STATUS 500 instead of 404,DATAREST-661,65604,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,decodeMax,decodeMax,28/Aug/15 7:23 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,25/Mar/17 7:10 AM,2.3.2 (Fowler SR2),,,,2.4 GA (Gosling),,,,,,,0,,,,,"If a HTTP PATCH request is made to a spring-data-rest-mvc RepositoryRestResource for an non-existent entity the response status code is 500.

A NPE is thrown on the server.

E.g.

{code:java}
ResponseEntity<Customer> responseEntity = getRestTemplate().exchange(customerUrl + ""/"" + unknownCustomerId,
                HttpMethod.PATCH, null, Customer.class);

{code}


Defective code:

https://github.com/spring-projects/spring-data-rest/blob/master/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/config/PersistentEntityResourceHandlerMethodArgumentResolver.java#L158

*Package* org.springframework.data.rest.webmvc.config
*Class* PersistentEntityResourceHandlerMethodArgumentResolver
*Line* 158


{code:java}
		// JSON + PATCH request
		if (request.isPatchRequest() && converter instanceof MappingJackson2HttpMessageConverter) {

			if (objectToUpdate == null) {
				new ResourceNotFoundException();
			}
{code}


*should be*


{code:java}
				throw new ResourceNotFoundException();
{code}


Its missing the 'throw'clause.

As per http://tools.ietf.org/html/rfc5789

Resource not found:  
	Can be specified with a 404 (Not Found) status
	code when the client attempted to apply a patch document to a non-
	existent resource, but the patch document chosen cannot be applied
	to a non-existent resource.

.

Attached stacktrace
",,,,,,,,,,,,,,,,,,,,,,,,,,"28/Aug/15 7:23 AM;decodeMax;stacktrace.txt;https://jira.spring.io/secure/attachment/23090/stacktrace.txt",,,,,,2017-03-24 13:39:52.229,9223372036854775807,issuemaster(issuemaster),,"0|i08q0n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"24/Mar/17 1:39 PM;candrews;This issue has been fixed - see the 2 commits linked to this issue.","25/Mar/17 2:11 AM;decodeMax;Happy for this issue to closed. Thanks!","25/Mar/17 7:10 AM;olivergierke;Resolving for 2.4, which — according to GitHub — was the first version the fix was contained in.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1038|https://github.com/spring-projects/spring-data-rest/issues/1038]. ",,,,,,,,,,,,,,,,,,,,
return-body-on-create and return-body-on-update shown as deprecated,DATAREST-660,65500,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Works as Designed,olivergierke,snicoll,snicoll,26/Aug/15 12:08 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,14/Apr/16 6:08 PM,2.4 RC1 (Gosling),,,,,,,,,,,0,Gosling,,,,"Commit [5486712b|https://github.com/spring-projects/spring-data-rest/commit/5486712b1b1749abc0e72b52291e5f338a04e170] changed some method signatures to use a more fluent API and flagged the regular getter as deprecated.

Spring Boot only supports regular getter/setter pair so the {{@Deprecated}} flag is interpreted as a deprecated property (while it's not in practice). I would advise to rework this commit if possible as any class flagged {{@ConfigurationProperites}} should expose regular java bean properties for now.

Note that this a good example of how complex it would be to support a more  fluent API in Spring Boot (if we ever decided to do so).

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-08-28 13:31:24.224,9223372036854775807,issuemaster(issuemaster),,"0|hzzy6d:zzzzx",9223372036854775807,9223372036854775807,,,Gosling GA,SpringOne 2015,Gosling SR1,Hopper M1,Hopper RC1,Hopper GA,Hopper SR2,,,,,"28/Aug/15 1:31 PM;olivergierke;I think you're misinterpreting the commit. The accessor methods are not (and never have been actually) intended for configuration. They're used by controllers to lookup configuration values. The changed introduced the {{Accept}} header starting to play a role in the decision so the deprecation is basically a hint to clients that they need to use the new method taking a {{String}} to get a correct result.

I am wondering why the property inspection mechanism considers the getters at all, as for the configuration the setters should relevant, shouldn't they? That said, I can of course go ahead and outright remove the relevant {{is…}} methods as it's considered internal API anyway.","31/Aug/15 11:58 AM;olivergierke;Apparently removing the getters doesn't work as this would prevent the properties from being discovered by the Boot {{@ConfigurationProperties}} handling.

As it's essentially Spring Boot turning this into a config properties class one option would be to extend {{RepositoryRestConfiguration}} in Spring Boot's REST auto-configuration and add/override the missing setters, if it really insists them to be in place.","22/Feb/16 11:06 AM;snicoll;We no longer expose that object directly in Spring Boot so I think this issue is no longer relevant.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1037|https://github.com/spring-projects/spring-data-rest/issues/1037]. ",,,,,,,,,,,,,,,,,,,,
Typo in exception message in parameter checks for ParameterMetadata,DATAREST-655,65451,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,21/Aug/15 6:59 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,21/Aug/15 7:01 AM,2.3.2 (Fowler SR2),2.4 RC1 (Gosling),,,2.3.3 (Fowler SR3),2.4 GA (Gosling),,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:26.293,9223372036854775807,issuemaster(issuemaster),,"0|i08pjz:",9223372036854775807,9223372036854775807,,,Gosling GA,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1033|https://github.com/spring-projects/spring-data-rest/issues/1033]. ",,,,,,,,,,,,,,,,,,,,,,,
Has the page field been removed from paginated responses,DATAREST-649,65387,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Works as Designed,olivergierke,gauravbrills,gauravbrills,19/Aug/15 12:35 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,19/Aug/15 3:40 AM,2.4 RC1 (Gosling),,,,,,,,API Documentation,Repositories,,0,Spring,,,,"HI while upgrading to the latest RC1 or pointing to the gosling release snapshot I have observed the following .
as per the below test case I expected the page field to come in the response 

{code:java}
 @Test
    public void partnersList() throws Exception {

        this.mockMvc.perform(get(""/partners"").with(adminLogin())).andExpect(status().isOk()).andDo(print())
            .andDo(document(""partners"").withResponseFields(
                fieldWithPath(""_embedded.hf:partners"").description(""An array of <<resources-partners, Partner resources>>""),
                fieldWithPath(""_links.first"").type(FieldType.NUMBER).description(""intial page""),
                fieldWithPath(""_links.self"").description(""Current url""), fieldWithPath(""_links.next"").description(""next page""),
                fieldWithPath(""_links.last"").description(""last page""),
                fieldWithPath(""page"").description(""The page details [size,totalElements,totalPages,number]"")));
    }
{code}
but now the page field is no longer available in the response also the links I get are not templated (has this changed?)  .Though links are good for iterating the api but does this mean that the page field has been ditched .If yes can the docs also be updated to reflect this .Or am I missing something .

Also I have observed that in my custom controllers where I am using   PagedResourcesAssembler the page field does come 

Thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-08-19 00:46:13.713,9223372036854775807,issuemaster(issuemaster),,"0|i08p6f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"19/Aug/15 12:46 AM;olivergierke;Are you using Spring Framework 4.2.0 by accident? It introduced a [glitch in the Jackson rendering|https://jira.spring.io/browse/SPR-13318] that causes the properties to be missing from the output. That's fixed in 4.2.1 snapshots already.","19/Aug/15 2:26 AM;gauravbrills;Thanks Oliver that works once I switch to 4.2.1 snapshots .Hope things get stable soon with the stack before we move into prod (y).
","19/Aug/15 3:40 AM;olivergierke;We've discussed this internally and it should all smooth out with the Boot 1.3 RC1 release as it will include the fixed version of Spring Framework OOTB.","19/Aug/15 7:25 AM;gauravbrills; great also one small thing I have observed the self and navigation links are no longer tempalted eg.


{code:java}
""_links"" : {
    ""first"" : {
      ""href"" : ""http://localhost:8080/partners?page=0&size=2"",
      ""templated"" : false
    },
    ""self"" : {
      ""href"" : ""http://localhost:8080/partners"",
      ""templated"" : false
    },
    ""next"" : {
      ""href"" : ""http://localhost:8080/partners?page=1&size=2"",
      ""templated"" : false
    },
    ""last"" : {
      ""href"" : ""http://localhost:8080/partners?page=2371&size=2"",
      ""templated"" : false
    }
  }
{code}
Is it expected or I need some prop to turn that on ?","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1028|https://github.com/spring-projects/spring-data-rest/issues/1028]. ",,,,,,,,,,,,,,,,,,,
Spring Data REST does not work out of the box with time-zoned types of the JSR-310 API,DATAREST-645,65338,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Won't Fix,olivergierke,ptahchiev,ptahchiev,15/Aug/15 6:08 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,17/Aug/15 9:09 AM,,,,,,,,,,,,0,,,,,"Hello,

now that hibernate5 is out, I migrated all my JPA entities to use {{OffsetDateTime}} and of course the {{lastModifiedDate}} is now also {{OffsetDateTime}}. However, my tests started failing now with this exception:
{code}
org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.time.OffsetDateTime to type java.util.Calendar
	at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:313)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:195)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:176)
	at org.springframework.data.auditing.DefaultAuditableBeanWrapperFactory$DateConvertingAuditableBeanWrapper.getAsCalendar(DefaultAuditableBeanWrapperFactory.java:208)
	at org.springframework.data.auditing.MappingAuditableBeanWrapperFactory$MappingMetadataAuditableBeanWrapper.getLastModifiedDate(MappingAuditableBeanWrapperFactory.java:210)
	at org.springframework.data.rest.webmvc.AbstractRepositoryRestController.prepareHeaders(AbstractRepositoryRestController.java:180)
	at org.springframework.data.rest.webmvc.RepositoryEntityController.getItemResource(RepositoryEntityController.java:324)
{code}

And I saw that in {{AbstractRepositoryRestController:180}} there's a cast to {{java.util.Calendar}}
{code}
		Calendar lastModifiedDate = wrapper.getLastModifiedDate();
{code}

And I also noticed the class {{DateTimeConverters}} in {{spring-context}} which is missing an {{OffsetDateTimeToCalendarConverter}} - maybe one should be added?!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-08-17 09:09:00.612,9223372036854775807,issuemaster(issuemaster),,"0|i08owf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15/Aug/15 7:02 AM;ptahchiev;Actually I think the converter must be registered in {{spring-data-commons:Jsr310Converters:getConvertersToRegister}}","16/Aug/15 10:27 AM;ptahchiev;I created a pull-request for this:
https://github.com/spring-projects/spring-data-commons/pull/139","17/Aug/15 9:09 AM;olivergierke;I'll be resolving this as won't as we deliberately only added converters for non-time-zoned date types. The we make the non-time-zoned types handleable by persistence providers is by converting them into {{Date}} instances. {{Date}} unfortunately does not capture a time zone which means that whenever you convert a zoned date into a {{Date}} you lose information about the original time zone. This in turn means that a conversion by definition cannot be symmetric.

To prevent the loss of information and pretending we could deal with these types while we actually can't we don't add these converters. Also, note that time-zones usually being a presentation layer issue, it's generally recommended to keep the domain model free from them and with with UTCed dates only.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1024|https://github.com/spring-projects/spring-data-rest/issues/1024]. ",,,,,,,,,,,,,,,,,,,,
Fix gap in JSON Schema unit tests,DATAREST-632,65091,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,gregturn,gregturn,gregturn,03/Aug/15 12:36 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,03/Aug/15 5:03 PM,,,,,2.3.3 (Fowler SR3),2.4 RC1 (Gosling),,,Repositories,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:23.545,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/192,"0|i08ngn:",9223372036854775807,9223372036854775807,,,Gosling RC1,,,,,,,,,,,"03/Aug/15 12:37 PM;gregturn;* There are two test methods examining the same domain object. They should be the same method.
* One test method verifies ""id"" property properly exposed. Missing a test assertion showing when ""id"" is NOT exposed. Need it to detect future regression.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1006|https://github.com/spring-projects/spring-data-rest/issues/1006]. ",,,,,,,,,,,,,,,,,,,,,,
JSON Schema doesn't show id fields when they are exposed,DATAREST-631,65039,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,gregturn,gregturn,gregturn,30/Jul/15 4:23 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,31/Jul/15 7:18 AM,,,,,2.3.3 (Fowler SR3),2.4 RC1 (Gosling),,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:23.486,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/190,"0|i08n6v:",9223372036854775807,9223372036854775807,,,Gosling RC1,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1005|https://github.com/spring-projects/spring-data-rest/issues/1005]. ",,,,,,,,,,,,,,,,,,,,,,,
ALPS metadata should NOT show an id field unless its exposed in the configuration,DATAREST-630,65038,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,gregturn,gregturn,gregturn,30/Jul/15 1:39 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,31/Jul/15 6:11 AM,,,,,2.3.3 (Fowler SR3),2.4 RC1 (Gosling),,,Repositories,,,0,,,,,"ALPS metadata can be used to drive dynamic UI features, like creation dialog boxes on web pages. The fact that is exports id fields can wreak havoc on those things. The field is NOT exposed with JSON Schema metadata, nor should it be exposed with ALPS.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:23.309,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/189,"0|i08n6n:",9223372036854775807,9223372036854775807,,,Gosling RC1,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#1003|https://github.com/spring-projects/spring-data-rest/issues/1003]. ",,,,,,,,,,,,,,,,,,,,,,,
_embedded resource with curie namespace not rendering in HAL browser,DATAREST-626,64926,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,gauravbrills,gauravbrills,23/Jul/15 2:48 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,22/Aug/15 4:13 AM,2.4 M1 (Gosling),,,,2.4 GA (Gosling),,,,Repositories,,,0,Spring,,,,"Hi I am invoking my service like http://localhost:8080/foos?page=1&size=1 from HAL browser which give me an output like

{code:java}
{
  ""_links"" : {
    ""first"" : {
      ""href"" : ""http://localhost:8080/foos?page=0&size=1""
    },
    ""prev"" : {
      ""href"" : ""http://localhost:8080/foos?page=0&size=1""
    },
    ""self"" : {
      ""href"" : ""http://localhost:8080/foos""
    },
    ""next"" : {
      ""href"" : ""http://localhost:8080/foos?page=2&size=1""
    },
    ""last"" : {
      ""href"" : ""http://localhost:8080/foos?page=81&size=1""
    }
  },
  ""_embedded"" : {
    ""hf:foos"" : [ {
      ""name"" : ""comsi"",
      ""_links"" : {
        ""self"" : {
          ""href"" : ""http://localhost:8080/foos/319001""
        },
,        ""hf:child"" : {
          ""href"" : ""http://localhost:8080/foos/319001/child""
        } ,
      ""curies"" : [{""href"": ""/alps/{rel}"",
""name"":""hf"",
""templated"": true}
]
      }
    } ]
  },
  ""page"" : {
    ""size"" : 1,
    ""totalElements"" : 82,
    ""totalPages"" : 82,
    ""number"" : 1
  }
}
{code}
the same does nto render and gives me an error 
Uncaught Error: URNs do not have any generally defined hierarchical components in console.The same works fine without curie namespaces in the embedded section seems to be a bug with the response rendering .
-Also one more issue I have been experiencing ,that I am getting duplicate links for self and the entity as evident in the above response and also here http://stackoverflow.com/questions/31538048/getting-duplicate-link-of-resource-entity-in-spring-data-rest .- this issue was not coming in the M1 build but hal browser issue still there

the spring artifacts I am using are
> Gosling-BUILD-SNAPSHOT
> spring data 2.4.0-BUILD-SNAPSHOT
> Spring boot 1.3.0.BUILD-SNAPSHOT","software,spring boot on windows,sts",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-08-22 04:12:47.17,9223372036854775807,issuemaster(issuemaster),,"0|i08mhz:",9223372036854775807,9223372036854775807,https://github.com/mikekelly/hal-browser/issues/62#issuecomment-123998943,,,,,,,,,,,,,"13/Aug/15 5:45 AM;gauravbrills;Any help on this ?","22/Aug/15 4:12 AM;olivergierke;Please give the latest Spring Data REST snapshots a spin. They depend on a version of [Spring HATEOAS|https://github.com/spring-projects/spring-hateoas/issues/320#issuecomment-132622363] that fixes the curie rendering.","22/Aug/15 5:11 AM;gauravbrills;Thanks a lot Oliver made my day :)  , also observed welcome changes for including ALPS profile links now by default .Will this be part of any coming Spring boot release to get things streamlined.","22/Aug/15 5:35 AM;olivergierke;Boot will use Gosling as part of its upcoming 1.3 release. The Gosling GA release will probably roll into the release candidates of boot already. Be also sure to check our advanced [HAL browser customizations|https://jira.spring.io/browse/DATAREST-627] (special POST forms rendered using the exposed JSON Schema and [JSON Editor|http://jeremydorn.com/json-editor/]).","22/Aug/15 5:52 AM;gauravbrills;cool this is really useful , solves one of my use case that I just had for creating a ui for some meta data entities seems this will work like a charm there (y) .","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#999|https://github.com/spring-projects/spring-data-rest/issues/999]. ",,,,,,,,,,,,,,,,,,
Remove obsolete wrapping of embeddeds into Resources.,DATAREST-622,64853,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,21/Jul/15 2:39 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,21/Jul/15 3:13 AM,,,,,2.3.2 (Fowler SR2),2.4 RC1 (Gosling),,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:22.396,9223372036854775807,issuemaster(issuemaster),,"0|i08m47:",9223372036854775807,9223372036854775807,,,Gosling RC1,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#996|https://github.com/spring-projects/spring-data-rest/issues/996]. ",,,,,,,,,,,,,,,,,,,,,,,
Hateoas Link generation behind Zuul proxy,DATAREST-620,64827,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Invalid,olivergierke,jnarloch,jnarloch,18/Jul/15 5:37 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,20/Jul/15 10:25 AM,2.2.3 (Evans SR3),,,,,,,,,,,0,,,,,"I have setup Zuul proxy to the backend rest service and noticed that the link urls are not correcly generated and resolved as relative to the proxy path:

{code}
{
  ""_links"" : {
    ""search"" : {
      ""href"" : ""http://localhost:8080/rest/api/v1/api/loans/search""
    }
  },
  ""_embedded"" : {
    ""loans"" : [ {
      ""status"" : ""ACTIVE"",
      ""amount"" : 1000.00,
      ""charge"" : 25.00,
      ""currency"" : ""EUR"",
      ""interest"" : 5.00,
      ""startDate"" : ""2015-07-01"",
      ""expireDate"" : ""2015-07-08"",
      ""repaymentDate"" : null,
      ""_links"" : {
        ""self"" : {
          ""href"" : ""http://localhost:8080/rest/api/v1/api/loans/1""
        },
        ""extend"" : {
          ""href"" : ""http://localhost:8080/rest/api/v1/loan/1/extend""
        },
        ""customer"" : {
          ""href"" : ""http://localhost:8080/rest/api/v1/api/loans/1/customer""
        },
        ""application"" : {
          ""href"" : ""http://localhost:8080/rest/api/v1/api/loans/1/application""
        }
      }
    },
{code}

Application has been configured to serve the request with baseUrl: /api and Zuul proxy to forward all trafic from: /rest/api/v1.

Also, notice that the custom registered link 'extend' generated using ControllerLinkBuilder#linkTo method manage to resolve the url corectly.",,,,,,,,,,,,,,,,,SPR-12500,,,,,,,,,,,,,,,2015-07-20 10:03:35.481,9223372036854775807,issuemaster(issuemaster),,"0|i08lyf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18/Jul/15 5:40 PM;jnarloch;After a moment, I started to think why the ControllerLinkBuilder link have work my unserstanding is that it is not aware of the REST baseUrl setting, so this is way the path hasn't been added.","19/Jul/15 2:06 AM;jnarloch;Well, I though as a workaround I will disable the baseUri setting and serve everything from '/' root context, although this does not fix the issue: 

The paths are being appended to the current context, making it duplicated:

{code}
{
  ""_links"" : {
    ""paid"" : {
      ""href"" : ""http://localhost:8080/rest/api/v1/loans/search/loans/search/findPaidLoans""
    },
    ""active"" : {
      ""href"" : ""http://localhost:8080/rest/api/v1/loans/search/loans/search/findActiveLoans""
    }
  }
}
{code}","20/Jul/15 9:08 AM;jnarloch;I guess that this will be quite simple to fix by taking into consideration the X-Forwarded-Host and X-Forward-Prefix that Zuul augments into the request.","20/Jul/15 10:03 AM;olivergierke;Spring Data REST already considers those transparently through the support in Spring HATEOAS which itself is based on the proxy header detection in Spring Framework. Which Spring Framework version are you currently using?","20/Jul/15 10:16 AM;jnarloch;My setup uses: 
* Spring Boot: 1.2.5, 
* Spring Data REST: 2.3.1 (although I had reproduce this with 2.2.3), 
* Spring Hateoas 0.17
* Spring Framework 4.1.7

Sorry for duplicating issues but I opened the associated spring-hateoas https://github.com/spring-projects/spring-hateoas/issues/367 issue.

I think that the only reasons that this does not work is that X-Forward-Prefix is not taken into account.","20/Jul/15 10:23 AM;olivergierke;It should be by Spring Framework (which Spring HATEOAS uses under the covers) though. Nonetheless, I'll have a look. Don't worry about the duplicate :).","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#989|https://github.com/spring-projects/spring-data-rest/issues/989]. ",,,,,,,,,,,,,,,,,
"Typo in docs of RepositoryEntityController::patchItemResource, Docs mention PUT",DATAREST-619,64823,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Trivial,Fixed,olivergierke,fabiantrampusch,fabiantrampusch,18/Jul/15 1:29 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,27/Jul/15 7:30 AM,,,,,2.3.2 (Fowler SR2),2.4 RC1 (Gosling),,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:22.044,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/188,"0|i08lxj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#994|https://github.com/spring-projects/spring-data-rest/issues/994]. ",,,,,,,,,,,,,,,,,,,,,,,
Requests with Accept header of application/*+json return the compact representation,DATAREST-617,64788,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,16/Jul/15 3:35 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,16/Jul/15 6:27 AM,2.3.1 (Fowler SR1),2.4 M1 (Gosling),,,2.3.2 (Fowler SR2),2.4 RC1 (Gosling),,,Content negotiation,,,0,,,,,"As the controller methods handling the compact representation use an explicit {{produces}} clause in the request mapping, they get favored when the client sends {{Accept: application/*+json}}.

We should tweak the default mappings to implicitly match this situation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:21.881,9223372036854775807,issuemaster(issuemaster),,"0|i08lpr:",9223372036854775807,9223372036854775807,,,Gosling RC1,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#991|https://github.com/spring-projects/spring-data-rest/issues/991]. ",,,,,,,,,,,,,,,,,,,,,,,
"For @RepositoryRestController, appending %7B to URL passes security check.",DATAREST-609,64599,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Critical,Fixed,olivergierke,onurshin,onurshin,04/Jul/15 6:04 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,23/Jul/15 5:32 AM,,,,,2.3.2 (Fowler SR2),2.4 RC1 (Gosling),,,,,,0,,,,,"@RepositoryRestController automatically register itself for /\{repositoryName\}%7B which passes security check for 

{code:java}
protected void configure(HttpSecurity http) throws Exception {
    http.authorizeRequests()
            .antMatchers(""\{repositoryName\}**"").hasRole(""ADMIN"")
            .and()
            .httpBasic();
}
{code}


e.g:

Let's say we have a book repository and a security configuration as follows:

{code:java}
@RepositoryRestController
public interface BookRepository extends JpaRepository<Book, Long> {
}

protected void configure(HttpSecurity http) throws Exception {
    http.authorizeRequests()
            .antMatchers(""/books/**"").hasRole(""ADMIN"")
            .and()
            .httpBasic();
}
{code}

accessing [http://foo.bar/books] and [http://foo.bar/books/] ask for authentication but [http://foo.bar/books%7B] exposes the data!

Working example is at the attachment [^spring security test %7B.rar]","Windows 10(10133), jdk1.8.0_40",,,,,,,,,,,,,,,,DATAREST-318,DATAREST-300,SEC-3027,DATAREST-267,DATAREST-268,,,,,"04/Jul/15 6:03 PM;onurshin;spring security test %7B.rar;https://jira.spring.io/secure/attachment/22927/spring+security+test+%257B.rar",,,,,,2015-07-06 02:00:11.796,9223372036854775807,issuemaster(issuemaster),,"0|i08kmv:",9223372036854775807,9223372036854775807,https://jira.spring.io/browse/SEC-3027,,,,,,,,,,,,,"06/Jul/15 4:36 AM;rstoya05-aop;I'll let Rob comment but I think the given configuration only secures ""/books"" + sub-URLs whereas everything else is not. So in this case ""/books{"" is not a secured URL. 

You'd probably want to secure everything first (e.g. {{.anyRequest().hasRole(""USER"")}} and then start exposing admin endpoints.","06/Jul/15 4:49 AM;onurshin;@Rossen Stoyanchev the problem is not in the security configuration. It should be okay if I want to secure only one endpoint. The problem here is that @RepositoryRestController answers to requests to /\{repository\}%7B which it should not. Or at least properly document about it if it is absolutely required.","06/Jul/15 7:43 AM;rwinch;[~olivergierke] You are correct that I changed the linked Spring Security issues visibility since it was a security exploit. The issue that was logged is essentially a copy of this issue.

As the user points out. The issue seems unrelated to Spring Security which is securing the URLs that it was instructed to.

The problem seems to be related to Spring Data REST's {{BaseUriAwareHandlerMapping}}. When {{BaseUriAwareHandlerMapping.lookupHandlerMethod(""/books{"", request)}} is invoked, [Spring DATA delegates|https://github.com/spring-projects/spring-data-rest/blob/2.2.3.RELEASE/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/BaseUriAwareHandlerMapping.java#L91] to {{BaseUri.getRepositoryLookupPath(String)}}. The result of {{BaseUri. getRepositoryLookupPath(String)}} is that the [lookup path is striped|https://github.com/spring-projects/spring-data-rest/blob/2.2.3.RELEASE/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/BaseUri.java#L114] of anything after the ""{"" from the lookup path. Ultimately this means a lookup path of ""/books{"" has the value ""/books"" passed into the super class.

The user can work around this issue with something like this:

{code}
http
    .authorizeRequests()
        .antMatchers(""/books*/**"").hasRole(""ADMIN"")
{code}

Often times we do recommend setting a default mapping that is very restrictive. This ensures something like this does not accidentally allow security to be bypassed. For example the following would also work:

{code}
http
    .authorizeRequests()
        .antMatchers(""/books/**"").hasRole(""ADMIN"")
        .anyRequest().denyAll()
{code}

Finally, the user can add method level security to the Spring Data Repositories to ensure there are multiple layers of security which provides ""defense in depth"".

All in all these seem to be working around the fact that Spring Data REST is mapping the URLs in a surprising manner.","06/Jul/15 8:32 AM;olivergierke;This seems to be caused mostly by us trying to be lenient with clients that do not expand URI templates correctly and submit them as they are. I've deployed the following changes to both the master branch and the Fowler maintenance one:

- remove the lenient URI handling when mapping requests to repository controllers. URIs containing template variables will cause a 404 from now on.
- to minimize the impact this has on clients I removed all URI templates from self links created, which means that self links will be canonical URIs by default now
- to make up for the loss in advertising customization options on a resource (e.g. the availability of projections) we now return additional links with the item resource relation without expanding the template. This basically leads to: {{self}} - canonical URI, {{$itemRel}} - potential URI template.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#982|https://github.com/spring-projects/spring-data-rest/issues/982]. ",,,,,,,,,,,,,,,,,,,
Non-public @RepositoryEventHandler are not made accessible prior to reflective invocation,DATAREST-606,64591,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,cbeams,cbeams,03/Jul/15 8:57 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,20/Jul/15 10:04 AM,2.3.1 (Fowler SR1),2.4 M1 (Gosling),,,2.3.2 (Fowler SR2),2.4 RC1 (Gosling),,,,,,0,,,,,"To reproduce:

1. Register a non-public {{@RepositoryEventHandler}} class with at least one {{@HandleBeforeCreate}}, {{@HandleBeforeSave}}, etc. method.
2. Try to create / save an entity through its repository.
3. Notice the following exception:

{noformat}
java.lang.IllegalStateException: Could not access method: Class org.springframework.util.ReflectionUtils can not access a member of class com.example.MyEventHandler with modifiers ""public""
	at org.springframework.util.ReflectionUtils.handleReflectionException(ReflectionUtils.java:271)
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:214)
	at org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.onApplicationEvent(AnnotatedEventHandlerInvoker.java:92)
{noformat}

The fix is to {{setAccessible(true)}} on the method prior to invoking it at {{AnnotatedEventHandler:92}}. ",spring-data-rest 2.4.0.BUILD-SNAPSHOT,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:20.662,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/187,"0|i08kl3:",9223372036854775807,9223372036854775807,,,Gosling RC1,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#979|https://github.com/spring-projects/spring-data-rest/issues/979]. ",,,,,,,,,,,,,,,,,,,,,,,
NullPointerExceptions when issuing PATCH requests on entities containing Map properties,DATAREST-605,64584,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,gochev,gochev,02/Jul/15 11:41 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,22/Jul/15 12:06 PM,2.3 GA (Fowler),2.4 M1 (Gosling),,,2.3.2 (Fowler SR2),2.4 RC1 (Gosling),,,,,,0,,,,,"The {{PATCH}} request when we have a {{Map}} in our entities doesn't work. I have a map containing the localizations values for an field.  The {{PUT}}/{{POST}} works correctly. Once I try to {{PATCH}} with {{application/json}} media type I get a {{NullPointerException}}.

Just send the following raw content as PATCH request body:

{code:javascript}
{
  ""name"": {
    ""bg_BG"": {
      ""value"": ""Мъже123""
    },
    ""en_GB"": {
      ""value"": ""Mens66""
    }
  }
}
{code}

The problem I guess is inside {{DomainObjectReader.doMerge(…)}}. Here once I hit the map property there is a check is {{nested != null}} and is it a property. Because {{property}} is true it invokes recursively the {{doMerge(…)}} method which at the beginning is trying to get {{entities.getPersistentEntity(…)}} but the argument passed is a {{PersistentMap}} and the result is {{null}}, so after that {{getJacksonProperties(…)}} of {{null}} throws an {{NPE}}. 

I am attaching a simple project containing a JUnit test that shows that (the test is called {{testPatchHttp}}).

Looking at the code I noticed that in {{JsonPatchHandler.apply(…)}} there is a check checking {{request.isJsonPatchRequest()}} which in case of {{application/json}} is {{false}}. (the case explained above) I tried to send content type of {{application/json-patch+json}} to go on the other route but there I also got an exception ""Can not deserialize instance of java.util.ArrayList out of START_OBJECT token"". I am attaching this test as well which is called ""+testPatchJsonPatchHttp+"".",Reproducible on all versions of Spring Data REST.,,,,,,,,,,,,,,,,,,,,,,,,,"02/Jul/15 11:40 PM;gochev;demo.zip;https://jira.spring.io/secure/attachment/22923/demo.zip",,,,,,2015-07-22 12:06:21.439,9223372036854775807,issuemaster(issuemaster),,"0|hzzzd5:zzzzzzzzzzy",9223372036854775807,9223372036854775807,,,59 - Evans / Fowler SR,Gosling RC1,,,,,,,,,,"22/Jul/15 12:06 PM;olivergierke;That should be in place in both master and the maintenance branch for Fowler. I got your test cases to work with a few gotchas. {{PATCH}} requests don't return {{201 Created}} but {{200 OK}} unless response bodies are explicitly turned off.

Your second test case is actually sending invalid data as it's not sending JSON Patch actually. I've improved the error message you get for the {{400 Bad Request}} to indicate potential format errors.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#978|https://github.com/spring-projects/spring-data-rest/issues/978]. ",,,,,,,,,,,,,,,,,,,,,,
"findBy + @Param expects an Id, which is not visible via REST",DATAREST-599,64466,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,otrosien,otrosien,27/Jun/15 4:33 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,17/Jul/15 1:40 PM,,,,,2.4 M1 (Gosling),,,,Repositories,,,0,,,,,"Hi,

here is another issue I came across while trying out Spring Data REST: 
IDs are, if I'm correct, intentionally not exposed in the resource body, as you're supposed to use the URL as primary identifier. 

This is a problem, because by exposing a repository finder Spring Data REST expects me to put the primary key as query param.

I put up a small example on github:

https://github.com/otrosien/spring-data-examples/tree/findQueryParamMismatch

This is the interesting part: How am I, as REST client, suppose to fill the query param for customer1?
{code}
public interface RelationshipRepository extends PagingAndSortingRepository<Relationship, Long> {
 Page<Relationship> findByCustomer1(@Param(""customer1"") Customer customer1, Pageable pageable);
{code}",,,,,,,,,,,,,,,,DATAREST-502,,,,,,,,,,,,,,,,2015-07-16 10:38:57.345,9223372036854775807,issuemaster(issuemaster),,"0|i08jtb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16/Jul/15 8:27 AM;otrosien;ping - any thoughts on this? Is there a conceptual mismatch or am I doing something wrong?","16/Jul/15 10:38 AM;olivergierke;If {{Customer}} is a managed type, a REST client will have to provide an identifier for {{customer1}}. Identifiers in a REST world are – as the name suggests – URIs. So that's what you'd submit.","16/Jul/15 9:52 PM;otrosien;Thanks for the reply. I'm aware of using the URI as identifier, but that's not the way Spring Data REST is rendering the resource for the finder at the moment. It is putting customer1 as query param, and there I am expected to put the internal ID, that's at least what I'm seeing here.

The UriTemplate looks like this (iirc): 
/relationships/search/findByCustomer1{?page,size,sort,customer1}

I tried putting the customer1 URI as query param, but that didn't work. It only worked putting the internal ID there.
","17/Jul/15 3:47 AM;olivergierke;That seems to have been fixed for DATAREST-502 already available in Gosling M1. Would you mind to give that a spin?","17/Jul/15 12:20 PM;otrosien;@ogierke: You're right. This is a duplicate of DATAREST-502. It works in M1 and thus can be closed.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#973|https://github.com/spring-projects/spring-data-rest/issues/973]. ",,,,,,,,,,,,,,,,,,
AlpsController not working on Spring 4.2,DATAREST-597,64445,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,25/Jun/15 6:43 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,09/Jul/15 9:01 AM,2.2.2 (Evans SR2),2.3 GA (Fowler),2.4 M1 (Gosling),,2.4 RC1 (Gosling),,,,API Documentation,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:19.672,9223372036854775807,issuemaster(issuemaster),,"0|i08jon:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#971|https://github.com/spring-projects/spring-data-rest/issues/971]. ",,,,,,,,,,,,,,,,,,,,,,,
Fix small typo in reference docs,DATAREST-596,64430,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Trivial,Fixed,olivergierke,gregturn,gregturn,24/Jun/15 7:46 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,09/Jul/15 9:52 AM,,,,,2.3.2 (Fowler SR2),2.4 RC1 (Gosling),,,Documentation,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:19.512,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/186,"0|hzzzd5:zzzzzzzzzzv",9223372036854775807,9223372036854775807,https://github.com/spring-projects/spring-data-rest/pull/183,,59 - Evans / Fowler SR,Gosling RC1,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#970|https://github.com/spring-projects/spring-data-rest/issues/970]. ",,,,,,,,,,,,,,,,,,,,,,,
Extending SpringBootRepositoryRestMvcConfiguration removes jacksonObjectMapper bean,DATAREST-594,64411,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,endrec,endrec,23/Jun/15 8:44 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,27/Jul/15 5:30 AM,2.3 GA (Fowler),,,,,,,,,,,0,,,,,"I have an application where I am auto-wiring {{ObjectMapper}} as 

{code:java}
@Autowired
@Qualifier(""jacksonObjectMapper"")
private ObjectMapper mapper;
{code}

If I create a class (with empty body even), which extends {{SpringBootRepositoryRestMvcConfiguration}}, this code breaks, because there is no {{jacksonObjectMapper}} bean. There are other {{ObjectMapper}} instances, but they behave differently. Extending a class should not change the applications behavior.",Spring Boot 1.2.4.RELEASE,,,,,,,,,,,,,,,DATAREST-621,,,,,,DATAREST-621,,,,,,,,,,2015-06-23 09:03:18.324,9223372036854775807,issuemaster(issuemaster),,"0|i08jhz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"23/Jun/15 9:03 AM;olivergierke;What exactly is the bug here? Neither {{RepositoryRestMvcConfiguration}} nor {{SpringBootRepositoryRestMvcConfiguration}} creates a bean named {{jacksonObjectMapper}}. So the injection failing is basically just right, except you create a bean of that type and name yourself.

I also don't get you statement about extending a class breaking things. First, I don't see anything broken, second: adding configuration classes usually registers additional beans. Thus, of course the autowiring result can differ depending on what gets imported. This has nothing to do with inheritance.","22/Jul/15 3:50 AM;endrec;Exactly, that is the problem. :) ""Neither {{RepositoryRestMvcConfiguration}} nor {{SpringBootRepositoryRestMvcConfiguration}} creates a bean named {{jacksonObjectMapper}}. "" Some other part of the framework ({{org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration$JacksonObjectMapperConfiguration.class}}) does, but still, when I extend {{SpringBootRepositoryRestMvcConfiguration}}, the {{jacksonObjectMapper}} bean is not created any more.



","22/Jul/15 5:52 AM;olivergierke;You might wanna have a look at the APIs introduced for DATAREST-621, which separate the customization bits from the configuration class and thus avoid the need to extend the latter. We explicitly introduced this new API to prevent any unforeseen things to happen in a more involved scenario (i.e. in Boot). Does that already fix your issue?","22/Jul/15 7:14 AM;endrec;I can not test it right now, but DATAREST-621 exactly describes my situation (for which my workaround is reintroducing a {{@Primary @Bean ObjectMapper}}), so most likely that will fix my issue as well.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#968|https://github.com/spring-projects/spring-data-rest/issues/968]. ",,,,,,,,,,,,,,,,,,,
ResourceSupportHttpMessageConverter does not reject generic type requests,DATAREST-588,64366,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,19/Jun/15 7:56 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,23/Jun/15 9:27 AM,2.2.2 (Evans SR2),2.3 GA (Fowler),2.4 M1 (Gosling),,2.2.3 (Evans SR3),2.3.1 (Fowler SR1),2.4 RC1 (Gosling),,,,,0,,,,,"{{ResourceSupportHttpMessageConverter}} does not implement {{canRead(Type, Class<?>, MediaType)}} which causes the converter being considered for types that don't match the configured one. There is a downstream [ticket in Spring HATEOAS|https://github.com/spring-projects/spring-hateoas/issues/360] but we should also fix that locally for maintenance branches that cannot upgrade to that version for compatibility reasons.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:18.596,9223372036854775807,issuemaster(issuemaster),,"0|i08j9r:",9223372036854775807,9223372036854775807,,,59 - Evans / Fowler SR,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#962|https://github.com/spring-projects/spring-data-rest/issues/962]. ",,,,,,,,,,,,,,,,,,,,,,,
Secured event handler method invoked twice,DATAREST-582,64317,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,endrec,endrec,17/Jun/15 11:23 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,06/Jul/15 4:01 AM,2.3 GA (Fowler),,,,2.3.1 (Fowler SR1),2.4 RC1 (Gosling),,,,,,0,,,,,"If I annotate my event handler methods with a Pre/Post annotation, it is added to the {{handlerMethods(…)}} twice, and as a consequence invoked twice.
I suppose this is not the intended behavior. 

{code:java}
@Slf4j
@RepositoryEventHandler(User.class)
public class UserEventHandler {

    @HandleBeforeCreate
    @PreAuthorize(""hasRole('ROLE_ADMIN'))
    public void handleNewUser(User newUser) {
        log.debug(""Handle user {}"", newUser);
       // processing here
    }
}
{code}

The two handlers in the map (package names removed) are

{code:java}
EventHandlerMethod{ 
    targetType=class User, 
    method=public final void  UserEventHandler$$EnhancerBySpringCGLIB$$a9872696.handleNewUser(User), 
    handler=UserEventHandler@77e9dca8 
}
{code}

and

{code:java}
EventHandlerMethod{ 
    targetType=class User, 
    method=public void UserEventHandler.handleNewUser(User), 
    handler=UserEventHandler@77e9dca8 
}
{code}

The {{EnhancerBySpringCGLIB}} version is not in the map when {{@PreAuthorize}} is removed.",Spring Boot 1.2.4.RELEASE,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-07-06 04:01:39.353,9223372036854775807,issuemaster(issuemaster),,"0|i08iyv:",9223372036854775807,9223372036854775807,,,Gosling RC1,,,,,,,,,,,"06/Jul/15 4:01 AM;olivergierke;This should be fixed. We now make sure we only inspect the user class for handler methods.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#956|https://github.com/spring-projects/spring-data-rest/issues/956]. ",,,,,,,,,,,,,,,,,,,,,,
ETag getVersionInformation fails with proxied Entities for projections,DATAREST-581,64316,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,timtebeek,timtebeek,17/Jun/15 9:50 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,16/Jul/15 10:57 AM,2.3 GA (Fowler),,,,2.3.1 (Fowler SR1),2.4 RC1 (Gosling),,,,,,0,regression,,,,"See the reference GitHub project.

I've got an @Entity with a @Version'ed field, a @Projection, and a Repository. When I try to GET the projection of a single entry, I get a 500 Internal server error, because of a failed assertion in BasicPersistentEntity line 394, as called from Etag line 191:
> Assert.isTrue(getType().isInstance(bean), ""Target bean is not of type of the persistent entity!"");

The argument bean here is of type $Proxy90 / JdkDynamicAopProxy, not Book.

The projection only works again when the @Version annotation is removed. This is since Fowler, as I had no such issues with Evans.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-06-17 09:59:22.045,9223372036854775807,issuemaster(issuemaster),,"0|i08iyn:",9223372036854775807,9223372036854775807,https://github.com/timtebeek/etag-projection,,,,,,,,,,,,,"17/Jun/15 9:59 AM;olivergierke;Do you have a stack trace handy? Actually all request preparing code should see the actual domain object, not a projection but I'd have a look.","18/Jun/15 3:07 AM;timtebeek;There's no stacktrace that shows up in the app-server log, just a 500 response to the client.

It's a simple IllegalArgumentException that's thrown with the message:
""Target bean is not of type of the persistent entity!""
Through:
- org.springframework.util.Assert line 68
- org.springframework.data.mapping.model.BasicPersistentEntity line 394
- org.springframework.data.rest.webmvc.support.ETag line 191","18/Jun/15 5:06 AM;olivergierke;Okay, a reproducing sample project maybe?","18/Jun/15 5:33 AM;timtebeek;See reference url: https://github.com/timtebeek/etag-projection
","18/Jun/15 5:40 AM;olivergierke;Doh! Stupid me… I'll have a look.","19/Jun/15 1:36 AM;timtebeek;Saw some linked commits already; Thanks for looking into this!
Anything I can do / test / update past this point, or is testing already covered by  the new `createsEtagForProjectedEntityCorrectly` now?","19/Jun/15 3:58 AM;olivergierke;I just wanted to make sure the snapshot builds for both branches build and had to go down a rabbit hole of other issues. Both 2.4 and 2.3.1 snapshots should be available for testing.","14/Jul/15 8:13 AM;timtebeek;Issue can be closed: Was fixed in spring-data-rest 2.3.1. Thanks a lot!","09/Nov/15 5:48 PM;wertklop;Problem again resume, but for PUT method:

{code:java}
java.lang.IllegalArgumentException: Target bean is not of type of the persistent entity!
	at org.springframework.util.Assert.isTrue(Assert.java:68) ~[spring-core-4.2.2.RELEASE.jar:4.2.2.RELEASE]
	at org.springframework.data.mapping.model.BasicPersistentEntity.getPropertyAccessor(BasicPersistentEntity.java:394) ~[spring-data-commons-1.11.0.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.support.ETag.getVersionInformation(ETag.java:191) ~[spring-data-rest-webmvc-2.4.0.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.support.ETag.from(ETag.java:76) ~[spring-data-rest-webmvc-2.4.0.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.AbstractRepositoryRestController.prepareHeaders(AbstractRepositoryRestController.java:171) ~[spring-data-rest-webmvc-2.4.0.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.AbstractRepositoryRestController.prepareHeaders(AbstractRepositoryRestController.java:157) ~[spring-data-rest-webmvc-2.4.0.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.RepositoryEntityController.saveAndReturn(RepositoryEntityController.java:495) ~[spring-data-rest-webmvc-2.4.0.RELEASE.jar:na]
{code}","10/Nov/15 8:07 AM;wertklop;Problem solved. We are use Backbone on frontend and for getting model apply projection. Therefore before save model must be

{code:javascript}
this.model.unset(""projection"");
this.form.model.save(...);
{code}","03/Feb/16 1:48 PM;nugs;Raised DATAREST-761 as a similar issue or possible regression.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#955|https://github.com/spring-projects/spring-data-rest/issues/955]. ",,,,,,,,,,,,
Insufficient check for the presence of a PersistentProperty in MappedProperties,DATAREST-575,64247,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,ptahchiev,ptahchiev,12/Jun/15 5:57 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,23/Oct/16 6:54 PM,2.4 M1 (Gosling),,,,2.4.7 (Gosling SR7),2.5.5 (Hopper SR5),2.6 RC1 (Ingalls),,,,,1,,,,,"Hello,

I just issued a PUT request towards my {{/rest/variant/564477030778624}} and I got the following exception:
{code}
2015-06-12 15:53:28,025 org.springframework.data.rest.webmvc.RepositoryRestExceptionHandler [http-nio-8112-exec-2] ERROR: Could not read an object of type class com.samplestore.core.model.catalog.ProjectVariantProductModel from the request!; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: Could not read payload!; nested exception is java.lang.NullPointerException
org.springframework.http.converter.HttpMessageNotReadableException: Could not read an object of type class com.samplestore.core.model.catalog.ProjectVariantProductModel from the request!; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: Could not read payload!; nested exception is java.lang.NullPointerException
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.readPutForUpdate(PersistentEntityResourceHandlerMethodArgumentResolver.java:197)
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.read(PersistentEntityResourceHandlerMethodArgumentResolver.java:169)
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.resolveArgument(PersistentEntityResourceHandlerMethodArgumentResolver.java:125)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:129)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:776)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:705)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:879)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:691)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:770)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:291)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at com.nemesis.platform.core.filter.CorsFilter.doFilterInternal(CorsFilter.java:41)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:146)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:107)
	at org.springframework.session.web.http.SessionRepositoryFilter.doFilterInternal(SessionRepositoryFilter.java:111)
	at org.springframework.session.web.http.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:65)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:112)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:73)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at com.samplestore.storefront.filter.RequestLoggerFilter.doFilterInternal(RequestLoggerFilter.java:80)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:102)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:139)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:199)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.access.channel.ChannelProcessingFilter.doFilter(ChannelProcessingFilter.java:144)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration$MetricsFilter.doFilterInternal(MetricFilterAutoConfiguration.java:90)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504)
	at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:683)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:421)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1074)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:611)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1739)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1698)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.http.converter.HttpMessageNotReadableException: Could not read payload!; nested exception is java.lang.NullPointerException
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.merge(DomainObjectReader.java:138)
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.readPut(DomainObjectReader.java:130)
	at org.springframework.data.rest.webmvc.config.JsonPatchHandler.applyPut(JsonPatchHandler.java:134)
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.readPutForUpdate(PersistentEntityResourceHandlerMethodArgumentResolver.java:194)
	... 114 more
Caused by: java.lang.NullPointerException
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.getJacksonProperties(DomainObjectReader.java:207)
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.doMerge(DomainObjectReader.java:158)
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.doMerge(DomainObjectReader.java:188)
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.merge(DomainObjectReader.java:136)
	... 117 more
{code}",,,,,,,,,,,,DATAREST-574,,,,,,,,,,,,,,,,,,,,2015-06-12 06:14:41.049,9223372036854775807,issuemaster(issuemaster),,"0|i08ijb:",9223372036854775807,9223372036854775807,,,Kay M1,,,,,,,,,,,"12/Jun/15 6:09 AM;ptahchiev;I forgot to mention I'm on {{Gosling-M1}} and after some debugging this is the line that breaks:
{code}
BeanDescription description = introspector.forDeserialization(mapper.getDeserializationConfig(),
				mapper.constructType(entity.getType()), mapper.getDeserializationConfig());
{code}

and I can see that it succeeds for 5 times, but the sixth execution has {{entity}} as null, so {{entity.getType}} blows with the null-pointer exception.","12/Jun/15 6:14 AM;madorb;This looks like the same issue as i reported just last night. https://jira.spring.io/browse/DATAREST-574 - check it out does that seem to match your use case?","14/Jun/15 2:25 AM;olivergierke;@Petar - it doesn't really help reporting every bug you file as blocker as it most likely isn't. Your domain class setup is pretty special, so that issues you see might not necessarily be as crucial for most of our developers. It would be tremendously helpful to get a reproducing project for the very same reason, too.

@Ben - I don't think this is related as you're issue is talking about property lookup but Petar is facing the metadata lookup failing due to a special interfaces-for-domain-types scenario.","20/Jun/15 8:37 AM;ptahchiev;@ogierke Sorry, my bad - i literally thought 'Blocker' is an issue that's blocking me :( .. BTW I just checked today and I no longer see this issue. I was able to send a successful PUT request to existing variant. I guess something in the last 6 days was changed, and since I'm in the SNAPSHOT train it's been resolved. Sorry for the hassle.","23/Jun/15 12:38 PM;ptahchiev;OK, it fails when trying to PATCH a property of type {{Map}}. Here's my request:
{code}
{name: ""{""bg_BG"":{""value"":""\u041c\u044a\u0436\u0435123""},""en_GB"":{""value"":""Mens66""}}""}
{code}

and the exception is:
{code}
Caused by: java.lang.NullPointerException
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.getJacksonProperties(DomainObjectReader.java:207)
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.doMerge(DomainObjectReader.java:158)

{code}

because on that line the {{PersistentEntity<?, ?> entity}} is null and you do:
{code}
mapper.constructType(entity.getType()), mapper.getDeserializationConfig())
{code}

I will come up with a simple repository to reproduce this problem later today or tomorrow.","22/Oct/16 8:19 PM;bryankramer;It would be really nice if after line 174 in  spring-data-rest/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/json/DomainObjectReader.java 
an exception was thrown containing the field name of the property so that there isn't an anonymous null pointer exception later. 

I am seeing this a lot, but regardless of the cause, an exception with the field name  would make it so much easier to debug.","23/Oct/16 2:45 PM;olivergierke;[~bryankramer] — Care to elaborate how {{mappedProperties.getPersistentProperty(fieldName)}} can ever return {{null}} if a few lines above we explicitly check for a property for that field name being present (through {{mappedProperties.hasPersistentPropertyForField(fieldName)}})?

It'd be really cool to see a test case that actually reproduces said behavior.","23/Oct/16 2:55 PM;olivergierke;Nevermind. The culprit are properties that are Jackson ones, but not Spring Data persistent properties (e.g. ones with {{@Transient}}) and the way we check for the presence of a persistent property in {{MappedProperties.hasPersistentPropertyForField(…)}} as the {{null}} {{PersistentProperty}} still gets added to the cached map.","23/Oct/16 6:54 PM;olivergierke;That's in place, feel free to give the snapshots a try.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#949|https://github.com/spring-projects/spring-data-rest/issues/949]. ",,,,,,,,,,,,,,
java.lang.NoSuchMethodError: org.springframework.hateoas.core.EmbeddedWrappers.emptyCollectionOf,DATAREST-570,64200,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Works as Designed,olivergierke,ptahchiev,ptahchiev,09/Jun/15 8:19 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,16/Jun/15 6:37 AM,,,,,,,,,,,,0,,,,,"Hello,

I'm using {{Gosling-M1}} and when I call: https://localhost:8112/storefront/rest/product/564472715204160/filters on a product that has no filters I get a 500 status code with this exception:
{code}
2015-06-09 18:13:59,472 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/storefront].[restDispatcherServlet] [http-nio-8112-exec-1] ERROR: Servlet.service() for servlet [restDispatcherServlet] in context with path [/storefront] threw exception [Handler processing failed; nested exception is java.lang.NoSuchMethodError: org.springframework.hateoas.core.EmbeddedWrappers.emptyCollectionOf(Ljava/lang/Class;)Lorg/springframework/hateoas/core/EmbeddedWrapper;] with root cause
java.lang.NoSuchMethodError: org.springframework.hateoas.core.EmbeddedWrappers.emptyCollectionOf(Ljava/lang/Class;)Lorg/springframework/hateoas/core/EmbeddedWrapper;
	at org.springframework.data.rest.webmvc.AbstractRepositoryRestController.entitiesToResources(AbstractRepositoryRestController.java:136)
	at org.springframework.data.rest.webmvc.AbstractRepositoryRestController.toResources(AbstractRepositoryRestController.java:90)
	at org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController$1.apply(RepositoryPropertyReferenceController.java:128)
	at org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController$1.apply(RepositoryPropertyReferenceController.java:117)
	at org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.doWithReferencedProperty(RepositoryPropertyReferenceController.java:444)
	at org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.followPropertyReference(RepositoryPropertyReferenceController.java:149)
	at sun.reflect.GeneratedMethodAccessor370.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springsource.loaded.ri.ReflectiveInterceptor.jlrMethodInvoke(ReflectiveInterceptor.java:1270)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:776)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:705)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857)

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-06-09 08:27:59.295,9223372036854775807,issuemaster(issuemaster),,"0|i08i9b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"09/Jun/15 8:27 AM;olivergierke;Spring HATEOAS 0.17.0…","10/Jun/15 4:10 AM;ptahchiev;Yep, although spring-data-rest-core brings 0.16:
{code}
petar@petar-ThinkPad-X1-Carbon:~/workspace/nemesis-archetype/storefront$ mvn dependency:tree -Dverbose=true -Dincludes=org.springframework.hateoas
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Samplestore Storefront 0.6-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-dependency-plugin:2.9:tree (default-cli) @ storefront ---
[WARNING] Using Maven 2 dependency tree to get verbose output, which may be inconsistent with actual Maven 3 resolution
Downloading: https://oss.sonatype.org/content/repositories/snapshots/ma/glasnost/orika/orika-parent/1.4.6-SNAPSHOT/maven-metadata.xml
Downloading: http://download.java.net/maven/2/ma/glasnost/orika/orika-parent/1.4.6-SNAPSHOT/maven-metadata.xml
Downloading: http://repository.jboss.org/maven2/ma/glasnost/orika/orika-parent/1.4.6-SNAPSHOT/maven-metadata.xml
[INFO] com.nemesis.archetype:storefront:war:0.6-SNAPSHOT
[INFO] \- com.nemesis.archetype.module.search:b2c-module-solrsearch:jar:0.6-SNAPSHOT:compile
[INFO]    \- com.nemesis.archetype:b2c-core:jar:0.6-SNAPSHOT:compile
[INFO]       \- com.nemesis.platform:nemesis-platform-core:jar:0.6-SNAPSHOT:compile
[INFO]          \- org.springframework.boot:spring-boot-starter-data-rest:jar:1.2.3.RELEASE:compile
[INFO]             \- org.springframework.data:spring-data-rest-webmvc:jar:2.4.0.M1:compile (version managed from 2.2.2.RELEASE)
[INFO]                \- org.springframework.data:spring-data-rest-core:jar:2.4.0.M1:compile
[INFO]                   \- org.springframework.hateoas:spring-hateoas:jar:0.16.0.RELEASE:compile (version managed from 0.17.0.RELEASE)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:24 min
[INFO] Finished at: 2015-06-10T13:55:56+03:00
[INFO] Final Memory: 89M/995M
[INFO] ------------------------------------------------------------------------
{code}

spring-hateoas:0.17 works fine - you can close this issue.","10/Jun/15 4:22 AM;olivergierke;Nope, it doesn't, see [this|http://repo.spring.io/libs-milestone/org/springframework/data/spring-data-rest-core/2.4.0.M1/spring-data-rest-core-2.4.0.M1.pom]. What the tree is telling you is that it would've pulled in 0.17 but something in your dependency tree pulls in 0.16 on a more-direct level, thus it resolves to 0.16 and indicates the conflict in the `(version managed…)` clause.","10/Jun/15 4:26 AM;ptahchiev;Hmm.. interesting. I'm not really sure what brings 0.16 though - it might be some of spring-boot-*rest*-starter ones. Anyways, thanks for your help :)","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#944|https://github.com/spring-projects/spring-data-rest/issues/944]. ",,,,,,,,,,,,,,,,,,,
"""Content-Type: text/uri-list"" request fails for unexpanded URI templates",DATAREST-569,64195,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Works as Designed,olivergierke,muenchdo,muenchdo,09/Jun/15 4:31 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,07/Dec/16 8:38 PM,,,,,,,,,,,,0,,,,,"When trying to link up entities by performing a PUT request with {{""Content-Type: text/uri-list""}} to an URI containing the unexpanded URI template, the request fails with status 400.

The server throws an {{IllegalArgumentException}}:
{{Can not set java.lang.Long field \[property annotated with @id\] to org.springframework.hateoas.Resources}}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-06-16 07:13:40.742,9223372036854775807,issuemaster(issuemaster),,"0|i08i87:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16/Jun/15 7:13 AM;olivergierke;That's what I would expect. A URI template is not a URI. So technically speaking 400 is the right error code to return. But I agree that we can maybe become a bit more lenient here. What is the payload you send to what kind of resource? Do you have the complete stack trace handy?","16/Jun/15 7:21 AM;olivergierke;Which version are you actually seeing this in? I see DATAREST-316 introduced defensive URI template handling in the {{UriStringDeserializer}}.","07/Dec/16 8:38 PM;olivergierke;Resolving as the described behavior is appropriate. Feel free to reopen with additional insights.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#943|https://github.com/spring-projects/spring-data-rest/issues/943]. ",,,,,,,,,,,,,,,,,,,,
Hal Browser does not seem to work with spring boot with a non-default context-path,DATAREST-565,64139,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,madorb,madorb,05/Jun/15 2:09 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,01/Apr/16 10:37 AM,2.4 M1 (Gosling),,,,2.4 RC1 (Gosling),,,,API Documentation,,,0,,,,,"if i have server.contextpath=foo in my application.properties 

and i go to localhost:8080/foo/ i am redirected to localhost:8080/browser/index.html which is 404. It if i navigate to: localhost:8080/foo/browser/index.html it also redirects me to that same place. 

Hal Browser needs to take context path into account.",,,,,,,,,,,,,,,,,DATAREST-720,,,,,,,,,,,,,,,2015-06-16 06:33:34.907,9223372036854775807,issuemaster(issuemaster),,"0|i08hwn:",9223372036854775807,9223372036854775807,,,59 - Evans / Fowler SR,,,,,,,,,,,"11/Jun/15 9:15 AM;madorb;This also doesn't seem to work properly when deploying a war to a container with a context root other than ""/"". 

For instance hitting:

http://myserver.com/my-app-path/
redirects to
http://myserver.com/browser/index.html which obviously doesn't exist

if i manually point to http://myserver.com/my-app-path/browser/index.html the browser comes up, but it isn't pointing to my API endpoitns it's assuming app is still at http://myserver.com/ i have to manually enter the http://myserver.com/my-app-path/ in the input box to actually see my api.","11/Jun/15 9:16 AM;madorb;I'd suggest that unless this is fixed the hal browser extension should not be released - so i'll mark this as blocker, obviously it's y'alls decision though :-)","16/Jun/15 6:33 AM;olivergierke;Good catch, this is fixed in the latest snapshots.","23/Mar/16 6:23 PM;Beennn;There is still an issue : at the end of the url, the request contextPath should also be added :
new RedirectView(basePath.concat(BROWSER_INDEX).concat(""#"").concat(basePath), true);
=>
new RedirectView(basePath.concat(BROWSER_INDEX).concat(""#"").concat(contextPath+basePath), true);
If not the default path relates to an invalid url.","30/Mar/16 3:19 PM;Beennn;There is still a need to add the ContextPath also to the anchor, see my comment","01/Apr/16 10:37 AM;olivergierke;Please do not re-open tickets that have been marked resolved against an already released version as that basically renders the published and immutable change logs invalid. There's a follow up ticket for the problem you outline with DATAREST-720.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#900|https://github.com/spring-projects/spring-data-rest/issues/900]. ",,,,,,,,,,,,,,,,,
_embedded sometimes missing in output JSON,DATAREST-560,63992,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Invalid,olivergierke,vicmosin,vicmosin,28/May/15 3:01 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,10/Jun/15 5:42 AM,2.4 M1 (Gosling),,,,,,,,,,,0,,,,,"Can't figure out what exactly makes this happen.. Both objects have the same relations, one contains _embedded, second not.. After restarting the server nothing changed..

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:15.301,9223372036854775807,issuemaster(issuemaster),,"0|i08h2f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"28/May/15 4:33 AM;vicmosin;Caching issue.. Between attempts I removed the excerption annotation, tried ones and returned it. After that I didn't changed the object so it cached.
Issue closed","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#935|https://github.com/spring-projects/spring-data-rest/issues/935]. ",,,,,,,,,,,,,,,,,,,,,,
PUT/PATCH does not consider custom Jackson field naming strategy,DATAREST-556,63919,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,phleb4s,phleb4s,26/May/15 7:33 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,26/May/15 9:57 AM,2.2.2 (Evans SR2),,,,2.2.3 (Evans SR3),2.3.1 (Fowler SR1),2.4 M1 (Gosling),,,,,0,,,,,"1. git clone https://github.com/spring-guides/gs-accessing-data-rest.git
2. use spring.jackson.property-naming-strategy=PASCAL_CASE_TO_CAMEL_CASE
3. PUT/PATCH fails.

org.springframework.data.rest.webmvc.json.DomainObjectReader:170 will remove valid property names required by the objectMapper later on. 

If one posts camelCase properties instead, the objectMapper will ignore them.

Possible fix is to simply not remove properties so eagerly (Line 170) and let the objectMapper decide.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-05-26 09:57:45.39,9223372036854775807,issuemaster(issuemaster),,"0|i08gvz:",9223372036854775807,9223372036854775807,,,58 - Gosling M1,,,,,,,,,,,"26/May/15 9:57 AM;olivergierke;Good catch! I've revised the property handling in {{DomainObjectMerger}} and ported the fix back to Evans and Fowler maintenance branches. Snapshots available, feel free to give them a spin.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#931|https://github.com/spring-projects/spring-data-rest/issues/931]. ",,,,,,,,,,,,,,,,,,,,,,
Remove deprecated support for RepositoryRestConfiguration.setBaseUri(…),DATAREST-553,63858,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,gregturn,olivergierke,olivergierke,21/May/15 2:19 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,01/Jun/15 5:26 AM,,,,,2.4 M1 (Gosling),,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:14.493,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/178,"0|hzzzk9:zzzzzzzzzzz",9223372036854775807,9223372036854775807,,,57 - Fowler Aftermath,58 - Gosling M1,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#928|https://github.com/spring-projects/spring-data-rest/issues/928]. ",,,,,,,,,,,,,,,,,,,,,,,
RepositorySearchesResource shouldn't expose domain type,DATAREST-549,63819,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,18/May/15 10:40 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,18/May/15 10:52 AM,,,,,2.3.1 (Fowler SR1),2.4 M1 (Gosling),,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:14.029,9223372036854775807,issuemaster(issuemaster),,"0|i08gav:",9223372036854775807,9223372036854775807,,,57 - Fowler Aftermath,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#924|https://github.com/spring-projects/spring-data-rest/issues/924]. ",,,,,,,,,,,,,,,,,,,,,,,
"ExcerptProjection not applied in on the response at POST, PUT or PATCH",DATAREST-548,63808,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Works as Designed,olivergierke,Plutoz,Plutoz,18/May/15 6:59 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,19/May/15 1:48 AM,,,,,,,,,,,,0,,,,,"When I set {{spring.data.rest.returnBodyOnCreate}} and {{spring.data.rest.returnBodyOnUpdate}} properties to {{true}}, the response ignores the default projection set at {{@RepositoryRestResource}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-05-18 07:04:56.069,9223372036854775807,issuemaster(issuemaster),,"0|i08g8n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18/May/15 7:02 AM;Plutoz;Sorry for the wrong project... this is related to Spring Data Rest.","18/May/15 7:04 AM;olivergierke;There is no such thing as a default projection. Excerpt projections don't get applied to item resources, as they're not embedding anything in the first place but render the resource (as I've just today explained [here|http://stackoverflow.com/questions/30220333/why-is-an-excerpt-projection-not-applied-automatically-for-a-spring-data-rest-it/30297320#30297320]). If you want the response to be rendered using a projection, expanding the URI template's {{projection}} parameter is the way to go.","19/May/15 12:02 AM;Plutoz;Thanks for feedback. POST with explicit {{url?projection=projName}} solved my problem.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#923|https://github.com/spring-projects/spring-data-rest/issues/923]. ",,,,,,,,,,,,,,,,,,,,
HttpMessageNotWritableException when accessing a property of an entity.,DATAREST-545,63797,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Works as Designed,olivergierke,ptahchiev,ptahchiev,18/May/15 1:11 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,18/May/15 3:50 AM,,,,,,,,,,,,0,,,,,"In my project I have a {{price}} and that {{price}} has an entity of type {{currency}}. When I try to open: https://solarapparel.com:8112/storefront/rest/price/14356714754680048/currency I get this exception:

{noformat}
org.springframework.http.converter.HttpMessageNotWritableException
message=Could not write content: No serializer found for class org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: org.springframework.data.rest.webmvc.json.[""content""]->com.nemesis.platform.module.commerce.core.model.i18n.CurrencyModel_$$_jvst433_32[""handler""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: org.springframework.data.rest.webmvc.json.[""content""]->com.nemesis.platform.module.commerce.core.model.i18n.CurrencyModel_$$_jvst433_32[""handler""])
trace=org.springframework.http.converter.HttpMessageNotWritableException: Could not write content: No serializer found for class org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: org.springframework.data.rest.webmvc.json.[""content""]->com.nemesis.platform.module.commerce.core.model.i18n.CurrencyModel_$$_jvst433_32[""handler""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: org.springframework.data.rest.webmvc.json.[""content""]->com.nemesis.platform.module.commerce.core.model.i18n.CurrencyModel_$$_jvst433_32[""handler""]) at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:238) at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:208) at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:161) at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:146) at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:71) at org.springframework.data.rest.webmvc.ResourceProcessorHandlerMethodReturnValueHandler.handleReturnValue(ResourceProcessorHandlerMethodReturnValueHandler.java:172) at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:71) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:126) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:776) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:705) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857) at javax.servlet.http.HttpServlet.service(HttpServlet.java:668) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) at javax.servlet.http.HttpServlet.service(HttpServlet.java:770) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:291) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) at com.nemesis.platform.core.filter.CorsFilter.doFilterInternal(CorsFilter.java:41) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:107) at org.springframework.session.web.http.SessionRepositoryFilter.doFilterInternal(SessionRepositoryFilter.java:111) at org.springframework.session.web.http.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:65) at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:112) at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:73) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:146) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) at com.samplestore.storefront.filter.RequestLoggerFilter.doFilterInternal(RequestLoggerFilter.java:80) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:102) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:139) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:199) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.access.channel.ChannelProcessingFilter.doFilter(ChannelProcessingFilter.java:144) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) at org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration$MetricsFilter.doFilterInternal(MetricFilterAutoConfiguration.java:90) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:683) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:421) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1074) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:611) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1739) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1698) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:745) Caused by: com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: org.springframework.data.rest.webmvc.json.[""content""]->com.nemesis.platform.module.commerce.core.model.i18n.CurrencyModel_$$_jvst433_32[""handler""]) at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:59) at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:26) at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:505) at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:639) at com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer.serialize(UnwrappingBeanSerializer.java:118) at com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter.serializeAsField(UnwrappingBeanPropertyWriter.java:112) at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:639) at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:152) at com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeValue(SerializerProvider.java:896) at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$PersistentEntityResourceSerializer.serialize(PersistentEntityJackson2Module.java:181) at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$PersistentEntityResourceSerializer.serialize(PersistentEntityJackson2Module.java:117) at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:128) at com.fasterxml.jackson.databind.ObjectMapper.writeValue(ObjectMapper.java:1902) at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:231) ... 115 more 
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-05-18 01:16:01.082,9223372036854775807,issuemaster(issuemaster),,"0|i08g67:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18/May/15 1:16 AM;olivergierke;This is caused by a Hibernate proxy. Do you have the Hibernate Jackson module in place?","18/May/15 1:26 AM;ptahchiev;I do have it:
{code}
- com.fasterxml.jackson.datatype:jackson-datatype-hibernate4:jar:2.4.5:compile
{code}

However, now that I think about it - I'm using hibernate 5.0 beta2 and this is a jackson datatype module for hibernate4 ... I will downgrate hibernate.","18/May/15 2:25 AM;ptahchiev;Just to confirm - it works fine with hibernate 4.3.x - i guess it's a problem of the jackson-datatype.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#921|https://github.com/spring-projects/spring-data-rest/issues/921]. ",,,,,,,,,,,,,,,,,,,,
Excerpting works only within getting the list of items,DATAREST-544,63795,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Works as Designed,olivergierke,vicmosin,vicmosin,18/May/15 12:01 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,18/May/15 12:27 AM,,,,,,,,,,,,0,,,,,"{code:java}
excerptProjection
{code}
annotation seems to be non-working. It adds the projection output only to one default method - get list of entities, but any others are not affected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-05-18 00:27:02.295,9223372036854775807,issuemaster(issuemaster),,"0|i08g5r:",9223372036854775807,9223372036854775807,http://stackoverflow.com/questions/30220333/excerptprojection-doesnt-work-for-custom-methods,,,,,,,,,,,,,"18/May/15 12:27 AM;olivergierke;See my answer to your StackOverflow question.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#920|https://github.com/spring-projects/spring-data-rest/issues/920]. ",,,,,,,,,,,,,,,,,,,,,,
PersistentEntityResourceHandlerMethodArgumentResolver dump in PUT/PATCH requests with complex HashMap,DATAREST-541,63742,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Cannot Reproduce,olivergierke,Sebastian,Sebastian,13/May/15 10:17 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,02/Nov/15 3:44 PM,2.2.2 (Evans SR2),2.3 GA (Fowler),,,,,,,,,,0,,,,,"This issue is related to [DATAREST-491|https://jira.spring.io/browse/DATAREST-491]

When the hashmap contains also a complex type and not only simple types the same dump occurs.


{code:java}
@Document
public class Ticket {

	@Id
	private String id;

	@Version
	private Long version;

	private String type;

	private Map<String, Value> texts;
}

public class Value {
	private String text;

}
{code}

and JSON

{code:json}
{
  ""version"" : 1,
  ""type"" : ""ABC"",
  ""texts"" : {
    ""test"" : {
      ""text"" : ""asdasd""
    }
  }
}
{code}

I update my example: [https://github.com/sebastian-sch/mongo_data_rest|https://github.com/sebastian-sch/mongo_data_rest]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-06-28 13:11:43.97,9223372036854775807,issuemaster(issuemaster),,"0|hzzygp:zzzzzzzzr",9223372036854775807,9223372036854775807,,,SpringOne 2015,Gosling SR1,,,,,,,,,,"28/Jun/15 12:56 PM;Sebastian; I wanted to know if there is any update for this bug, or any plan when this will be fixed?","28/Jun/15 1:11 PM;olivergierke;As far as I can see there's no failing test code. Any chance you add a test case that shows an error?","28/Jun/15 11:21 PM;Sebastian;I enhanced the test updatesMapPropertyCorrectly() and now the test is failing. You can find the change in the pull request [#185|https://github.com/spring-projects/spring-data-rest/pull/185]
 

","12/Oct/15 7:53 AM;Sebastian;Oliver is there any plan to fix this?
","12/Oct/15 8:11 AM;olivergierke;Damn it I missed your comment. Will have a look ASAP. Did you try one of the versions released in the mean time Gosling GA (SD REST 2.4.0)? IIRC we had a few fixes in that area.","02/Nov/15 3:44 PM;olivergierke;The project runs fine on both Spring Boot 1.2.7 and 1.3.0 RC1 with the manual dependency definitions for Spring Data modules removed. I've tried all Spring Data Release train releases since Evans SR2 (incl. Fowler and the latest Gosling) and can't get the test cases to break. I suspect the manual version definitions to be the root cause of the problem.

If you want to tweak the version of Spring Data modules, please refer to the release train name by setting the {{spring-data-releasetrain.version}} property to e.g. {{Gosling-RELEASE}}. This will make sure","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#917|https://github.com/spring-projects/spring-data-rest/issues/917]. ",,,,,,,,,,,,,,,,,
RepositoryRestExceptionHandler does not log the exception if it has no message,DATAREST-539,63698,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,avandecreme,avandecreme,11/May/15 7:46 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,09/Jul/15 9:57 AM,,,,,2.3.2 (Fowler SR2),2.4 RC1 (Gosling),,,,,,0,,,,,"This affect the current release as well as the master branch.

The problem is coming from this test:
https://github.com/spring-projects/spring-data-rest/blob/master/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/RepositoryRestExceptionHandler.java#L164

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:13.013,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/175,"0|hzzzd5:zzzzzzzx",9223372036854775807,9223372036854775807,,,57 - Fowler Aftermath,58 - Gosling M1,59 - Evans / Fowler SR,Gosling RC1,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#915|https://github.com/spring-projects/spring-data-rest/issues/915]. ",,,,,,,,,,,,,,,,,,,,,,,
Cannot remove an element of an array using JSON Patch request,DATAREST-537,63649,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,selindek,selindek,08/May/15 5:26 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,09/May/15 8:00 AM,2.2.2 (Evans SR2),2.3 GA (Fowler),,,2.2.3 (Evans SR3),2.3.1 (Fowler SR1),2.4 M1 (Gosling),,,,,0,,,,,"The ||JsonPatchHandler}} applies a customization to remove operations. Instead of removing the node, it replace it with a {{null}} object. It works well for objects, but it doesn't for elements of an array. The element won't be removed from the array, instead it will be replaced with a {{null}} object.

I think if the path of the remove operation defines an element of an array, the original remove operation should be used instead of the customized {{ReplaceOperation}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-05-09 08:00:51.645,9223372036854775807,issuemaster(issuemaster),,"0|i08ffz:",9223372036854775807,9223372036854775807,,,57 - Fowler Aftermath,,,,,,,,,,,"09/May/15 8:00 AM;olivergierke;That's fixed in the latest snapshots. Back-ported to Fowler and Evans.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#913|https://github.com/spring-projects/spring-data-rest/issues/913]. ",,,,,,,,,,,,,,,,,,,,,,
JSON Schema not rendered anymore after changes in default media type handling,DATAREST-534,63610,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,07/May/15 5:17 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,07/May/15 10:15 AM,,,,,2.4 M1 (Gosling),,,,API Documentation,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:12.13,9223372036854775807,issuemaster(issuemaster),,"0|i08f7r:",9223372036854775807,9223372036854775807,,,57 - Fowler Aftermath,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#909|https://github.com/spring-projects/spring-data-rest/issues/909]. ",,,,,,,,,,,,,,,,,,,,,,,
PUT Operation fails when trying to set Entity ID of Long type,DATAREST-528,63467,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,keaplogik,keaplogik,28/Apr/15 10:41 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,20/Jan/16 11:33 AM,2.2.2 (Evans SR2),,,,2.3 M1 (Fowler),,,,,,,1,,,,,"Error Message:
ERROR org.springframework.data.rest.webmvc.AbstractRepositoryRestController - Can not set java.lang.Long field domain.UserEntity.id to java.lang.String
java.lang.IllegalArgumentException: Can not set java.lang.Long field domain.UserEntity.id to java.lang.String

Entity model:

{code:java}
@Entity(name = 'user')
class UserEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    Long id
    
}
{code}

Repository

{code:java}
@RepositoryRestResource(collectionResourceRel = 'users', path = 'users')
interface UserRepository extends PagingAndSortingRepository<UserEntity, Long> {
}
{code}

To Reproduce

1. Do GET on base uri
2. Follow users link
3. Do POST
4. Follow self link
5. Do PUT
Performed POST

Error occurred on Spring Boot w/ Groovy
w/ `spring-data-rest-webmvc-2.2.2`
and `spring-web-4.1.6.RELEASE`

Full Stack trace

{code}
ERROR org.springframework.data.rest.webmvc.AbstractRepositoryRestController - Can not set java.lang.Long field domain.UserEntity.id to java.lang.String
java.lang.IllegalArgumentException: Can not set java.lang.Long field domain.UserEntity.id to java.lang.String
	at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167) ~[na:1.8.0_31]
	at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171) ~[na:1.8.0_31]
	at sun.reflect.UnsafeObjectFieldAccessorImpl.set(UnsafeObjectFieldAccessorImpl.java:81) ~[na:1.8.0_31]
	at java.lang.reflect.Field.set(Field.java:758) ~[na:1.8.0_31]
	at org.springframework.util.ReflectionUtils.setField(ReflectionUtils.java:108) ~[spring-core-4.1.6.RELEASE.jar:4.1.6.RELEASE]
	at org.springframework.data.mapping.model.BeanWrapper.setProperty(BeanWrapper.java:74) ~[spring-data-commons-1.10.0.RELEASE.jar:na]
	at org.springframework.data.rest.webmvc.RepositoryEntityController.putItemResource(RepositoryEntityController.java:312) ~[spring-data-rest-webmvc-2.2.2.RELEASE.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_31]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_31]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_31]
	at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0_31]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221) ~[spring-web-4.1.6.RELEASE.jar:4.1.6.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137) ~[spring-web-4.1.6.RELEASE.jar:4.1.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:776) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:705) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:879) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:647) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:725) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.0.20.jar:8.0.20]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) [spring-web-4.1.6.RELEASE.jar:4.1.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.1.6.RELEASE.jar:4.1.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85) [spring-web-4.1.6.RELEASE.jar:4.1.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.1.6.RELEASE.jar:4.1.6.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:516) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1086) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_31]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_31]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.0.20.jar:8.0.20]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_31]
{code}","Spring Boot 1.2.3.RELEASE, org.springframework.boot:spring-boot-starter-data-rest, org.springframework.boot:spring-boot-starter-data-jpa",,,,,,,,,,,,,,,,DATAREST-415,DATAREST-416,,,,DATAREST-526,,,,,,,,,,2016-01-18 13:24:48.422,9223372036854775807,issuemaster(issuemaster),,"0|i08ecv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"28/Apr/15 1:36 PM;keaplogik;Looking at the putItemResource method in RepositoryEntityController, it looks like a type check needs to be done on the entity ID. 

The method ReflectionRepositoryInvoker.convertId could be reused here for PUT operation to convert ID in some way.

{code:java}
protected Serializable convertId(Serializable id) {
		Assert.notNull(id, ""Id must not be null!"");
		return conversionService.convert(id, information.getIdType());
	}
{code}

spring-data-rest-webmvc-2.2.2.RELEASE-sources.jar!/org/springframework/data/rest/webmvc/RepositoryEntityController.java:312","29/Apr/15 10:57 AM;keaplogik;This is likely a duplicate of DATAREST-526","18/Jan/16 1:00 PM;keaplogik;@olivergierke, has any attention been given to this. Is this something we can PR a fix for?","18/Jan/16 1:24 PM;olivergierke;Would you mind checking the latest releases (Gosling SR2A, or Spring Data REST 2.4.2 respectively). I can see the codebase clearly [using the conversion service now|https://github.com/spring-projects/spring-data-rest/blob/2.4.2.RELEASE/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/RepositoryEntityController.java#L396]. The change was introduced for DATAREST-415 and seems to have been release with 2.3.x.","19/Jan/16 5:00 PM;keaplogik;Testing from org.springframework.boot:spring-boot-starter-data-rest:1.3.1.RELEASE which pulls in 2.4.2 seems to have resolved the issue. I was able to do a PUT and PATCH with Long typed IDs.","20/Jan/16 11:33 AM;olivergierke;That's great to hear. I'm going to mark this resolved for the same version as DATAREST-415 was.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#903|https://github.com/spring-projects/spring-data-rest/issues/903]. ",,,,,,,,,,,,,,,,,
PUT request breaks failing to convert the identifier from long to String,DATAREST-526,63447,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,nfantone,nfantone,27/Apr/15 11:25 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,20/Jan/16 11:34 AM,2.2.1 (Evans SR1),2.2.2 (Evans SR2),2.3 GA (Fowler),,2.3 M1 (Fowler),,,,,,,1,data,jpa,rest,spring,"I have a working {{spring-data-rest}} project with the following maven dependencies:

{code:xml}
<dependency>
	<groupId>org.springframework.data</groupId>
	<artifactId>spring-data-commons</artifactId>
	<version>1.9.0.RELEASE</version>
</dependency>
<dependency>
	<groupId>org.springframework.data</groupId>
	<artifactId>spring-data-jpa</artifactId>
	<version>1.7.0.RELEASE</version>
</dependency>
<dependency>
	<groupId>org.springframework.data</groupId>
	<artifactId>spring-data-rest-webmvc</artifactId>
	<version>2.2.1.RELEASE</version>
</dependency>
<dependency>
	<groupId>org.springframework.data</groupId>
	<artifactId>spring-data-rest-core</artifactId>
	<version>2.2.1.RELEASE</version>
</dependency>
{code}

I decided to upgrade {{spring-data-jpa}} to the latest {{1.8.0.RELEASE}} version, which required that I also upgrade {{spring-data-commons}} to {{1.10.0.RELEASE}}.

Doing just that, some errors started to show up in the application. {{PUT}} 'ing or {{PATCH}} 'ing entities began failing with the following exceptions

* With {{PUT}} operations:

{code}
curl -X PUT ""http://localhost:8090/campaign-bo-api/api/foos/2175"" -d '{""status"": {""id"": 3}}' -H ""Content-Type: application/json""
{""cause"":null,""message"":""Can not set java.lang.Long field ar.com.contenta.campaign.model.Campaign.id to java.lang.String""}
{code}

* With {{PATCH}} operations:

{code}
curl -X PATCH ""http://localhost:8090/campaign-bo-api/api/campaigns/2175"" -d '{""status"": {""id"": 3}}' -H ""Content-Type: application/json""

org.springframework.orm.jpa.JpaSystemException: identifier of an instance of ar.com.contenta.campaign.model.Status was altered from 1 to 3; nested exception is org.hibernate.HibernateException: identifier of an instance of ar.com.contenta.campaign.model.Status was altered from 1 to 3
{code}

Here, what I'm trying to do is changing the {{status}}, which is an inline attribute, of a {{Foo}} instance.

The model is very simple:

{code:title=Foo.java|borderStyle=solid}
@Entity
@Table(name = ""campaign"")
public class Foo {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@ManyToOne(optional = false)
	@JoinColumn(name = ""status_id"", nullable = false)
	@RestResource(exported = false)
	private Status status;

	// getters and setters omitted
}
{code}

{code:title=Status.java|borderStyle=solid}
@Entity
@Table(name = ""status"")
public class Status {
	@Id
	private Integer id;
	private String description;

	// getters and setters omitted
}
{code}

At first, I thought that the version of {{spring-data-rest}} I was using was incompatible with the latest {{spring-data-jpa}}, so I upgraded those dependencies as well to {{2.3.0.RELEASE}}. Things got worse. Now, *both* {{PUT}} and {{PATCH}} threw the same {{JpaSystemException}} shown above.

Needless to say, if I revert every version to what I originally had, everything works as expected.

Not sure if there were some changes made to the way the framework is configured or if there has been any API change that I need to address. Perhaps, this is not a bug in {{spring-data-rest}}, but in {{spring-data-jpa}}. Or not a bug at all.

Any comments?
",JAVA 1.8.0_45 on Linux Mint 17.1 Rebecca,,,,,,,,,,,,,,,,DATAREST-528,,,,,,,,,,,,,,,2016-01-18 13:28:01.146,9223372036854775807,issuemaster(issuemaster),,"0|i08e8v:",9223372036854775807,9223372036854775807,,,Hopper M1,,,,,,,,,,,"18/Jan/16 1:28 PM;olivergierke;Please check my comment at DATAREST-528. Seems like the issues are realted and should be fixed in current release versions.","18/Jan/16 5:17 PM;nfantone;Thanks. I thought this was a dead issue. Nice to see some feedback.

When do you expect this to be fixed?","18/Jan/16 5:19 PM;olivergierke;As indicated in the other ticket, I think this should be fixed in Fowler and Gosling release trains already.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#901|https://github.com/spring-projects/spring-data-rest/issues/901]. ",,,,,,,,,,,,,,,,,,,,
Unable to augment collection association using POST,DATAREST-523,63321,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,endrec,endrec,20/Apr/15 1:08 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,19/May/15 7:34 AM,2.2.2 (Evans SR2),2.3 GA (Fowler),,,2.3.1 (Fowler SR1),2.4 M1 (Gosling),,,,,,0,,,,,"It seems that POSTing an item to an associated collection does not work as documented.

According to the [Spring Data REST documentation|http://docs.spring.io/spring-data/rest/docs/current/reference/html/#repository-resources.association-resource], POST method is supported for collections, so 

{code}curl -i -X POST -H 'Content-type: text/uri-list' -d 'http://localhost:8080/artifacts/1' http://localhost:8080/collectors/1/artifacts{code}

should add an artifact to the (yet empty) collection. Unfortunately, it does not:

{code}
    HTTP/1.1 405 Method Not Allowed
    Server: Apache-Coyote/1.1
    Allow: GET, DELETE, PATCH, PUT
    Content-Type: application/json;charset=UTF-8
    Transfer-Encoding: chunked
    Date: Fri, 17 Apr 2015 22:54:59 GMT
    
    {""timestamp"":1429311299117,""status"":405,""error"":""Method Not Allowed"",""exception"":""org.springframework.web.HttpRequestMethodNotSupportedException"",""message"":""Request method 'POST' not supported"",""path"":""/collectors/1/artifacts""}
{code}

My entities:

{code:java}
    @Data
    @Entity
    public class Collector {
        @Id
        @GeneratedValue
        private Long id;
    
        private String name;
    
        @OneToMany(mappedBy = ""owner"")
        private List<Artifact> artifacts;
    }
    
    @Data
    @Entity
    @Accessors(chain = true, fluent = true)
    public class Artifact {
    
        @Id
        @GeneratedValue
        private Long id;
    
        private String title;
    
        @ManyToOne
        @JoinColumn(name = ""collector_id"")
        private Collector owner;
    }
{code}

The complete code is on [Github|https://github.com/endrec/associated-collection-test].
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-05-19 02:05:52.535,9223372036854775807,issuemaster(issuemaster),,"0|i08djj:",9223372036854775807,9223372036854775807,https://github.com/endrec/associated-collection-test,,57 - Fowler Aftermath,,,,,,,,,,,"19/May/15 1:07 AM;endrec;Same result in Fowler.","19/May/15 2:05 AM;olivergierke;You should be able to see this working (creating the collection) by using {{PUT}}. The documentation is currently misleading cause we're not supporting {{POST}} for association resources at all. I'll use this ticket to add this functionality.","19/May/15 7:34 AM;olivergierke;That's fixed for Gosling and the maintenance branch for Fowler. You should actually be able to get this working out of the box by using {{PATCH}} instead of {{POST}}. We chose this as the method to use as it resembles the ""partial update"" semantics more than {{POST}} does. Although you're interacting with a collection, you don't use the resource to create new resources but rather to augment the existing one.

That said, I took the chance to revamp the internals of the checks for supported HTTP methods. {{POST}} is now allowed on collection properties and basically resembles what {{PATCH}} does.","11/Jun/15 3:43 AM;endrec;Still not work as (I think) it is intended.

{noformat}
curl -i -X POST -H 'Content-type: text/uri-list' -d 'http://localhost:8080/artifacts/1' http://localhost:8080/collectors/1/artifacts
{noformat}

Returns _HTTP/1.1 204 No Content_, which looks promising, but on the other hand, no association is created:

{noformat}
2015-06-11 11:38:08.339 DEBUG 29673 --- [nio-8080-exec-1] o.s.d.r.w.RepositoryRestHandlerMapping   : Looking up handler method for path /collectors/1/artifacts
2015-06-11 11:38:08.364 DEBUG 29673 --- [nio-8080-exec-1] o.s.d.r.w.RepositoryRestHandlerMapping   : Returning handler method [public org.springframework.http.ResponseEntity<? extends org.springframework.hateoas.ResourceSupport> org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.createPropertyReference(org.springframework.data.rest.webmvc.RootResourceInformation,org.springframework.http.HttpMethod,org.springframework.hateoas.Resources<java.lang.Object>,java.io.Serializable,java.lang.String) throws java.lang.Exception]
2015-06-11 11:38:08.562 DEBUG 29673 --- [nio-8080-exec-1] stomAnnotationTransactionAttributeSource : Adding transactional method 'findOne' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly; ''
2015-06-11 11:38:08.587 DEBUG 29673 --- [nio-8080-exec-1] ataPostProcessor$ThreadBoundTargetSource : Initializing lazy target object
2015-06-11 11:38:08.594 DEBUG 29673 --- [nio-8080-exec-1] org.hibernate.SQL                        : select collector0_.id as id1_1_0_, collector0_.name as name2_1_0_ from collector collector0_ where collector0_.id=?
2015-06-11 11:38:08.595 TRACE 29673 --- [nio-8080-exec-1] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]
2015-06-11 11:38:08.619 TRACE 29673 --- [nio-8080-exec-1] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([name2_1_0_] : [VARCHAR]) - [Ann]
2015-06-11 11:38:08.630 TRACE 29673 --- [nio-8080-exec-1] org.hibernate.type.CollectionType        : Created collection wrapper: [example.Collector.artifacts#1]
2015-06-11 11:38:08.634 DEBUG 29673 --- [nio-8080-exec-1] stomAnnotationTransactionAttributeSource : Adding transactional method 'findOne' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly; ''
2015-06-11 11:38:08.634 DEBUG 29673 --- [nio-8080-exec-1] ataPostProcessor$ThreadBoundTargetSource : Initializing lazy target object
2015-06-11 11:38:08.634 DEBUG 29673 --- [nio-8080-exec-1] org.hibernate.SQL                        : select artifact0_.id as id1_0_0_, artifact0_.collector_id as collecto3_0_0_, artifact0_.title as title2_0_0_, collector1_.id as id1_1_1_, collector1_.name as name2_1_1_ from artifact artifact0_ left outer join collector collector1_ on artifact0_.collector_id=collector1_.id where artifact0_.id=?
2015-06-11 11:38:08.648 TRACE 29673 --- [nio-8080-exec-1] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]
2015-06-11 11:38:08.649 TRACE 29673 --- [nio-8080-exec-1] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([id1_1_1_] : [BIGINT]) - [null]
2015-06-11 11:38:08.650 TRACE 29673 --- [nio-8080-exec-1] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([collecto3_0_0_] : [BIGINT]) - [null]
2015-06-11 11:38:08.650 TRACE 29673 --- [nio-8080-exec-1] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([title2_0_0_] : [VARCHAR]) - [Ugly sculpture]
{noformat}

It is pretty much the same for PUT, or PATCH requests.","11/Jun/15 5:46 AM;endrec;Ignore the previous comment, I was on the wrong side of the relationship. It works fine form the owning side.
","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#897|https://github.com/spring-projects/spring-data-rest/issues/897]. ",,,,,,,,,,,,,,,,,,
"GET on RestRepository not possible, if a RestController for the same path is available",DATAREST-522,63279,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,felixhuch,felixhuch,16/Apr/15 6:48 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,07/May/15 5:36 AM,2.3 GA (Fowler),,,,2.3.1 (Fowler SR1),2.4 M1 (Gosling),,,,,,0,repository,rest,restcontroller,spring-data-rest,"We have a Spring Data REST project, with several {{@RepositoryRestResource}} annotated Spring Data Repositories.

Example: 
{code:title=PersonRepository.java|borderStyle=solid}
@RepositoryRestResource(path = ""person"")
public interface PersonRepository extends PagingAndSortingRepository<Person, Integer> {}
{code}

We want to override the {{POST}}/{{PATCH}} method of one of these repositories. So we annotate a RestController with {{@RestController}} and the annotation {{@RequestMapping}} has the same path as the repository.

Example: 
{code:title=PersonController.java|borderStyle=solid}
@RestController
@RequestMapping(""person"")
public class PersonController{

	@RequestMapping(method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Boolean> savePerson(@RequestBody Person person) {
...
}
{code}

The {{POST}}/{{PATCH}} works fine. But now a {{GET}} to {{/person}} (to receive all Persons) throws an {{HttpRequestMethodNotSupportedException}} and says: Request method 'GET' not supported.

A {{GET}} to {{/person/1}} instead is working just fine. 

We had a look at [https://jira.spring.io/browse/DATAREST-490] and the {{@BasePathAwareController}}, but this doesnt seem to change anything.",,,,,,,,,,,,,,,,,DATAREST-490,,,,,,,,,"17/Apr/15 1:55 AM;felixhuch;spring-data-rest-playground.zip;https://jira.spring.io/secure/attachment/22749/spring-data-rest-playground.zip",,,,,,2015-04-16 07:05:15.789,9223372036854775807,issuemaster(issuemaster),,"0|i08dd3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16/Apr/15 7:05 AM;olivergierke;Try two things: re-add {{@BasePathAwareController}} and remove the type-level {{@RequestMapping}} and you should see this working. The latter causes the standard Spring MVC infrastructure to pick up the controller and the corresponding handler mapping see the partially matching {{@RequestMapping}} (not completely matching as you try {{GET}}, not {{POST}}. This triggers the exception and then the effect described in DATAREST-490 kicks in. By moving to {{@BasePathAwareController}} you end up in a different handler mapping that cycles through the registered handler mappings for {{@BasePathAwareController}}, the repository controllers etc.","16/Apr/15 7:27 AM;felixhuch;First, thanks for this fast and great support!

We have tried these two ways and the result is the same.

{code:title=PersonController .java|borderStyle=solid}
@RestController
@BasePathAwareController
public class PersonController {

	@RequestMapping(value = ""person"", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Boolean> savePerson(@RequestBody Person person) {
		return new ResponseEntity<Boolean>(true, HttpStatus.OK);
	}
}
{code}

{code:title=PersonController .java|borderStyle=solid}
@BasePathAwareController
public class PersonController {

	@RequestMapping(value = ""person"", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Boolean> savePerson(@RequestBody Person person) {
		return new ResponseEntity<Boolean>(true, HttpStatus.OK);
	}
}
{code}

A {{GET}} on {{/person}} results in a {{HttpRequestMethodNotSupportedException}}
And a {{GET}} on {{/person/1}} works fine.
The {{POST}}/{{PATCH}} works fine too.","16/Apr/15 8:07 AM;olivergierke;Hm, weird. Do you have a tiny sample I can look at?","17/Apr/15 1:55 AM;felixhuch;I added a minimal sample project to this ticket. The resources are available under /api/*.","17/Apr/15 3:53 AM;olivergierke;Adding the following test case works for me:

{code:java}
@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration(classes = AppConfig.class)
public class AppTest {

	@Autowired WebApplicationContext context;

	MockMvc mvc;

	@Before
	public void setUp() {
		this.mvc = MockMvcBuilders.webAppContextSetup(context).build();
	}

	@Test
	public void testname() throws Exception {

		mvc.perform(MockMvcRequestBuilders.get(""/person/1"").accept(MediaType.APPLICATION_JSON)).andExpect(
				MockMvcResultMatchers.status().isOk());
	}
}
{code}

When providing samples, please make sure there's something to execute, that clearly shows what you're expecting and what's wrong. I'm not gonna deploy anything anywhere. Ideally a {{mvn clean test}} (or equivalent in Gradle) should reproduce what's considered broken.","17/Apr/15 3:59 AM;olivergierke;Nevermind, I see, you'd like to override {{/person}} and that breaks for me, too. That said, this just emphasizes my last note :).","17/Apr/15 4:21 AM;felixhuch;Thanks! I will keep that in mind ;-)","17/Apr/15 1:23 PM;kakawait;Before Fowler train, I achieve your needs like following: http://stackoverflow.com/questions/27712038/spring-data-rest-and-collections-with-unique-constraints/27802520#27802520.

Since Fowler train {{HandlerMapping repositoryExporterHandlerMapping}} does not exist it now {{RequestMappingHandlerMapping}} but principle was the same.

I had the same needs as you that why I recreate the handlerMapping chain with delegation to avoid {{RequestMappingHandlerMapping}} to throw exception before testing Spring Data Rest controller.

My SO answer can be ""patch"" solution for you or help investigation. I really hope that Spring Data Rest provides such feature in futur!","17/Apr/15 11:47 PM;olivergierke;The issue was us not handling exceptions other {{HttpMediaTypeNotAcceptableException}} in {{DelegatingHandlerMapping}} that might indicate a partial match found in the primary {{HandlerMapping}} we deploy. This should be fixed in both master as well as the 2.3.x bugfix branch. Feel free to give the snapshots a try.","07/May/15 3:39 AM;felixhuch;Unfortunately its not working.

We added

{code:xml}
    <repositories>
	<repository>
		<id>spring-libs-snapshot</id>
		<url>https://repo.spring.io/libs-snapshot</url>
	</repository>
    </repositories>
{code} 

and 

{code:xml}   
  <spring.data.rest.version>2.3.1.BUILD-SNAPSHOT</spring.data.rest.version>
{code} 

to our pom.xml.

The tests look like

{code:java}   
@Test
public void checkGET() throws Exception {		   
     mvc.perform(MockMvcRequestBuilders.get(""/person"")
          .accept(MediaType.APPLICATION_JSON))
          .andExpect(MockMvcResultMatchers.status().isOk());
}

@Test
public void checkPOST() throws Exception {		
     mvc.perform(MockMvcRequestBuilders.post(""/person"")
          .accept(MediaType.APPLICATION_JSON))
          .andExpect(MockMvcResultMatchers.status().isOk());
}
{code} 

and we get

{noformat}
[main] WARN  o.s.web.servlet.PageNotFound - Request method 'GET' not 
supported
...
java.lang.AssertionError: Status 
Expected :200
Actual   :405
{noformat}

The {{@DelegatingHandlerMapping}} is the new one.","07/May/15 5:36 AM;olivergierke;When I run your sample application's test case {{checkPOST}} I see the latest build snapshot being used (April 18th). I then get a {{400}} status code which looks correct as you don't send any data. I see the same expected 400 on 2.4.0 snapshots.

It might make sense to rather create a repo that you update than referring to an attachment here that I have to modify by some means, as the latter is just begging for inconsistencies in what you use and what I am trying to reproduce here.","07/May/15 7:09 AM;felixhuch;I'm sorry for the circumstances. I created a github-repo: https://github.com/felixhuch/spring-data-rest-playground 
This shows what i mean.
Thanks ;-)","07/May/15 7:40 AM;olivergierke;As indicated in my [very first comment|https://jira.spring.io/browse/DATAREST-522?focusedCommentId=114611] you need to switch to {{@BasePathAwareController}} and need to make sure not to use {{@RequestMapping}} on the type level as this will cause the root Spring MVC handler mapping to pick up the controller and cause the effects I described [here|https://jira.spring.io/browse/DATAREST-490?focusedCommentId=113366&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-113366]. Following the suggestions makes your tests pass for me.","10/May/15 11:00 PM;felixhuch;Jap :-) Thank you very much!","06/Jan/17 9:13 AM;Doogie;Just in case some else also stumbles over this:  ""No @RequestMapping on the type level"" means:  Do not configure the path on the method. You can only configure one resource path on the whole class:  This is what worked for me in the end:


{code:java}
@RepositoryRestController
@RequestMapping(""person"")   // only set the path mapping here!
public class PersonController{
 
	@RequestMapping(method = RequestMethod.POST)   // no value  for path here!
	public @ResponseBody PersistentEntityResource savePerson(@RequestBody Person person, PersistentEntityResourceAssembler resourceAssembler)) {
...
}
{code}
","06/Jan/17 12:31 PM;Doogie;Actually ... this still doesn't work. I'll open a new ticket.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#896|https://github.com/spring-projects/spring-data-rest/issues/896]. ",,,,,,,
RepositoryEntityLinks does not populate search resource URIs with Pageable and Sorts,DATAREST-519,63238,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,14/Apr/15 1:00 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,14/Apr/15 1:24 PM,2.3 GA (Fowler),,,,2.3.1 (Fowler SR1),2.4 M1 (Gosling),,,,,,0,,,,,,,,,,,,,,,,,,,,,,DATAREST-467,,,,,DATAREST-668,,,,,,,,,,2020-12-31 10:30:10.536,9223372036854775807,issuemaster(issuemaster),,"0|i08d3z:",9223372036854775807,9223372036854775807,,,57 - Fowler Aftermath,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#893|https://github.com/spring-projects/spring-data-rest/issues/893]. ",,,,,,,,,,,,,,,,,,,,,,,
MappingResourceMetadata must not be exported,DATAREST-518,63237,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,14/Apr/15 12:50 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,14/Apr/15 1:25 PM,,,,,2.4 M1 (Gosling),,,,,,,0,,,,,"{{ResourceMetadata.isExported()}} should only return {{true}} for top-level, exported resources.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:10.312,9223372036854775807,issuemaster(issuemaster),,"0|i08d3r:",9223372036854775807,9223372036854775807,,,57 - Fowler Aftermath,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#892|https://github.com/spring-projects/spring-data-rest/issues/892]. ",,,,,,,,,,,,,,,,,,,,,,,
Fix links to ALPS representation descriptors for associations,DATAREST-516,63205,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,13/Apr/15 4:26 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,13/Apr/15 4:32 AM,,,,,2.2.3 (Evans SR3),2.4 M1 (Gosling),,,API Documentation,,,0,,,,,"Currently the links to related descriptors are wrong:

- they link to the actual resource, not the ALPS descriptor resource
- they don't link to the representation descriptor",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:10.143,9223372036854775807,issuemaster(issuemaster),,"0|i08cwn:",9223372036854775807,9223372036854775807,,,57 - Fowler Aftermath,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#890|https://github.com/spring-projects/spring-data-rest/issues/890]. ",,,,,,,,,,,,,,,,,,,,,,,
"Custom @RestResource path shows up as link href, but doesn't load data",DATAREST-514,63179,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,ww4,ww4,09/Apr/15 11:43 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,19/May/15 7:30 AM,2.3 GA (Fowler),,,,2.4 M1 (Gosling),,,,,,,0,,,,,"SDR 2.3.0 Fowler.

I have Service and ServiceInstance entities. The relationship is many-one.

On the Service side I have the following:

{code}
    @OneToMany(mappedBy = ""service"", cascade = CascadeType.ALL, orphanRemoval = true)
    @RestResource(rel = ""service-instances"", path = ""service-instances"")
    private List<ServiceInstance> serviceInstances = new ArrayList<>();
{code}

On the ServiceInstance side I have

{code}
@ManyToOne
@JoinColumn(name = ""service_id"")
@RestResource(rel = ""s:service"", path = ""service"")
private Service service;
{code}

though I don't think that matters.

When I get a single Service resource, the links are what I expect:

{code}
    GET http://localhost:8080/api/services/17
    
    {
      ""key"" : ""upp"",
      ""_links"" : {
        ""self"" : {
          ""href"" : ""http://localhost:8080/api/services/17{?projection}"",
          ""templated"" : true
        },
        ""s:service-instances"" : {
          ""href"" : ""http://localhost:8080/api/services/17/service-instances""
        },
        ...
    }
{code}

But when I try to load the s:service-instances resource at http://localhost:8080/api/services/17/service-instances, I get a 404.

If I go to http://localhost:8080/api/services/17/serviceInstances, I can see the data.

So @RestResource(path) appears to control the link href, but not the actual route to the data.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-04-09 23:50:31.598,9223372036854775807,issuemaster(issuemaster),,"0|i08cqv:",9223372036854775807,9223372036854775807,,,57 - Fowler Aftermath,,,,,,,,,,,"09/Apr/15 11:50 PM;olivergierke;Do you see this in 2.3 and 2.2 works fine?","09/Apr/15 11:53 PM;ww4;I haven't tried it with 2.2. I am using Spring Boot 1.2.3.RELEASE but I upgraded SDR to 2.3.0.RELEASE

{code}
    ""org.springframework.data:spring-data-rest-core:2.3.0.RELEASE"",
    ""org.springframework.data:spring-data-rest-webmvc:2.3.0.RELEASE""
{code}
","10/Apr/15 12:15 AM;ww4;Also, this problem occurs only for association paths. For paths like

/api/service-instances/64

it works just fine.","19/May/15 7:30 AM;olivergierke;That's fixed in master. Required a significant overhaul of the mapping infrastructure so unfortunately no chance for a back-port.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#886|https://github.com/spring-projects/spring-data-rest/issues/886]. ",,,,,,,,,,,,,,,,,,,
Reference documentation typo,DATAREST-509,63147,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,ww4,ww4,08/Apr/15 9:19 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,08/Apr/15 9:28 AM,2.3 GA (Fowler),,,,2.3.1 (Fowler SR1),2.4 M1 (Gosling),,,Documentation,,,0,,,,,"One of the URLs in the [section on projections|http://docs.spring.io/spring-data/rest/docs/current/reference/html/#projections-excerpts.projections] contains a minor typo.

It says

    http://localhost:8080/persons/1/projection=noAddresses

but should be

    http://localhost:8080/persons/1?projection=noAddresses


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:09.265,9223372036854775807,issuemaster(issuemaster),,"0|i08cjz:",9223372036854775807,9223372036854775807,http://docs.spring.io/spring-data/rest/docs/current/reference/html/#projections-excerpts.projections,,57 - Fowler Aftermath,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#883|https://github.com/spring-projects/spring-data-rest/issues/883]. ",,,,,,,,,,,,,,,,,,,,,,,
RepositoryRestExceptionHandler throws IllegalArgumentException,DATAREST-507,63145,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,andreast00,andreast00,08/Apr/15 8:02 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,08/Apr/15 9:02 AM,2.3 GA (Fowler),,,,2.3.1 (Fowler SR1),2.4 M1 (Gosling),,,,,,0,,,,,"The {{RepositoryRestExceptionHandler}} throws an {{IllegalArgumentException}} if a {{DataIntegrityViolationException}} or {{OptimisticLockingFailureException}} occurs causing a wrong server response: {{500 Internal ServerError}}.

Have a look at the {{handleConflict(…)}} Method. The {{errorResponse(…)}} method get's accidentally called with a {{null}} argument for the {{HttpHeaders}}.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-04-08 09:02:11.631,9223372036854775807,issuemaster(issuemaster),,"0|i08cjj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"08/Apr/15 9:02 AM;olivergierke;Thanks for spotting this. Should be fixed in snapshots for both Gosling and Fowler.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#881|https://github.com/spring-projects/spring-data-rest/issues/881]. ",,,,,,,,,,,,,,,,,,,,,,
Fix one word typo in reference docs,DATAREST-503,63046,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Trivial,Complete,gregturn,gregturn,gregturn,02/Apr/15 8:52 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,02/Apr/15 10:53 AM,2.3 GA (Fowler),,,,2.3.1 (Fowler SR1),2.4 M1 (Gosling),,,Documentation,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:08.754,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/172,"0|i08c0r:",9223372036854775807,9223372036854775807,https://github.com/spring-projects/spring-data-rest/pull/172,,57 - Fowler Aftermath,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#878|https://github.com/spring-projects/spring-data-rest/issues/878]. ",,,,,,,,,,,,,,,,,,,,,,,
Not convenient to search a repository by a related entity using links,DATAREST-502,63041,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,jdmunro,jdmunro,02/Apr/15 5:44 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,07/Apr/15 8:04 AM,2.2.2 (Evans SR2),,,,2.4 M1 (Gosling),,,,,,,1,,,,,"It doesn't seem to be very convenient to search a repository using an related entity as a query parameter. Consider the following repository:

{code}
@RepositoryRestResource
public interface TagRepository extends PagingAndSortingRepository<Tag, Long> {

    Page<Tag> findAllByNameContainingIgnoreCaseAndOrganisationOrderByNameAsc(@Param(""name"") String name,
                                                                             @Param(""organisation"") Organisation organisation,
                                                                             Pageable pageable);
}
{code}

Organisations have many tags, a tag has one organisation. The HATEOAS semantics return entity relationships as links, however we cannot pass one of these links as the ""organisation"" query parameter above.

As far as I can tell, the only way to pass an organisation parameter is by using the ID (primary key) of the entity directly. This is quite inconvenient as it means we need to resolve links on the client first in order to determine the ID we need and also means that we need to expose the IDs in our DTOs (which is not default and seems like a bad idea), or attempt to parse it from the URI link.

This is how I would expect it to be able to work:

http://localhost:8080/api/tags/search/findAllByNameContainingIgnoreCaseAndOrganisationOrderByNameAsc?name=tagName&organisation=http://localhost:8080/api/organisations/1

However we are currently required to use it like this:

http://localhost:8080/api/tags/search/findAllByNameContainingIgnoreCaseAndOrganisationOrderByNameAsc?name=tagName&organisation=1

Is this the only way to query using a related entity?",,,,,,,,,,,DATACMNS-678,DATAREST-599,,,,,,,,,,,,,,,,,,,,2015-04-02 05:51:01.763,9223372036854775807,issuemaster(issuemaster),,"0|i08c0n:",9223372036854775807,9223372036854775807,,,57 - Fowler Aftermath,,,,,,,,,,,"02/Apr/15 5:51 AM;dalejefferson;@Id is not exposed by default on entities so having to query via id does not make much sense.","02/Apr/15 7:17 AM;olivergierke;Agreed guys, URIs should work. Shouldn't be too hard to fix.","07/Apr/15 8:04 AM;olivergierke;This is fixed in master. Feel free to give the snapshots a try. The fix requires some API enhancements in Spring Data Commons so that we unfortunately can't back-port the fix.","20/Jun/15 9:08 AM;ptahchiev;Hello, is it possible to support both? I just saw in the {{UriToEntityConverter}} the following code:
{code}
		if (parts.length < 2) {
			throw new ConversionFailedException(sourceType, targetType, source, new IllegalArgumentException(
					""Cannot resolve URI "" + uri + "". Is it local or remote? Only local URIs are resolvable.""));
		}
{code}

so right now if I want to pass the PK as a query parameter: 

https://localhost:8112/storefront/rest/product/search/findAllByCatalogVersionEquals?catalogVersion=123

it blows with the {{ConversionException}}. I would have to instead pass the whole URL:

https://localhost:8112/storefront/rest/product/search/findAllByCatalogVersionEquals?catalogVersion=https://localhost:8112/storefront/rest/product/564488177061440/catalogVersion

which makes it quite cumbersome to type when using the spring data REST shell. If I override the {{UriToEntityConverter}} and comment that {{if}} check it works fine. ","13/Aug/15 3:05 AM;jaileleu;I think it would be more convenient to be able to POST on the search method URL, putting all the parameters inside the body of the request (and having entities referred as URI, of course).
With more complex search method, having all method parameters as Request Params would turn into a nightmare, without speaking of browser limitation on the URL size (I know we still have some room for maneuver here, but still).
On a REST point of view, you can consider you would create a 'SearchResource', even if this resource would not be a persisted one, and would be very ephemeral as it would be 'deleted' on the fly. It still makes sense for me.
Do you want me to create another issue here to cover this ?","13/Aug/15 3:15 AM;olivergierke;If you want, go ahead. However it's highly unlikely it's gonna be implemented unless find more compelling reasons than the given ones:

1. a search resource is basically a predefined filter applied to the overall collection. That's clearly indicating {{GET}}. {{POST}} would basically drop the ability to cache results on the HTTP server level.
2. If you use {{POSt}} you move from the URI template variables to an arbitrary payload that needs to be described in turn. URI templates are easy to advertise and document. A dedicated payload needs more effort.
3. if the query method gets so complex that it needs to take a plethora of parameters, this is a design smell in the first place. The browser is a quite contrived argument as virtually no REST service using JSON is used through a browser but some client lib.

So to be honest, I don't see an advantage but only downsides (loosing the ability to cache, more effort needed to document and advertise the parameters). Let's not side track this any further here as what the original poster asked for was implemented.","11/Feb/16 2:14 PM;aafanasyev;Hi, [~olivergierke]! Are there any chances this feature would work for {{@RepositoryRestController}}?
I mean if I have a {{@RepositoryRestController}} and some annotated method in it like this:

{code:java}
@RequestMapping(value=""hypotheses"")
public void createHypothesisFromTemlate(@RequestParam(name=""template"") HypothesisTemplate template)
{code}

can we do the same trick by passing a full entity URI, not the Id?","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#877|https://github.com/spring-projects/spring-data-rest/issues/877]. ",,,,,,,,,,,,,,,,
Rendering of lazy-loading proxies fails,DATAREST-500,62963,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,thomasd,thomasd,30/Mar/15 5:59 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,30/Mar/15 12:34 PM,2.3 GA (Fowler),,,,2.2.3 (Evans SR3),2.3.1 (Fowler SR1),2.4 M1 (Gosling),,Repositories,,,1,,,,,"Problem is that the nested lazy loading proxy is not unpacked correctly, see the linked example project for further details.

The code in {code:java}
org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.doWithReferencedProperty(RootResourceInformation, Serializable, String, Function<ReferencedProperty, ResourceSupport>, HttpMethod)
PersistentEntity<?, ?> persistentEntity = repoRequest.getPersistentEntity();
PersistentProperty<?> prop = persistentEntity.getPersistentProperty(propertyPath);
...
PersistentPropertyAccessor accessor = persistentEntity.getPropertyAccessor(domainObj);
Object propVal = accessor.getProperty(prop);
{code}
traverses the {{product}} property of the {{Category}} which returns the proxied version of the product instance. This instance cannot be serialized. We have to find a way to unwrap that proxy (probably still in JPA) or make it somehow serializable (in a way that works for other proxy mechanisms too...)

The test case: {{shouldBeAbleToResolveLazyLoadingProxyForProductInCategory}} demonstrates the problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:08.357,9223372036854775807,issuemaster(issuemaster),,"0|i08bb7:",9223372036854775807,9223372036854775807,https://jira.spring.io/browse/DATAJPA-630?focusedCommentId=113758&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-113758,,57 - Fowler Aftermath,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#875|https://github.com/spring-projects/spring-data-rest/issues/875]. ",,,,,,,,,,,,,,,,,,,,,,,
JSON Patch request not recognized if Content-Type header contains media type parameters,DATAREST-498,62945,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,wstidolph,wstidolph,28/Mar/15 9:49 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,30/Mar/15 1:47 AM,2.3 GA (Fowler),,,,2.2.3 (Evans SR3),2.3.1 (Fowler SR1),2.4 M1 (Gosling),,Content negotiation,,,0,,,,,"A request isn't properly recognized as a JSON Patch one, resulting in exception (as detailed in StackOverflow URL).

Issue appears to be that {{PersistentEntityResourceHandlerMethodArgumentResolver}} builds an {{IncomingRequest}}, and that constructor sets its {{contentType}} to {{application/json-patch+json;charset=UTF-8}}. This then fails the IncomingRequest's {{isJsonPatchRequest()}} test because the inbound {{otherType}} now has a parameters map entry (charset -> UTF-8) and the  {{RestMediaTypes.JSON_PATCH_JSON}} does not. ","win 8.1, SpringBoot 1.2.2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:08.166,9223372036854775807,issuemaster(issuemaster),,"0|i08ben:",9223372036854775807,9223372036854775807,http://stackoverflow.com/questions/29235087/exception-on-json-patch-post-to-repositoryrestresource-in-spring-data-rest,,57 - Fowler Aftermath,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#817|https://github.com/spring-projects/spring-data-rest/issues/817]. ",,,,,,,,,,,,,,,,,,,,,,,
JSON Schema reports primitive numbers as object,DATAREST-492,62816,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,22/Mar/15 12:04 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,23/Mar/15 12:59 AM,2.3 RC1 (Fowler),,,,2.3 GA (Fowler),,,,,,,0,,,,,"A type like this:

{class:java}
class Sample {

  double foo;
}
{class}

yields a JSON Schema document of:

{code:javascript}
{
  ""foo"" : {
    ""type"" : ""object""
  }
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:07.57,9223372036854775807,issuemaster(issuemaster),,"0|i08amf:",9223372036854775807,9223372036854775807,,,56 - Fowler GA,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#869|https://github.com/spring-projects/spring-data-rest/issues/869]. ",,,,,,,,,,,,,,,,,,,,,,,
PersistentEntityResourceHandlerMethodArgumentResolver dump in PUT requests with HashMap,DATAREST-491,62638,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,Sebastian,Sebastian,11/Mar/15 7:07 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,20/Mar/15 2:00 AM,2.2.2 (Evans SR2),2.3 RC1 (Fowler),,,2.2.3 (Evans SR3),2.3 GA (Fowler),,,,,,0,fowler,,,,"When updating a existing resource with a JSON PUT with this sample code

{code:JAVA}

@Document
public class Ticket {

	@Id
	private String id;

	@Version
	private Long version;

	private String type;

	private Map<String, String> texts;
}
{code}

and JSON

{code:JSON}
{
  ""version"" : 1,
  ""type"" : ""HR"",
  ""texts"" : {
    ""description"" : ""Let's test1234""
  }
}
{code} 

I get the following stack trace:

{code:trace} 
2015-03-11 14:34:08.049 ERROR 39988 --- [nio-8080-exec-2] s.d.r.w.AbstractRepositoryRestController : Could not read an object of type class demo.Ticket from the request!; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: Could not read payload!; nested exception is java.lang.NullPointerException

org.springframework.http.converter.HttpMessageNotReadableException: Could not read an object of type class demo.Ticket from the request!; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: Could not read payload!; nested exception is java.lang.NullPointerException
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.readPutForUpdate(PersistentEntityResourceHandlerMethodArgumentResolver.java:197)
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.read(PersistentEntityResourceHandlerMethodArgumentResolver.java:169)
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.resolveArgument(PersistentEntityResourceHandlerMethodArgumentResolver.java:125)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:129)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:777)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:706)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:943)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:879)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:647)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:725)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:516)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1086)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.http.converter.HttpMessageNotReadableException: Could not read payload!; nested exception is java.lang.NullPointerException
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.merge(DomainObjectReader.java:137)
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.readPut(DomainObjectReader.java:129)
	at org.springframework.data.rest.webmvc.config.JsonPatchHandler.applyPut(JsonPatchHandler.java:133)
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.readPutForUpdate(PersistentEntityResourceHandlerMethodArgumentResolver.java:194)
	... 45 common frames omitted
Caused by: java.lang.NullPointerException: null
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.getJacksonProperties(DomainObjectReader.java:204)
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.doMerge(DomainObjectReader.java:157)
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.doMerge(DomainObjectReader.java:185)
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.merge(DomainObjectReader.java:135)
	... 48 common frames omitted
{code} 

The reason seems to be that in {{DomainObjectReader}} the {{PersistentEntity}} for a {{HashMap}} is {{null}}.

{code:JAVA}
public class DomainObjectReader {
	public <T> T readPut(final ObjectNode source, T target, final ObjectMapper mapper) {

		Assert.notNull(source, ""ObjectNode must not be null!"");
		Assert.notNull(target, ""Existing object instance must not be null!"");
		Assert.notNull(mapper, ""ObjectMapper must not be null!"");

		final PersistentEntity<?, ?> entity = entities.getPersistentEntity(target.getClass());
{code}

This works before [DATAREST-461|https://jira.spring.io/browse/DATAREST-461] was included. 

You can find a example, to reproduce here [https://github.com/sebastian-sch/mongo_data_rest]",,,,,,,,,,,,,,,,,DATAREST-461,,,,,,,,,,,,,,,2015-03-20 02:00:16.51,9223372036854775807,issuemaster(issuemaster),,"0|i089kn:",9223372036854775807,9223372036854775807,,,56 - Fowler GA,,,,,,,,,,,"20/Mar/15 2:00 AM;olivergierke;That should be fixed! Thanks for reporting.","27/May/15 2:06 AM;CalamarBicefalo;I am using spring-data-rest 2.3.0 and It looks like this issue is not resolved. Same NPE in the same place.

I'm working with spring data Mongo.

For entity:

{code:java}

@Document(collection = ""formDefinitions"")
public class CustomFormDefinition  extends AbstractMongoDocument<CustomFormDefinition> {

    private String name;
    private String description;

    private List<AgnosticCustomFieldDefinition> fieldDefinitions;

//public accessors
}

@Configurable
public class AbstractMongoDocument<T> implements Persistable<T>{

    @Transient
    @Autowired
    private transient MongoTemplate mongoTemplate;

    @Id
    private String id;

    @CreatedDate
    private LocalDateTime createdDate = LocalDateTime.now();

    @LastModifiedDate
    public LocalDateTime modifiedDate = LocalDateTime.now();
//public accessors
}
{code}


And tests

{code:java}

@Test
    public void fullUpdateShouldChangeAllValues() throws Exception {
        cleanableCFD = new CustomFormDefinition();
        cleanableCFD.setName(""test"");
        cleanableCFD.setDescription(""test desc"");

        mvc.perform(
                put(""/form-definitions/"" + cleanableCFD.getId())
                .content(""{\""id\"":\""""+cleanableCFD.getId()+""\"",\""name\"":\""updated!!\""}"")
                .contentType(org.springframework.http.MediaType.APPLICATION_JSON))

                .andExpect(status().is2xxSuccessful())
        ;
        mvc.perform(get(""/form-definitions/"" + cleanableCFD.getId()))
                .andExpect(jsonPath(""$.name"", is(""updated!!"")))
                .andExpect(jsonPath(""$.description"", isEmptyOrNullString()))

                .andExpect(status().is2xxSuccessful())
        ;
    }
{code}


@Test
    public void partialUpdateShouldKeepNonSpecifiedValues() throws Exception {
        cleanableCFD = new CustomFormDefinition();
        cleanableCFD.setName(""test"");
        cleanableCFD.setDescription(""test desc"");

        mvc.perform(
                patch(""/form-definitions/"" + cleanableCFD.getId())
                        .content(""{\""name\"":\""updated!!\""}"")
                        .contentType(org.springframework.http.MediaType.APPLICATION_JSON))

                .andExpect(status().is2xxSuccessful())
        ;
        mvc.perform(get(""/form-definitions/"" + cleanableCFD.getId()))
                .andExpect(jsonPath(""$.name"", is(""updated!!"")))
                .andExpect(jsonPath(""$.description"", is(""test desc"")))

                .andExpect(status().is2xxSuccessful())
        ;
    }


{{org.springframework.http.converter.HttpMessageNotReadableException: Could not read an object of type class net.pi.components.fds.core.model.CustomFormDefinition from the request!; nested exception is org.springframework.http.converter.HttpMessageNotReadableException: Could not read payload!; nested exception is java.lang.NullPointerException
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.readPatch(PersistentEntityResourceHandlerMethodArgumentResolver.java:183)
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.read(PersistentEntityResourceHandlerMethodArgumentResolver.java:160)
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.resolveArgument(PersistentEntityResourceHandlerMethodArgumentResolver.java:125)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:129)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:776)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:705)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:839)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:65)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:770)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:167)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:134)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:144)
	at net.pi.components.fds.web.FormDefinitionEndpoints.partialUpdateShouldKeepNonSpecifiedValues(FormDefinitionEndpoints.java:174)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:73)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:82)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:73)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:224)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:83)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:68)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:163)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)
Caused by: org.springframework.http.converter.HttpMessageNotReadableException: Could not read payload!; nested exception is java.lang.NullPointerException
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.read(DomainObjectReader.java:90)
	at org.springframework.data.rest.webmvc.config.JsonPatchHandler.applyMergePatch(JsonPatchHandler.java:129)
	at org.springframework.data.rest.webmvc.config.JsonPatchHandler.apply(JsonPatchHandler.java:99)
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.readPatch(PersistentEntityResourceHandlerMethodArgumentResolver.java:181)
	... 48 more
Caused by: java.lang.NullPointerException
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.getJacksonProperties(DomainObjectReader.java:204)
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.doMerge(DomainObjectReader.java:157)
	at org.springframework.data.rest.webmvc.json.DomainObjectReader.read(DomainObjectReader.java:88)
	... 51 more}}","27/May/15 2:21 AM;CalamarBicefalo;Oliver, It looks like changing my mongo configuration to inheriting from AbstractMongoConfiguration also workarounded this issue.","27/May/15 2:23 AM;CalamarBicefalo;As it did [https://jira.spring.io/browse/DATAMONGO-1212 in DATAMONGO-1212].","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#868|https://github.com/spring-projects/spring-data-rest/issues/868]. ",,,,,,,,,,,,,,,,,,,
Repository controllers not invoked if resource is handled manually in dedicated media type,DATAREST-490,62632,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,eberhardwolff,eberhardwolff,11/Mar/15 4:38 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,11/Mar/15 7:39 AM,2.2.2 (Evans SR2),2.3 RC1 (Fowler),,,2.3 GA (Fowler),,,,,,,0,,,,,"I have a Spring Data REST project. For some URLs I want to create a {{@Controller}} that renders the resources as HTML. I am using a {{@RequestMapping}} with {{produces = MediaType.TEXT_HTML_VALUE}}. In fact this controller is called if the URL is requested. However, if I do a request for JSON I get a 406 - while in fact the Spring Data REST controller should be called. I noticed that the log output says that the Spring Data REST controller doesn't register with any value for produces.

I think a value for produces should be given. Maybe there is a way to do this but I didn't find it in the reference documentation. Maybe there are other ways to get different representations of the REST resources but that doesn't seem to be documented either. I guess different representations for the same resource are an important part of REST so I think there should be a way to do what I want to do.",,,,,,,,,,,,,,,,,,,,,,DATAREST-522,,,,,,,,,,2015-03-11 05:44:57.474,9223372036854775807,issuemaster(issuemaster),,"0|i089jj:",9223372036854775807,9223372036854775807,,,56 - Fowler GA,,,,,,,,,,,"11/Mar/15 5:44 AM;olivergierke;The issue is not so much the Spring Data REST controllers not defining any {{produces}} attribute but our custom {{HandlerMapping}} setup: we currently register two {{HandlerMapping}} instances: one that handles all controllers annotated with {{@BasePathAwareController}} which are controllers whose mappings have to honor the Spring Data REST base-path configuration (e.g. the ones serving ALPS metadata). The second handler mapping handles all controllers that expose resources for repositories.

The split is necessary as the latter handling applies a stricter check for mappings to make sure it's not actually trying to handle requests for paths that are not backed by repositories. In a standard Spring MVC application, this setup will even be prepended with a standard {{RequestMappingHandlerMapping}} that will cause all standard Spring MVC controllers to be handled.

Depending on whether you use {{@BasePathAwareController}} or {{@Controller}} in your scenario, Spring MVC detects the the mapping bound to {{text/html}} as content type but rightfully not consider it as its {{produces}} clause does not match. {{org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(…)}} will then discover the request actually matching except the media type and thus throw an exception to indicate that state. This however bubbles up through {{DispatcherServlet.getHandler(…)}} which actually iterates all {{HandlerMapping}} to find a suitable ones but thus causes all other registered {{HandlerMapping}} instances not even being tried.

IYAM, that particular method should actually continue trying to resolve a handler until it exhausted all registered and only throw the exception if it couldn't find one eventually. Although I haven't made up my mind on which exception to finally throw in case multiple {{HandlerMappings}} threw exceptions. As this would mean a pretty core change to the framework, I wonder what [~juergen.hoeller] and [~rstoya05-aop] think about this.

The even more problematic aspect here is that we can't fully solve this issue in Spring Data REST. I could of course hide our two {{HandlerMapping}} implementations behind a delegating {{HandlerMapping}} that does the special exception handling. This however would not fix the issue for users using {{@Controller}} as this would still be handled by a separate {{HandlerMapping}} and thus run into the issue described above.","11/Mar/15 5:49 AM;eberhardwolff;Thanks a lot for looking into this! At least I did not do anything stupid. :-)

I have a workaround: I am using @RequestMapping with .html in the URL - and that works.","11/Mar/15 7:39 AM;olivergierke;This should be fixed with [this commit|https://github.com/spring-projects/spring-data-rest/commit/4f8298c71176365ec638ca5ea8e5655ef5d1a8ec]. I basically implemented what I described above, so that you should be able to get this working using {{@BasePathAwareController}}. Discovered a [tiny glitch|SPR-12806] in {{DispatcherServlet}} along the way.

Feel free to give the 2.3.0 snapshots a try (switching the Spring Boot {{spring-data-releasetrain.version}} property to {{Fowler-BUILD-SNAPSHOT}}.","25/Mar/15 2:44 AM;kakawait;Lol that why my application failed when upgrading to Fowler train :) I can now remove my similar bean I created before 2.3.0 like following: http://stackoverflow.com/a/27802520/636472.

However could be possible to have a {{configure}} method inside {{RepositoryRestMvcConfiguration}} to custom it? In my case I want to add {{RequestMappingHandlerMapping}} inside delegation chain.

{{configure}} should allow to add handler inside list and maybe change {{Order}} value","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#867|https://github.com/spring-projects/spring-data-rest/issues/867]. ",,,,,,,,,,,,,,,,,,,
RepositoryPropertyReferenceController.createPropertyReference(…) does not work for empty content supplied on Spring 4.1,DATAREST-485,62483,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,03/Mar/15 12:30 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,03/Mar/15 12:53 AM,2.2.2 (Evans SR2),,,,2.2.3 (Evans SR3),2.3 RC1 (Fowler),,,,,,0,,,,,"Spring 4.1's {{RequestResponseBodyMethodProcessor}} rejects a request with an empty payload if a parameter annotated with {{@RequestBody}} is not configured to {{required = true}}. Even in this case it forcibly returns {{null}} so that a {{HandlerMethodArgumentResolver}} that could even deal with an empty payload is not even invoked.

We need to switch to {{required = false}} to not run into the rejection and manually default the {{Resources<Object>}} in case it's {{null}}",,,,,,,,,,,,,,,,,,,,,,DATAREST-499,SPR-12778,,,,,,,,,2020-12-31 10:30:06.768,9223372036854775807,issuemaster(issuemaster),,"0|i088pz:",9223372036854775807,9223372036854775807,,,56 - Fowler RC1,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#812|https://github.com/spring-projects/spring-data-rest/issues/812]. ",,,,,,,,,,,,,,,,,,,,,,,
Fix small typo in reference docs,DATAREST-484,62481,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,gregturn,gregturn,gregturn,02/Mar/15 2:29 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,04/Mar/15 2:57 AM,,,,,2.3 RC1 (Fowler),,,,Documentation,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-03-03 06:05:04.319,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/166,"0|i088pj:",9223372036854775807,9223372036854775807,,,56 - Fowler RC1,,,,,,,,,,,"02/Mar/15 2:30 PM;gregturn;Waiting on confirmation of submitter's CLA status.","03/Mar/15 6:05 AM;tcrossland;Just signed and submitted, confirmation number 111120150303020330. 
Seems a bit excessive having to sign an agreement to submit a spelling correction.","04/Mar/15 2:25 AM;olivergierke;Thank your for that. It's not strictly necessary for minor fixes but I guess Greg just wanted to be on the safe side. Positive side effect: you're all set for future (more exhaustive) contributions :). Once again thank you, it's the small things that matter, too.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#863|https://github.com/spring-projects/spring-data-rest/issues/863]. ",,,,,,,,,,,,,,,,,,,,
VenueProjection with List<ContactProjection> returns List<Contact> instead,DATAREST-477,62244,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,bluish,bluish,16/Feb/15 2:11 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,16/Feb/15 3:44 AM,2.2.1 (Evans SR1),,,,,,,,,,,0,list,projection,rest,,"I have 2 entities that are exposed by Spring Data REST: Venue and Contact. A Venue can have multiple Contacts.
I create this projections:
{code:title=VenueDetails.java}
@Projection(name=""details"", types = Venue.class)
public interface VenueDetails {
    int getId();
    String getName();
	//...
    List<ContactDetails> getContacts();
}
{code}

{code:title=ContactDetails.java}
@Projection(name=""details"", types = Contact.class)
public interface ContactDetails {
    int getId();
    String getContact();
    ContactType getContact_type();
}
{code}

When the client invokes {{http://localhost:8080/myrestservice/rest/venues/2?projection=details}} gets:

{code:JSON}
{
  ""id"" : 2,
  ""name"" : ""A place in the desert"",
  ""contacts"" : [ {
    ""id"" : 1,
    ""contact"" : ""555 768547"",
  }, {
    ""id"" : 2,
    ""contact"" : ""contacts@example.org"",
  }],
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/myrestservice/rest/venues/2{?projection}"",
      ""templated"" : true
    },
    ""contacts"" : {
      ""href"" : ""http://localhost:8080/myrestservice/rest/venues/2/contacts""
    }
  }
}
{code}

You see that every contact misses ""contact_type"".
But ""contact_type"" is shown when invoking {{http://localhost:8080/myrestservice/rest/contacts/1?projection=details}}:

{code:JSON}
{
  ""id"" : 1,
  ""contact"" : ""555 768547"",
  ""contact_type"" : {
    ""code"" : ""T"",
    ""name"" : ""Telephone""
  },
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/myrestservice/rest/contacts/1{?projection}"",
      ""templated"" : true
    },
    ""contact_type"" : {
      ""href"" : ""http://localhost:8080/myrestservice/rest/contacts/1/contact_type""
    },
    ""venue"" : {
      ""href"" : ""http://localhost:8080/myrestservice/rest/contacts/1/venue""
    }
  }
}
{code}

*So it seems that expressing {{List<AProjectionOfALinkedObject>}} in a projection, ignores {{AProjectionOfALinkedObject}} and simply uses {{ALinkedObject}}.*",,,,,,,,,,,,,,,,DATAREST-408,,,,,,,,,,,,,,,,2015-02-16 02:17:48.516,9223372036854775807,issuemaster(issuemaster),,"0|i087bz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16/Feb/15 2:17 AM;olivergierke;That seems to be a duplicate of DATAREST-408 which has been fixed in 2.2.2. Would you mind upgrading and seeing whether this is still an issue?","16/Feb/15 2:52 AM;bluish;Thanks Oliver, you are right!
I'm using Spring Boot and in the latest version (1.2.1) Spring Data REST is 2.2.1, but I solved adding dependancies on spring-data-rest-webmvc and -core 2.2.2. I'll wait for the next Spring Boot release.
Thank you very much","16/Feb/15 3:43 AM;olivergierke;You can simplify the setup by just overriding the {{spring-data-releasetrain.version}} property to {{Evans-SR2}}. This will make sure all necessary Spring Data modules get updated to the matching versions.","16/Feb/15 5:10 AM;bluish;Great suggestion! I started using it, thanks","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#856|https://github.com/spring-projects/spring-data-rest/issues/856]. ",,,,,,,,,,,,,,,,,,,
ALPS metadata exposes attributes that can be marked @JsonIgnore,DATAREST-463,61897,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,gregturn,gregturn,gregturn,21/Jan/15 2:28 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,22/Feb/15 6:30 AM,,,,,2.2.3 (Evans SR3),2.3 RC1 (Fowler),,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-01-21 23:44:41.299,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/160,"0|hzzzzy:zzzzzy",9223372036854775807,9223372036854775807,,,55 - Evans SR2,56 - Fowler RC1,,,,,,,,,,"21/Jan/15 11:44 PM;olivergierke;A few comments on the PR.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#842|https://github.com/spring-projects/spring-data-rest/issues/842]. ",,,,,,,,,,,,,,,,,,,,,,
@JsonIgnored properties must not be updated in PUT requests,DATAREST-461,61883,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,21/Jan/15 4:57 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,21/Jan/15 5:54 AM,2.2.1 (Evans SR1),2.3 M1 (Fowler),,,2.2.2 (Evans SR2),2.3 RC1 (Fowler),,,,,,0,,,,,When issuing {{PUT}} requests for existing entities properties that are not mapped (e.g. using {{@JsonIgnore}}) must not be nulled out.,,,,,,,,,,,,,,,,,,,,,,DATAREST-491,,,,,,,,,,2020-12-31 10:30:03.965,9223372036854775807,issuemaster(issuemaster),,"0|i0859z:",9223372036854775807,9223372036854775807,,,55 - Evans SR2,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#840|https://github.com/spring-projects/spring-data-rest/issues/840]. ",,,,,,,,,,,,,,,,,,,,,,,
Make sure @Bean methods of RepositoryRestMvcConfiguration are called from proxied methods,DATAREST-460,61855,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,20/Jan/15 1:38 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,26/Jan/15 3:20 AM,2.1.4 (Dijkstra SR4),2.2.1 (Evans SR1),2.3 M1 (Fowler),,2.1.5 (Dijkstra SR5),2.2.2 (Evans SR2),2.3 RC1 (Fowler),,,,,0,,,,,"Some methods in {{RepositoryRestMvcConfiguration}} are private but call {{@Bean}} annotated methods in turn. These method calls will not get intercepted correctly as private methods are not intercepted by the CGLib generated subtype of the configuration class. That means that {{@Bean}} methods called from the private methods will not be routed through the interceptor and thus Spring's bean management (scopes, invocation of callbacks) will not be applied.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:03.831,9223372036854775807,issuemaster(issuemaster),,"0|i08547:",9223372036854775807,9223372036854775807,,,55 - Evans SR2,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#839|https://github.com/spring-projects/spring-data-rest/issues/839]. ",,,,,,,,,,,,,,,,,,,,,,,
Typo in JavaDoc of BaseUri,DATAREST-457,61831,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,19/Jan/15 10:57 PM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,19/Jan/15 11:01 PM,,,,,2.1.5 (Dijkstra SR5),2.2.2 (Evans SR2),2.3 RC1 (Fowler),,Documentation,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:03.473,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/159,"0|i08533:",9223372036854775807,9223372036854775807,,,55 - Evans SR2,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#836|https://github.com/spring-projects/spring-data-rest/issues/836]. ",,,,,,,,,,,,,,,,,,,,,,,
RepositoryRestHandlerMapping is handling non-repository requests,DATAREST-448,61782,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,16/Jan/15 5:31 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,16/Jan/15 7:38 AM,2.3 M1 (Fowler),,,,2.3 RC1 (Fowler),,,,,,,0,,,,,The fix for DATAREST-429 has introduced a regression of {{RepositoryRestHandlerMapping}} not verifying the {{repositoryLookupPath}} actually pointing to a repository in the first place.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:02.461,9223372036854775807,issuemaster(issuemaster),,"0|i084t3:",9223372036854775807,9223372036854775807,,,55 - Evans SR2,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#827|https://github.com/spring-projects/spring-data-rest/issues/827]. ",,,,,,,,,,,,,,,,,,,,,,,
Remove usage of RepositoriesUtils as it potentially breaks customizations of ResourceMetadata,DATAREST-446,61779,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,16/Jan/15 4:13 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,20/Jan/15 3:58 AM,2.1.4 (Dijkstra SR4),2.2.1 (Evans SR1),2.3 M1 (Fowler),,2.1.5 (Dijkstra SR5),2.2.2 (Evans SR2),2.3 RC1 (Fowler),,Repositories,,,0,,,,,Using {{RepositoriesUtils}} to determine the managed domain type from a repository interface potentially subverts customizations made for {{RepositoryMetadata}}. We should remove its usage entirely.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:02.141,9223372036854775807,issuemaster(issuemaster),,"0|i084sf:",9223372036854775807,9223372036854775807,,,55 - Evans SR2,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#825|https://github.com/spring-projects/spring-data-rest/issues/825]. ",,,,,,,,,,,,,,,,,,,,,,,
RepositoryCollectionResourceMapping does not obtain domain type from RepositoryMetadata,DATAREST-445,61778,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,16/Jan/15 3:13 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,16/Jan/15 4:10 AM,2.1.4 (Dijkstra SR4),2.2.1 (Evans SR1),2.3 M1 (Fowler),,2.1.5 (Dijkstra SR5),2.2.2 (Evans SR2),2.3 RC1 (Fowler),,Repositories,,,0,,,,,{{RepositoryCollectionResourceMapping}} is manually looking up generic types to determine the domain type handled but actually it can just use the {{RepositoryMetadata}} handed into the constructor.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:02.099,9223372036854775807,issuemaster(issuemaster),,"0|i084s7:",9223372036854775807,9223372036854775807,,,55 - Evans SR2,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#824|https://github.com/spring-projects/spring-data-rest/issues/824]. ",,,,,,,,,,,,,,,,,,,,,,,
Spring Data Rest example module has no build file,DATAREST-436,61526,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,neeme,neeme,09/Jan/15 7:32 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,09/Jan/15 7:43 AM,,,,,2.2.2 (Evans SR2),2.3 RC1 (Fowler),,,,,,0,,,,,"I wanted to build the example project ""spring-data-rest-example"" but there is no build file. From history, I could dig out that there used to be Gradle build system and that did not require a separate build file in sub-projects. After adopting Maven, it seems ""spring-data-rest-example"" was left behind.

https://github.com/spring-projects/spring-data-rest/tree/master/spring-data-rest-example",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-01-09 07:43:23.597,47599,issuemaster(issuemaster),,"0|i08447:",47371,47301,https://github.com/spring-projects/spring-data-rest/tree/master/spring-data-rest-example,,55 - Evans SR2,,,,,,,,,,,"09/Jan/15 7:43 AM;olivergierke;That's been a leftover from when we extracted the samples into a canonical repository you can find at https://github.com/spring-projects/spring-data-examples. I removed the obsolete cruft.","09/Jan/15 7:52 AM;neeme;Thanks!","09/Jan/15 7:53 AM;neeme;Maybe it would make sense to reference that repository from https://github.com/spring-projects/spring-data-rest/ ? Currently, it is not easy to find.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#798|https://github.com/spring-projects/spring-data-rest/issues/798]. ",,,,,,,,,,,,,,,,,,,,
"when not logged in and opening DATAREST JIRA page, error is returned",DATAREST-435,61525,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Invalid,olivergierke,neeme,neeme,09/Jan/15 7:29 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,09/Jan/15 7:36 AM,,,,,,,,,,,,0,,,,,"Open https://jira.spring.io/browse/DATAREST while you are not logged in.
I see, error 500 and:
{noformat}
Technical details
Log's referral number: d043369a-e5db-44f0-abc1-b8c402ff6960
Cause
Referer URL: Unknown
com.google.template.soy.tofu.SoyTofuException: In template JIRA.Templates.Projects.browseTabs: In 'print' tag, expression ""$projectAvatarUrl"" evaluates to undefined.
com.google.template.soy.tofu.SoyTofuException: In template JIRA.Templates.Projects.browseTabs: In 'print' tag, expression ""$projectAvatarUrl"" evaluates to undefined.
	at com.google.template.soy.tofu.internal.BaseTofu.renderMainHelper(BaseTofu.java:341)
	at com.google.template.soy.tofu.internal.BaseTofu.renderMain(BaseTofu.java:300)
	at com.google.template.soy.tofu.internal.BaseTofu.access$100(BaseTofu.java:56)
	at com.google.template.soy.tofu.internal.BaseTofu$RendererImpl.render(BaseTofu.java:427)
	at com.atlassian.soy.impl.DefaultSoyManager.render(DefaultSoyManager.java:111)
	at com.atlassian.soy.impl.SoyTemplateRendererImpl.render(SoyTemplateRendererImpl.java:40)
	at com.atlassian.soy.impl.SoyTemplateRendererImpl.render(SoyTemplateRendererImpl.java:33)
	at com.atlassian.jira.web.dispatcher.JiraSoyViewDispatcher.dispatch(JiraSoyViewDispatcher.java:36)
	at com.atlassian.jira.web.dispatcher.JiraWebworkViewDispatcher.dispatchViaSoyView(JiraWebworkViewDispatcher.java:148)
	at com.atlassian.jira.web.dispatcher.JiraWebworkViewDispatcher.dispatchView(JiraWebworkViewDispatcher.java:65)
	at com.atlassian.jira.web.dispatcher.JiraWebworkActionDispatcher.service(JiraWebworkActionDispatcher.java:204)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
{noformat}

Probably some configuration issue as it all works after I log in.",any,,,,,,,,,,,,,,,,,,,,,,,,,"09/Jan/15 7:30 AM;neeme;Screen Shot 2015-01-09 at 17.29.28.png;https://jira.spring.io/secure/attachment/22449/Screen+Shot+2015-01-09+at+17.29.28.png",,,,,,2015-01-09 07:36:02.636,47598,issuemaster(issuemaster),,"0|i0843z:",47370,47300,https://jira.spring.io/browse/DATAREST,,,,,,,,,,,,,"09/Jan/15 7:36 AM;olivergierke;I'll forward your request, but that's nothing that can be fixed within the project.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#815|https://github.com/spring-projects/spring-data-rest/issues/815]. ",,,,,,,,,,,,,,,,,,,,,,
PersistentEntityResourceHandlerMethodArgumentResolver's read(…) methods swallow exceptions,DATAREST-434,61503,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,08/Jan/15 1:52 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,11/Jan/15 11:05 AM,2.2.1 (Evans SR1),2.3 M1 (Fowler),,,2.2.2 (Evans SR2),2.3 RC1 (Fowler),,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:30:00.775,47576,issuemaster(issuemaster),,"0|i083zb:",47349,47278,,,55 - Evans SR2,,,,,,,,,,,"31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#797|https://github.com/spring-projects/spring-data-rest/issues/797]. ",,,,,,,,,,,,,,,,,,,,,,,
NullPointerException when POST/PUT entities with rels in DomainClassConverter,DATAREST-427,61366,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,jhiemer,jhiemer,25/Dec/14 7:58 AM,31/Dec/20 10:30 AM,31/Dec/21 2:58 PM,05/Jan/15 7:15 AM,2.2.1 (Evans SR1),2.3 M1 (Fowler),,,2.2.2 (Evans SR2),2.3 RC1 (Fowler),,,Repositories,,,0,,,,,"My setup is completely based on Java Configuration files. I configured my my application as follows:

{code:java}
@Override
	protected Class<?>[] getRootConfigClasses() {
		return new Class<?>[] { CustomMongoDBRepositoryConfig.class, CustomJPARepositoryConfig.class, CustomSecurityConfiguration.class };
	}
..

@Override
	public void onStartup(ServletContext servletContext) throws ServletException {		
        AnnotationConfigWebApplicationContext webCtx = new AnnotationConfigWebApplicationContext();
        webCtx.register(CustomRepositoryRestMvcConfiguration.class);
     
        DispatcherServlet dispatcherServlet = new DispatcherServlet(webCtx);
        ServletRegistration.Dynamic appServlet = servletContext.addServlet(""exporter"", dispatcherServlet);
        appServlet.setAsyncSupported(true);
        appServlet.setLoadOnStartup(1);
        appServlet.addMapping(""/*"");
        
        FilterRegistration.Dynamic corsFilter = servletContext.addFilter(""corsFilter"", CORSFilter.class);
        corsFilter.addMappingForUrlPatterns(null, false, ""/*"");
        
        FilterRegistration.Dynamic filter = servletContext.addFilter(""openSessionInViewFilter"", OpenEntityManagerInViewFilter.class);
        filter.setInitParameter(""singleSession"", ""true"");
        filter.addMappingForServletNames(null, true, ""exporter"");
        
        FilterRegistration.Dynamic securityFilter = servletContext.addFilter(""springSecurityFilterChain"", 
        		new DelegatingFilterProxy(""springSecurityFilterChain""));
        securityFilter.addMappingForUrlPatterns(null, false, ""/*"");
        
        
	    super.onStartup(servletContext);
	}
{code}

The interesting thing is, everything is working fine. MVC URLs are mapped, controllers are working, Spring Security is working, SD REST URLs are mapped and working, but one thing is not working:

POST/PUT of entities with rels. Having the following payload posted to /roles 
{code:json}
{
  ""name"": ""Developer"",
  ""description"": ""Standard role for a agent developer in the system"",
  ""rights"": [
    ""http://localhost:8080/web/rights/186"",
    ""http://localhost:8080/web/rights/189"",
    ""http://localhost:8080/web/rights/185"",
    ""http://localhost:8080/web/rights/46""
  ]
}
{code}

leads to the following exception:

{code}
LOGBACK:16:54:09.765 [tomcat-http--2] ERROR o.s.d.r.w.RepositoryRestExceptionHandler - Could not read JSON: (was java.lang.NullPointerException) (through reference chain: de.cloudscale.model.user.Role[""rights""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: (was java.lang.NullPointerException) (through reference chain: de.cloudscale.model.user.Role[""rights""])
org.springframework.http.converter.HttpMessageNotReadableException: Could not read JSON: (was java.lang.NullPointerException) (through reference chain: de.cloudscale.model.user.Role[""rights""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: (was java.lang.NullPointerException) (through reference chain: de.cloudscale.model.user.Role[""rights""])
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:208) ~[AbstractJackson2HttpMessageConverter.class:4.1.1.RELEASE]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readInternal(AbstractJackson2HttpMessageConverter.java:192) ~[AbstractJackson2HttpMessageConverter.class:4.1.1.RELEASE]
	at org.springframework.http.converter.AbstractHttpMessageConverter.read(AbstractHttpMessageConverter.java:159) ~[AbstractHttpMessageConverter.class:4.1.1.RELEASE]
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.read(PersistentEntityResourceHandlerMethodArgumentResolver.java:185) ~[PersistentEntityResourceHandlerMethodArgumentResolver.class:na]
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.read(PersistentEntityResourceHandlerMethodArgumentResolver.java:168) ~[PersistentEntityResourceHandlerMethodArgumentResolver.class:na]
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.resolveArgument(PersistentEntityResourceHandlerMethodArgumentResolver.java:123) ~[PersistentEntityResourceHandlerMethodArgumentResolver.class:na]
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77) ~[HandlerMethodArgumentResolverComposite.class:4.1.1.RELEASE]
{code}

Which in turn is a result of fact that in DomainClassConverter the variable repositories is empty during the POST/PUT call. Following that the RepositoryInformations are empty and the NPE is thrown. 

I guess this is happening due to some context splitup during startup time. The interesting thing is, that POST/PUT a plain object without any rels works properly, I am not able to see any stuff in the debug logs showing me the second context",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2015-01-05 07:15:47.837,47439,issuemaster(issuemaster),,"0|i0834n:",47211,47141,,,55 - Evans SR2,,,,,,,,,,,"25/Dec/14 1:03 PM;jhiemer;I did some further implementation of the web application context initialisation with the follwoing config:

{code:java}
public class CustomWebInitializer implements WebApplicationInitializer {
	
	@Override
	public void onStartup(ServletContext servletContext) throws ServletException {
		AnnotationConfigWebApplicationContext rootCtx = new AnnotationConfigWebApplicationContext();
		rootCtx.register(
				CustomMongoDBRepositoryConfig.class, 
				CustomJPARepositoryConfig.class,
				CustomSecurityConfiguration.class 
		);

		servletContext.addListener(new ContextLoaderListener(rootCtx));
		servletContext.addFilter(""springSecurityFilterChain"", DelegatingFilterProxy.class);
		servletContext.getFilterRegistration(""springSecurityFilterChain"").addMappingForUrlPatterns(
			EnumSet.of(DispatcherType.REQUEST),
			false,
			""/*""
		);
		
        AnnotationConfigWebApplicationContext webCtx = new AnnotationConfigWebApplicationContext();
        webCtx.register(CustomRepositoryRestMvcConfiguration.class);
     
        DispatcherServlet dispatcherServlet = new DispatcherServlet(webCtx);
        ServletRegistration.Dynamic appServlet = servletContext.addServlet(""exporter"", dispatcherServlet);
        appServlet.setAsyncSupported(true);
        appServlet.setLoadOnStartup(1);
        appServlet.addMapping(""/*"");
..
}
}
{code}

With the same result. Everything is working except the POST/PUT on entities with rels.","26/Dec/14 11:59 AM;jhiemer;So even after I moved the MVC and Spring Data REST configuration into single class with two static classes like that:

{code:java}
@Configuration
public class CustomWebConfig {
	
	@Configuration
	@EnableWebMvc
	static class CustomMvcConfiguration extends WebMvcConfigurerAdapter {
		
		....

	}

	
	@EnableHypermediaSupport(type = { HypermediaType.HAL })
	@Import(value = { CustomBillingConfiguration.class, CustomMailConfiguration.class, CustomMvcConfiguration.class })
	@ComponentScan(basePackages = { ""de.project.web"", ""de.project.model.nosql.migration"", 
			""de.project.model.migration"" })
	static class CustomRepositoryRestMvcConfiguration extends RepositoryRestMvcConfiguration {
		
		....

	}
}
{code}

the NPE still remains.","05/Jan/15 12:36 AM;jhiemer;Full stacktrace:

{code:bash}
LOGBACK:09:35:21.085 [tomcat-http--2] ERROR o.s.d.r.w.RepositoryRestExceptionHandler - Could not read JSON: (was java.lang.NullPointerException) (through reference chain: de.project.model.user.Role[""rights""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: (was java.lang.NullPointerException) (through reference chain: de.project.model.user.Role[""rights""])
org.springframework.http.converter.HttpMessageNotReadableException: Could not read JSON: (was java.lang.NullPointerException) (through reference chain: de.project.model.user.Role[""rights""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: (was java.lang.NullPointerException) (through reference chain: de.project.model.user.Role[""rights""])
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:208) ~[AbstractJackson2HttpMessageConverter.class:4.1.1.RELEASE]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readInternal(AbstractJackson2HttpMessageConverter.java:192) ~[AbstractJackson2HttpMessageConverter.class:4.1.1.RELEASE]
	at org.springframework.http.converter.AbstractHttpMessageConverter.read(AbstractHttpMessageConverter.java:159) ~[AbstractHttpMessageConverter.class:4.1.1.RELEASE]
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.read(PersistentEntityResourceHandlerMethodArgumentResolver.java:185) ~[PersistentEntityResourceHandlerMethodArgumentResolver.class:na]
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.read(PersistentEntityResourceHandlerMethodArgumentResolver.java:168) ~[PersistentEntityResourceHandlerMethodArgumentResolver.class:na]
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.resolveArgument(PersistentEntityResourceHandlerMethodArgumentResolver.java:123) ~[PersistentEntityResourceHandlerMethodArgumentResolver.class:na]
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77) ~[HandlerMethodArgumentResolverComposite.class:4.1.1.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:157) ~[InvocableHandlerMethod.class:4.1.1.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:124) ~[InvocableHandlerMethod.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) ~[ServletInvocableHandlerMethod.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:781) ~[RequestMappingHandlerAdapter.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:721) ~[RequestMappingHandlerAdapter.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83) ~[AbstractHandlerMethodAdapter.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:943) ~[DispatcherServlet.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877) ~[DispatcherServlet.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) [FrameworkServlet.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:868) [FrameworkServlet.class:4.1.1.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:644) [servlet-api.jar:na]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) [FrameworkServlet.class:4.1.1.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:725) [servlet-api.jar:na]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:8.0.9.B]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-websocket.jar:8.0.9.B]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:8.0.9.B]
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal(OpenEntityManagerInViewFilter.java:177) [OpenEntityManagerInViewFilter.class:4.1.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [OncePerRequestFilter.class:4.1.1.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:8.0.9.B]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118) [FilterSecurityInterceptor.class:3.2.0.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) [FilterSecurityInterceptor.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) [ExceptionTranslationFilter.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103) [SessionManagementFilter.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) [AnonymousAuthenticationFilter.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154) [SecurityContextHolderAwareRequestFilter.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45) [RequestCacheAwareFilter.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:199) [AbstractAuthenticationProcessingFilter.class:3.2.0.RELEASE]
	at de.project.security.v2.authentication.CustomUsernamePasswordAuthenticationFilter.doFilter(CustomUsernamePasswordAuthenticationFilter.java) [CustomUsernamePasswordAuthenticationFilter.class:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110) [LogoutFilter.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at de.project.security.v2.filter.TokenAuthenticationFilter.doFilter(TokenAuthenticationFilter.java:57) [TokenAuthenticationFilter.class:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:57) [HeaderWriterFilter.class:3.2.0.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [OncePerRequestFilter.class:4.1.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) [SecurityContextPersistenceFilter.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50) [WebAsyncManagerIntegrationFilter.class:3.2.0.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [OncePerRequestFilter.class:4.1.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) [FilterChainProxy.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) [FilterChainProxy.class:3.2.0.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344) [DelegatingFilterProxy.class:4.1.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261) [DelegatingFilterProxy.class:4.1.1.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:8.0.9.B]
	at de.project.config.cors.CORSFilter.doFilterInternal(CORSFilter.java:35) [CORSFilter.class:na]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [OncePerRequestFilter.class:4.1.1.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [catalina.jar:8.0.9.B]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:503) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:136) [catalina.jar:8.0.9.B]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [catalina.jar:8.0.9.B]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [catalina.jar:8.0.9.B]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:526) [catalina.jar:8.0.9.B]
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1078) [tomcat-coyote.jar:8.0.9.B]
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:655) [tomcat-coyote.jar:8.0.9.B]
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222) [tomcat-coyote.jar:8.0.9.B]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1566) [tomcat-coyote.jar:8.0.9.B]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1523) [tomcat-coyote.jar:8.0.9.B]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_51]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_51]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-util.jar:8.0.9.B]
	at java.lang.Thread.run(Thread.java:744) [na:1.7.0_51]
Caused by: com.fasterxml.jackson.databind.JsonMappingException: (was java.lang.NullPointerException) (through reference chain: de.project.model.user.Role[""rights""])
	at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:232) ~[JsonMappingException.class:2.3.0]
	at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:197) ~[JsonMappingException.class:2.3.0]
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.wrapAndThrow(BeanDeserializerBase.java:1420) ~[BeanDeserializerBase.class:2.3.0]
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:244) ~[BeanDeserializer.class:2.3.0]
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:118) ~[BeanDeserializer.class:2.3.0]
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:2986) ~[ObjectMapper.class:2.3.0]
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2151) ~[ObjectMapper.class:2.3.0]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:205) ~[AbstractJackson2HttpMessageConverter.class:4.1.1.RELEASE]
	... 84 common frames omitted
Caused by: java.lang.NullPointerException: null
	at org.springframework.data.repository.support.DomainClassConverter.convert(DomainClassConverter.java:76) ~[DomainClassConverter.class:na]
	at org.springframework.data.rest.core.UriToEntityConverter.convert(UriToEntityConverter.java:110) ~[UriToEntityConverter.class:na]
	at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$UriStringDeserializer.deserialize(PersistentEntityJackson2Module.java:397) ~[PersistentEntityJackson2Module$UriStringDeserializer.class:na]
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:227) ~[CollectionDeserializer.class:2.3.0]
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:204) ~[CollectionDeserializer.class:2.3.0]
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:23) ~[CollectionDeserializer.class:2.3.0]
	at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:525) ~[SettableBeanProperty.class:2.3.0]
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:99) ~[MethodProperty.class:2.3.0]
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:242) ~[BeanDeserializer.class:2.3.0]
	... 88 common frames omitted
LOGBACK:09:35:21.088 [tomcat-http--2] ERROR o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failed to invoke @ExceptionHandler method: org.springframework.http.ResponseEntity<org.springframework.data.rest.webmvc.support.ExceptionMessage> org.springframework.data.rest.webmvc.RepositoryRestExceptionHandler.handleNotReadable(org.springframework.http.converter.HttpMessageNotReadableException)
java.lang.IllegalArgumentException: Headers must not be null!
	at org.springframework.util.Assert.notNull(Assert.java:112) ~[Assert.class:4.1.1.RELEASE]
	at org.springframework.data.rest.webmvc.RepositoryRestExceptionHandler.response(RepositoryRestExceptionHandler.java:190) ~[RepositoryRestExceptionHandler.class:na]
	at org.springframework.data.rest.webmvc.RepositoryRestExceptionHandler.errorResponse(RepositoryRestExceptionHandler.java:180) ~[RepositoryRestExceptionHandler.class:na]
	at org.springframework.data.rest.webmvc.RepositoryRestExceptionHandler.badRequest(RepositoryRestExceptionHandler.java:166) ~[RepositoryRestExceptionHandler.class:na]
	at org.springframework.data.rest.webmvc.RepositoryRestExceptionHandler.badRequest(RepositoryRestExceptionHandler.java:162) ~[RepositoryRestExceptionHandler.class:na]
	at org.springframework.data.rest.webmvc.RepositoryRestExceptionHandler.handleNotReadable(RepositoryRestExceptionHandler.java:83) ~[RepositoryRestExceptionHandler.class:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_51]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_51]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_51]
	at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_51]
	at org.springsource.loaded.ri.ReflectiveInterceptor.jlrMethodInvoke(ReflectiveInterceptor.java:1270) ~[springloaded-1.2.0.jar:1.2.0.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:215) ~[InvocableHandlerMethod.class:4.1.1.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132) ~[InvocableHandlerMethod.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) ~[ServletInvocableHandlerMethod.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:362) ~[ExceptionHandlerExceptionResolver.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:60) [AbstractHandlerMethodExceptionResolver.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:138) [AbstractHandlerExceptionResolver.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:75) [HandlerExceptionResolverComposite.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1167) [DispatcherServlet.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1004) [DispatcherServlet.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:955) [DispatcherServlet.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877) [DispatcherServlet.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) [FrameworkServlet.class:4.1.1.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:868) [FrameworkServlet.class:4.1.1.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:644) [servlet-api.jar:na]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) [FrameworkServlet.class:4.1.1.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:725) [servlet-api.jar:na]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:8.0.9.B]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-websocket.jar:8.0.9.B]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:8.0.9.B]
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal(OpenEntityManagerInViewFilter.java:177) [OpenEntityManagerInViewFilter.class:4.1.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [OncePerRequestFilter.class:4.1.1.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:8.0.9.B]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118) [FilterSecurityInterceptor.class:3.2.0.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) [FilterSecurityInterceptor.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) [ExceptionTranslationFilter.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103) [SessionManagementFilter.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) [AnonymousAuthenticationFilter.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154) [SecurityContextHolderAwareRequestFilter.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45) [RequestCacheAwareFilter.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:199) [AbstractAuthenticationProcessingFilter.class:3.2.0.RELEASE]
	at de.project.security.v2.authentication.CustomUsernamePasswordAuthenticationFilter.doFilter(CustomUsernamePasswordAuthenticationFilter.java) [CustomUsernamePasswordAuthenticationFilter.class:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110) [LogoutFilter.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at de.project.security.v2.filter.TokenAuthenticationFilter.doFilter(TokenAuthenticationFilter.java:57) [TokenAuthenticationFilter.class:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:57) [HeaderWriterFilter.class:3.2.0.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [OncePerRequestFilter.class:4.1.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) [SecurityContextPersistenceFilter.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50) [WebAsyncManagerIntegrationFilter.class:3.2.0.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [OncePerRequestFilter.class:4.1.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [FilterChainProxy$VirtualFilterChain.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) [FilterChainProxy.class:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) [FilterChainProxy.class:3.2.0.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344) [DelegatingFilterProxy.class:4.1.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261) [DelegatingFilterProxy.class:4.1.1.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:8.0.9.B]
	at de.project.config.cors.CORSFilter.doFilterInternal(CORSFilter.java:35) [CORSFilter.class:na]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [OncePerRequestFilter.class:4.1.1.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [catalina.jar:8.0.9.B]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:503) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:136) [catalina.jar:8.0.9.B]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [catalina.jar:8.0.9.B]
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610) [catalina.jar:8.0.9.B]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [catalina.jar:8.0.9.B]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:526) [catalina.jar:8.0.9.B]
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1078) [tomcat-coyote.jar:8.0.9.B]
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:655) [tomcat-coyote.jar:8.0.9.B]
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222) [tomcat-coyote.jar:8.0.9.B]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1566) [tomcat-coyote.jar:8.0.9.B]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1523) [tomcat-coyote.jar:8.0.9.B]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_51]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_51]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-util.jar:8.0.9.B]
	at java.lang.Thread.run(Thread.java:744) [na:1.7.0_51]
{code}","05/Jan/15 7:15 AM;olivergierke;I've changed the overall way of how the {{DomainClassConverter}} is used so that this shouldn't really appear anymore.","31/Dec/20 10:30 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#807|https://github.com/spring-projects/spring-data-rest/issues/807]. ",,,,,,,,,,,,,,,,,,,
Make sure HAL HttpMessageConverter is ordered before the standard one,DATAREST-424,61159,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,10/Dec/14 10:34 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,02/Jan/15 3:36 AM,2.2.1 (Evans SR1),2.3 M1 (Fowler),,,2.2.2 (Evans SR2),2.3 RC1 (Fowler),,,,,,0,,,,,"{{RepositoryRestMvcConfiguration}} registers two {{HttpMessageConverter}} beans handling {{ResourceSupport}} types. One is handling the HAL media type, the other all Spring Data REST specific media types. We have to make sure that depending on the settings of {{config().useHalAsDefaultJsonMediaType()}} one is registered before the other.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:59.711,47232,issuemaster(issuemaster),,"0|i081pz:",46983,46934,,,55 - Evans SR2,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#804|https://github.com/spring-projects/spring-data-rest/issues/804]. ",,,,,,,,,,,,,,,,,,,,,,,
Spring Data REST registered ConversionService not used when overriding individual resources,DATAREST-423,61049,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,kakawait,kakawait,07/Dec/14 3:58 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,09/Dec/14 4:18 AM,2.3 M1 (Fowler),,,,2.2.2 (Evans SR2),2.3 RC1 (Fowler),,,,,,0,converter,custom,,,"I have a business object {{User}} and in my application I have to set property {{active}} to false when deleting {{User}}.

*I don't want to expose my business logic on REST model* so I wanted to override {{DELETE /user/\{id\}}} behavior to patch {{user}} to set {{active}} to {{false}}.

In order to achieve that I write my own controller with following piece of code:

{code}
@RepositoryRestController
@ResponseBody
@RequestMapping(""/users"")
public class UserController {

    @Inject
    private UserService userService;

    @ResponseStatus(value = HttpStatus.NO_CONTENT)
    @RequestMapping(method = RequestMethod.DELETE, value = ""/{user}"")
    public void delete(@PathVariable(""user"") User user) {
        user.setActive(false);
        userService.save(user);
    }
}
{code}

Method is correctly called but I get an {{org.springframework.beans.ConversionNotSupportedException}}...

So I tried to add a custom converter ({{String}} -> {{User}}) like describe here: http://docs.spring.io/spring-data/rest/docs/1.1.0.M1/reference/htmlsingle/#d4e110

But the converter is never called.

When debugging I saw that https://github.com/spring-projects/spring-framework/blob/master/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java#L169 is {{NULL}} that why my converter is not called.

I will try to find more and create PR if possible but atm I don't have more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-12-07 05:42:47.255,47122,issuemaster(issuemaster),,"0|i0815z:",46893,46824,,,55 - Evans SR2,,,,,,,,,,,"07/Dec/14 5:42 AM;olivergierke;The conversion should work in the first place. Make sure your MVC configuration either uses the {{defaultConversionService}} bean that Spring Data REST registers as {{ConversionService}} or explicitly use {{@EnableSpringDataWebSupport}} in your MVC configuration. The latter will activate the to-entity-conversion for MVC controllers.","07/Dec/14 6:15 AM;kakawait;I publish a sample project https://github.com/kakawait/DATAREST-423 to reproduce my issue:

Scenario: {{DELETE /api/users/1}}

As you can see I explicitly use {{@EnableSpringDataWebSupport}} but without success","07/Dec/14 6:51 AM;olivergierke;Awesome, would you mind adding a test case that fails?","07/Dec/14 7:55 AM;kakawait;I push a commit with a basic Integration test to highlight my problem, please consider using {{mvn clean test}} to reproduce.","08/Dec/14 2:47 AM;kakawait;Can we consider as a bug? If yes I will try to fix it with PR (if I find time because vacancies are coming)","09/Dec/14 1:53 AM;olivergierke;You filed a ticket, let me look into it :).","09/Dec/14 2:51 AM;olivergierke;You seem to mix up quite a few things here. I can get this to work if I remove {{@RepositoryRestController}} annotation (which is an internal one by the way and shouldn't be used from user code). and replace it with {{@RestController}} and augment the mapping to {{/api/users/1}}. The basic difference is that with {{@RepositoryRestController}} the actual method invocation is piped through a slightly different pipeline (to be able to apply {{ResourceProcessor}} beans). However, this pipeline doesn't seem to be aware of the {{ConversionService}} instance we create in {{RepositoryRestMvcConfiguration}}.

I have a fix handy but want to make sure I equip it with enough tests to prevent regressions so that I thought it might be worth mentioning the workaround.","09/Dec/14 3:08 AM;kakawait;Yes you'r correct if I'm changing to {{@RestController}} It's works but It will break SDR. Indeed by setting {{@RestController}} the {{/api/users}} mapping will be managed by {{RequestMappingHandlerMapping}} and all SDR will not more accessible and exception {{HttpRequestMethodNotSupportedException}} will be throw.

{{RequestMappingHandler}} is called before {{RepositoryRestHandlerMapping}}, SDR mapping will not be resolved anymore.

I ""hacked"" my code by adding {{@RepositoryRestController}} in order to do not managed my controller by {{RequestMappingHandlerMapping}} and it works. SDR still working and my controller override the SDR as needed. But conversion issue occurs in this configuration.","09/Dec/14 3:20 AM;olivergierke;What exactly do you mean by ""all SDR will not more accessible""? I just changed your controller to use {{@RestController}} and the augmented mapping and SDR continues to work as expected but also uses the manual implementation in {{UserController}} for {{DELETE}} requests for individual users.","09/Dec/14 3:28 AM;kakawait;Hum I will retry  and write some teat cases if needed","09/Dec/14 4:18 AM;olivergierke;This should be fixed in master and the 2.2.x bugfix branch. Feel free to give the snapshots a try.","09/Dec/14 4:27 AM;kakawait;Before any further investigations, I want to be sure that my use case is clear:

I'm using SDR for my {{UserRepository}}, I fixes mapping on {{/api/users}}.
Then I wanted to override SDR delete behavior, so {{DELETE /api/users/\{id}}} (keep in mind that I want to keep the same path) so I write a custom controller with {{@RequestMapping(method = RequestMethod.DELETE, value = ""/api/users/\{id\}"")}}.

If I annotated my custom controller with {{@RestController}}: override (and any possible conversion) works well but after when I try to request any SDR API (for example {{HEAD /api/users/1}}) I get {{org.springframework.web.client.HttpClientErrorException: 405 Method Not Allowed}}. Test reproduction here: https://github.com/kakawait/DATAREST-423/commit/e83d917ddd8d59e34ea88b5529da0f5508d1dc90

If I annotated my custom controller with {{@RepositoryRestController}}: overrides works well and SDR API still accessible (not more 405). But conversion is no more supported.","09/Dec/14 4:32 AM;kakawait;Ho I posted to late :) Thanks I will try fix asap. Thanks so much","09/Dec/14 5:31 AM;kakawait;Tested with {{2.3.0.BUILD-SNAPSHOT}} It's perfect for me!","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#803|https://github.com/spring-projects/spring-data-rest/issues/803]. ",,,,,,,,,
BaseUrl mapping not workig,DATAREST-411,60675,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,spstorey,spstorey,16/Nov/14 12:25 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,16/Nov/14 11:28 PM,2.2 GA (Evans),,,,,,,,Repositories,,,0,,,,,"Not sure if the issue is with Data-Rest or Spring Boot but extending RepositoryRestConfiguration and setting a BaseUri (to say /rest) using 1.1.9.RELEASE move the list repository controller from / to /rest allowing / to get to the index.html page in src/main/resource/public/ amending to version

<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-parent</artifactId>
<version>1.2.0.M2</version>

Make the list repository controller work on BOTH / and /rest",,,,,,,,,,,,,,,,DATAREST-381,,,,,,,,,,,,,,,,2014-11-16 23:28:17.964,46749,issuemaster(issuemaster),,"0|i07z1z:",46551,46451,http://stackoverflow.com/questions/26872286/spring-data-rest-override-requestmapping/26941719?iemail=1&noredirect=1#26941719,,,,,,,,,,,,,"16/Nov/14 11:28 PM;olivergierke;Boot 1.2.0.M2 was still on the 2.2.0 (Evans GA) version of Spring Data REST which unfortunately included DATAREST-381. This has been fixed with Evans SR1 (Spring Data REST 2.2.1) and is already picked up by Spring Boot 1.1.9 and 1.2.0 RC1. Upgrading to those should let you see the bug fixed.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#788|https://github.com/spring-projects/spring-data-rest/issues/788]. ",,,,,,,,,,,,,,,,,,,,,,
Nested projections not loading nested lists,DATAREST-408,60573,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,jhiemer,jhiemer,11/Nov/14 12:04 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,01/Dec/14 10:18 AM,2.1.4 (Dijkstra SR4),2.2.1 (Evans SR1),,,2.1.5 (Dijkstra SR5),2.2.2 (Evans SR2),2.3 M1 (Fowler),,Repositories,,,0,error-reporting,jpa,,,"When nesting projections, Lists/Maps are not included in the processing. Sample:

The following snippet represents the nested projection, which contains a list of limitations.
{code:json}
""name"" : ""Light"",
    ""description"" : ""Light"",
    ""enabled"" : true,
    ""limitations"" : [ {
      ""name"" : ""Request"",
      ""description"" : ""Number of requests per billing period"",
      ""type"" : null,
      ""value"" : 20.0
    } ],
    ""links"" : [ ],
    ""content"" : [ ],
    ""links"" : [ {
      ""rel"" : ""self"",
      ""href"" : ""http://localhost:8080/web/specifications/1310{?projection}""
    }, {
      ""rel"" : ""limitations"",
      ""href"" : ""http://localhost:8080/web/specifications/1310/limitations""
    }, {
      ""rel"" : ""product"",
      ""href"" : ""http://localhost:8080/web/specifications/1310/product""
    }
{code}

Using the parent projection, which contains the nested projection
{code:json}
""name"" : ""Light"",
    ""description"" : ""Light"",
    ""prices"" : [ {
      ""value"" : -1.0,
      ""currency"" : ""USD"",
      ""unit"" : ""Request"",
      ""period"" : ""Month"",
      ""interval"" : 1,
      ""approximation"" : false,
      ""component"" : null
    } ],
    ""productCategory"" : {
      ""name"" : ""Price comparison"",
      ""description"" : ""Blablablaba""
    },
    ""specifications"" : [ {
      ""name"" : ""Light"",
      ""description"" : ""Light"",
      ""enabled"" : true
    } ],
    ""trialPeriod"" : null,
    ""trialInterval"" : 0,
    ""links"" : [ ],
    ""content"" : [ ],
    ""links"" : [ {
      ""rel"" : ""self"",
      ""href"" : ""http://localhost:8080/web/products/1300{?projection}""
    }, {
      ""rel"" : ""specifications"",
      ""href"" : ""http://localhost:8080/web/products/1300/specifications""
    }, {
      ""rel"" : ""product"",
      ""href"" : ""http://localhost:8080/web/products/1300/product""
    }, {
      ""rel"" : ""productCategory"",
      ""href"" : ""http://localhost:8080/web/products/1300/productCategory""
    }, {
      ""rel"" : ""accounts"",
      ""href"" : ""http://localhost:8080/web/products/1300/accounts""
    } ]
{code}

one can see, that all types (int, string) etc. are rendered, but the list not. ",,,,,,,,,,,,DATAREST-477,,,,DATAREST-394,,,,,,,,,,,,,,,,2014-11-14 08:53:03.448,46647,issuemaster(issuemaster),,"0|i07yif:",46463,46349,,,55 - Evans SR2,,,,,,,,,,,"14/Nov/14 8:53 AM;olivergierke;The general issue is in {{ProjectingMethodInterceptor}}. It probably needs to inspect the return type more closely. We might want to create a {{TypeInformation}} for the return type (using {{ClassTypeInformation.fromReturnTypeOf(method)}} and then call the APIs to detect collections and maps, subsequently compare the component and value types and potentially project the individual elements. To create new map and collection instances, Spring's {{CollectionFactory}} can be used to create new instances of the original types.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#785|https://github.com/spring-projects/spring-data-rest/issues/785]. ",,,,,,,,,,,,,,,,,,,,,,
Projections are not applied to collection attributes,DATAREST-394,59924,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,saulo2,saulo2,26/Sep/14 12:26 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,01/Dec/14 10:18 AM,2.1.4 (Dijkstra SR4),2.2 GA (Evans),,,2.1.5 (Dijkstra SR5),2.2.2 (Evans SR2),2.3 M1 (Fowler),,Repositories,,,0,pull-request-submitted,,,,"When a projection has an attribute which is a collection of another projection, Spring Data REST is not populating the collection with projections but with entities. This patch allows Spring Data REST to apply projections to collection attributes as well.",,3600,3600,,0%,3600,3600,,,,,DATAREST-408,,,,,,,,,,,,,,,,,,,,2014-12-01 10:09:01.372,46059,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/152,"0|i06j27:",38126,45761,https://github.com/spring-projects/spring-data-rest/pull/152,,55 - Evans SR2,,,,,,,,,,,"04/Nov/14 6:18 AM;saulo2;Hi,

Any news about this pull request? Will it be accepted?","01/Dec/14 10:09 AM;olivergierke;I just pushed a fix to that to mast and the maintained bugfix branches. I partially used your test cases but extended the fix to also project all collection types, arrays as well as maps.","19/Dec/14 5:10 AM;morneo;Hi, 
 can you tell when release of library containing this fix can be expected ?","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#711|https://github.com/spring-projects/spring-data-rest/issues/711]. ",,,,,,,,,,,,,,,,,,,,
Spring DATA REST is not applying projections to collection attributes,DATAREST-391,59908,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,saulo2,saulo2,26/Sep/14 8:19 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,11/Apr/17 7:45 AM,2.2 GA (Evans),,,,,,,,Repositories,,,0,,,,,"When a projection has an attribute which is a collection of another projection, Spring Data REST is not populating the collection with projections but with entities. This patch allows Spring Data REST to apply projections to collection attributes as well.",,3600,3600,,0%,3600,3600,,,,,,,,,DATAREST-389,,,,,,,,,,,,,,,,2020-12-31 10:29:55.864,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/152,"0|i083rz:",47316,9223372036854775807,https://github.com/spring-projects/spring-data-rest/pull/152,,,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#770|https://github.com/spring-projects/spring-data-rest/issues/770]. ",,,,,,,,,,,,,,,,,,,,,,,
Spring DATA REST is not applying projections to collection attributes,DATAREST-390,59907,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,saulo2,saulo2,26/Sep/14 8:19 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,11/Apr/17 7:45 AM,2.2 GA (Evans),,,,,,,,Repositories,,,0,pull,,,,"When a projection has an attribute which is a collection of another projection, Spring Data REST is not populating the collection with projections but with entities. This patch allows Spring Data REST to apply projections to collection attributes as well.",,3600,3600,,0%,3600,3600,,,,,,,,,DATAREST-389,,,,,,,,,,,,,,,,2020-12-31 10:29:55.75,9223372036854775807,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/152,"0|i083s7:",47317,9223372036854775807,https://github.com/spring-projects/spring-data-rest/pull/152,,,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#769|https://github.com/spring-projects/spring-data-rest/issues/769]. ",,,,,,,,,,,,,,,,,,,,,,,
Can't use controller advices if annotation based event handling is used,DATAREST-388,59903,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,saulo2,saulo2,26/Sep/14 6:05 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,04/Dec/14 10:21 AM,2.2 GA (Evans),,,,2.1.5 (Dijkstra SR5),2.2.2 (Evans SR2),2.3 RC1 (Fowler),,Repositories,,,2,pull-request-submitted,,,,"Spring Data REST is capturing any exceptions thrown by event handler methods and re-throwing them as {{IllegalStateException}}. By doing this, Spring Data REST makes it very hard to adopt any exception handling mechanism offered by Spring MVC (controller advices, for example) because we cannot pinpoint which exception we would like to handle in each exception handler of the controller advice (the only exception that we can handle is {{IllegalStateException}}).

The patch in the [pull request|https://github.com/spring-projects/spring-data-rest/pull/151] corrects this behavior. If a event handler throws a unchecked exception, than it makes sure that this very exception is thrown. Otherwise (if it is a checked exception), it resorts to the old behavior, encapsulating the checked exception in a {{IllegalStateException}}. Without this patch, the controller advice shown below does not work.

{code:java}
@ControllerAdvice
public class ExceptionHandlingControllerAdvice {
  @ExceptionHandler(UnauthorizedException.class)
  public ResponseEntity handleUnauthorizedException(UnauthorizedException exception) {
    String stackTrace = ExceptionUtils.getStackTrace(exception);
    return new ResponseEntity(stackTrace, HttpStatus.FORBIDDEN); 
  }
}
{code}

By applying this patch, I believe Spring Data REST better fits the Spring MVC world.",,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,2014-11-29 08:24:44.516,46056,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/151,"0|i07vhb:",45972,45758,,,,,,,,,,,,,,"04/Nov/14 6:18 AM;saulo2;Hi,

Any news about this pull request? Will it be accepted?","29/Nov/14 8:24 AM;runarb;I'm having the same problem. Worked around it by adding an @ExceptionHandler on IllegalStateException which usually wraps an InvocationTargetException which again wraps the original exception thrown from the repository event handler. Quite ugly, but the only workaround I could think of.

I would really appreciate this bug to be solved as well.","29/Nov/14 8:51 AM;saulo2;Hi Runar,

I am quite disappointed with the Spring Data REST maintainers. More than a month ago I opened two or three bugs with pull requests that fixes them but the maintainers neither gave me feedback nor accepted the pull requests. Not a good way to evolve a community...","29/Nov/14 9:01 AM;olivergierke;I'm sorry for that experience Saulo. We're a small team only and autumn's pretty packed with conference travel, too. We're just about to wrap up the first milestone for 2.3 but I'll definitely look more closely into the PRs you've submitted. They usually require a bit of rework so that we're quite defensive in asking people to change stuff, especially if it's the first time they submit stuff. But still I understand that letting them stay untouched for such a long time is not a good alternative either.

So thanks for your contributions. I'll promise we'll get both tickets fixed in for 2.3 RC1 and the both look like good candidates for back-ports into Evans SR2.","29/Nov/14 9:06 AM;saulo2;Nice to hear that Oliver!

Please let me know if there is anything else that I can do in order for the pull requests to be accepted.","04/Dec/14 3:32 AM;kakawait;+1 eagerly awaited feature. I must used patch until fix will be ported to the official release","04/Dec/14 6:34 AM;kakawait;I will add other point:

Inside the {{org.springframework.data.rest.webmvc.AbstractRepositoryRestController}} there is some generic {{@ExceptionHandler}}, however the default Spring {{HandlerExceptionResolver}} will check {{@ExceptionHandler}} then {{@ControllerAdvice}}.

So if I want to override the behavior for one of these {{@ExceptionHandler}} I should implement my own {{ExceptionResolver}}. I think (must be tested) if you replace {{@ExceptionHandler}} with {{@ControllerAdvice}} it should be possible to override the Spring DATA REST {{@ControllerAdvice}} using {{@Order}} annotation.
","04/Dec/14 10:21 AM;olivergierke;This fixed in master and the bugfix branches. For master I took the chance to clean up that rather dark area of the codebase by quite a bit which caused a few type renames and moves. Also I reduced the rather convoluted way to express interest in events for a certain type by rather expecting the first parameter of the annotated handler method. So no need to duplicate the type definition anymore for 2.3. The actual fix for the wrapped exception was solved by using Spring Framework's {{ReflectionUtils}} which already takes care of the necessary bits and pieces.

I've back-ported the fix manually by leaving away the more advanced changes and reduce it to the plain exception related bug fix. Feel free to give the snapshots a spin.","05/Dec/14 1:06 AM;runarb;Just tried 2.2.2-BUILD-SNAPSHOT, and it works as expected. Thanks a lot!

My next take was actually exact what Thibaud Lepretre brought up. Was your last reply aimed at that issue as well, Oliver, or is this a separate (yet unregistered) issue?","05/Dec/14 1:37 AM;kakawait;@Runar Botter I just created an issue https://jira.spring.io/browse/DATAREST-421 & pull request https://github.com/spring-projects/spring-data-rest/pull/155","05/Dec/14 4:55 AM;runarb;Ok, thanks, Thibaud!","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#767|https://github.com/spring-projects/spring-data-rest/issues/767]. ",,,,,,,,,,,,
Projection doesn't work with a @MappedSuperclass,DATAREST-385,59683,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,ptahchiev,ptahchiev,11/Sep/14 12:13 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,15/Oct/14 3:24 AM,,,,,2.2.1 (Evans SR1),2.3 M1 (Fowler),,,,,,0,,,,,"Hello,

I'm having the following {{MapedSuperclass}} which is a base class for all my entities:
{code}

@MappedSuperclass
public abstract class AbstractEntityModel {

    @Column(name = ""id"", nullable = false)
    private String uid = java.util.UUID.randomUUID().toString();
}

{code}

and I have created a {{Projection}} for it in the same package:

{code}
@Projection(name = ""basic"", types = { AbstractEntityModel.class })
public interface BasicEntityModelProjection {

    public String getUid();
}
{code}

Unfortunately when I navigate to the {{/rest}} url I don't see the projection in the generated URLs of my entities.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-09-11 13:07:38.11,45841,issuemaster(issuemaster),,"0|i07ulb:",45828,45543,,,53 - Evans SR1,,,,,,,,,,,"11/Sep/14 1:07 PM;olivergierke;Is it the {{?projection}} missing only or are you saying that the projection also not getting applied, when you submit the parameter nonetheless.","14/Sep/14 8:31 AM;ptahchiev;Hi Oliver,

I don't see it in the json response, but even if I provide the projection like this: {{http://localhost:8111/storefront/rest/category?projection=basic}} it still returns the whole json category.","21/Oct/14 8:49 AM;ptahchiev;Tested with the latest SNAPSHOT it works like a charm :)","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#764|https://github.com/spring-projects/spring-data-rest/issues/764]. ",,,,,,,,,,,,,,,,,,,,
Query method do not consider Sort parameters,DATAREST-384,59659,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,10/Sep/14 7:32 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,15/Oct/14 4:36 AM,2.1.4 (Dijkstra SR4),2.2 GA (Evans),,,2.2.1 (Evans SR1),2.3 M1 (Fowler),,,,,,0,,,,,"Assume you have a repository interface like this:

{code:java}
public interface CustomerRepository extends Repository<Customer, Long> {

  List<Customer> findByLastname(@Param(""lastname"") String lastname, Sort sort);
}
{code}

then the {{Sort}} paramter is neither advertised

{code:javascript}
{ ""_links"" : {
    ""findByLastname"" : {
      ""href"" : ""http://localhost:8080/customers/search/findByLastname{?lastname}"",
      ""templated"" : true
    }
  }
}
{code}

nor is it considered if you trigger a request to the URI:

{code}
http://localhost:8080/customers/search/findByLastname?sort=firstname,asc
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:54.979,45817,issuemaster(issuemaster),,"0|i07ua7:",45778,45519,,,53 - Evans SR1,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#763|https://github.com/spring-projects/spring-data-rest/issues/763]. ",,,,,,,,,,,,,,,,,,,,,,,
Controllers for Alps and repository listing get listed under the root even if a base URI is configured,DATAREST-381,59592,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,04/Sep/14 5:27 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,04/Sep/14 5:36 AM,2.2 RC1 (Evans),,,,2.2.1 (Evans SR1),2.3 M1 (Fowler),,,Repositories,,,0,,,,,,,,,,,,,,,,,DATAREST-411,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:54.703,45750,issuemaster(issuemaster),,"0|i07ttj:",45703,45452,,,52 - Evans GA,,,,,,,,,,,"04/Sep/14 5:41 AM;olivergierke;/cc [~gregturn] - I verified Spring-A-Gram now working as expected.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#760|https://github.com/spring-projects/spring-data-rest/issues/760]. ",,,,,,,,,,,,,,,,,,,,,,
"UriStringDeserializer fails with ""Could not read JSON: Template must not be null or empty!""",DATAREST-377,59432,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,ruaghain,ruaghain,26/Aug/14 3:39 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,12/Jul/15 11:37 PM,2.1.2 (Dijkstra SR2),,,,2.3.2 (Fowler SR2),2.4 RC1 (Gosling),,,,,,18,,,,,"I've created integration tests to post an account to the spring-data-rest endpoint, this account contains a nested entity called accountType. When posting to the endpoint I get the error below. I've attached the stackoverflow URL that describes my problem exactly.

{noformat}
 org.springframework.http.converter.HttpMessageNotReadableException: Could not read JSON: Template must not be null or empty! (through reference chain: com.wraith.repository.entity.Account[""type""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Template must not be null or empty! (through reference chain: com.wraith.repository.entity.Account[""type""])
	at org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.readJavaType(MappingJackson2HttpMessageConverter.java:228)
	at org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.readInternal(MappingJackson2HttpMessageConverter.java:212)
	at org.springframework.http.converter.AbstractHttpMessageConverter.read(AbstractHttpMessageConverter.java:159)
	at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.resolveArgument(PersistentEntityResourceHandlerMethodArgumentResolver.java:100)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:79)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:157)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:124)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:749)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:689)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83)
	at com.wraith.repository.integrationTests.AbstractBaseIntegrationTests.performPostRequest(AbstractBaseIntegrationTests.java:105)
	at com.wraith.repository.integrationTests.AbstractBaseIntegrationTests.createNewEntity(AbstractBaseIntegrationTests.java:113)
	at com.wraith.repository.integrationTests.AccountRequestTest.createNewAccount(AccountRequestTest.java:43)
	at com.wraith.repository.integrationTests.AccountRequestTest.testCreateAccountRequest(AccountRequestTest.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:233)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:87)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:176)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67)
Caused by: com.fasterxml.jackson.databind.JsonMappingException: Template must not be null or empty! (through reference chain: com.wraith.repository.entity.Account[""type""])
	at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:232)
	at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:197)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.wrapAndThrow(BeanDeserializerBase.java:1420)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:244)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:118)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:2993)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2158)
	at org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.readJavaType(MappingJackson2HttpMessageConverter.java:225)
	... 41 more
Caused by: java.lang.IllegalArgumentException: Template must not be null or empty!
	at org.springframework.util.Assert.hasText(Assert.java:162)
	at org.springframework.hateoas.UriTemplate.<init>(UriTemplate.java:56)
	at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$UriStringDeserializer.deserialize(PersistentEntityJackson2Module.java:380)
	at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:525)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:99)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:242)
	... 45 more
{noformat}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-09-05 05:45:53.333,45590,issuemaster(issuemaster),https://github.com/Ruaghain/TemplateError,"0|i07svj:",45550,45292,http://stackoverflow.com/questions/24569399/how-to-post-nested-entities-spring-data-rest,,Gosling RC1,,,,,,,,,,,"26/Aug/14 7:33 AM;ruaghain;If you run the AccountReqiestTest.testCreateAccountRequest() this should reproduce the error.","05/Sep/14 5:45 AM;runarb;FYI: According to the build history of one of my projects, this problem occured when upgrading spring-data-rest-webmvc from 2.1.0.RELEASE to 2.1.1.BUILD-SNAPSHOT in June (regarding DATAREST-320 - which is also the reason why I'm not able to roll back). Haven't had the time to look further into it until now, but I checked and the same issue still persists in 2.1.4.RELEASE.

I really wish this will get some attention really soon.","05/Sep/14 8:40 AM;olivergierke;Any chance we can get a more reduced test case? It's hard to walk through all the indirections and code not really needed to reproduce the error it seems.

Generally speaking assigning related, managed entities (i.e. the related entity is also managed via an exported repository) is done by submitting URIs as values for the fields you need to assign, *not* by submitting the related entity as a nested document:

{code:javascript}
{…
  ""related"" : ""http://…""
}
{code}

and not by submitting the representation of the related entity by some means. Also you can use the association resources expose for the related entites and send payloads of {{text/uri-list}} as documented [here|http://docs.spring.io/spring-data/rest/docs/current/reference/html/#repository-resources.association-resource]. If you follow these patterns and still can reproduce the issue, feel free to attach a sample project.","05/Sep/14 8:57 AM;ruaghain;Hi Oliver

That's as simple as I thought I could make it. I'll have a look at the document that you provided a link to, and I'll let you know.

Many Thanks.
","05/Sep/14 9:06 AM;olivergierke;I get that, I still have to understand what you're trying to achive. That can all be in a single test calss and doesn't need to be spread amongst a hand full of methods and super types. Two domain types, two repositories, a test case with some configuration, that's should be it.

I just want to be able to quickly identify whether you might expect something to work the way it's not supposed to or where exactly we run into a glitch.","05/Sep/14 9:18 AM;ruaghain;That, I'm afraid was a consequence of me, using my master code base, and removing all the other unnecessary entities, that would still allow me to still reproduce the error. Basically, what I was trying to do was add in a new ""Account"", by referencing a new ""Account Type"" as well - and assuming that both would be created, and automatically related. 

Like Runar mentioned about, this certainly worked before - so I assumed something had changed with regards to how it should work. I just couldn't seem to figure out what else I needed to do.

Anyway, I'll modify the project when I get a chance this weekend, to make it more clear.","05/Sep/14 9:31 AM;olivergierke;Awesome! Appreciate the effort and take your time :).","05/Sep/14 9:35 AM;ruaghain;No problem :-)","08/Sep/14 1:05 PM;ruaghain;Hi Oliver, hope you're well. Here, I've simplified the AccountRequestTest.testCreateAccountRequest() to make it more clear. Sure let me know if it's grand.
Thanks.","25/Sep/14 2:04 PM;josh@assuredlabor.com;We are experiencing this issue when trying to save a nested object structure through Spring-Data-Rest. Specifically we have a Question object which has multiple Answer objects. 

Questions refer to answers like this:

{code}
    @OneToMany(mappedBy = ""question"", cascade = CascadeType.ALL)
    @LazyCollection(LazyCollectionOption.FALSE)
    private List<Answer> answers = new LinkedList<Answer>();
{code}

Answers refer to questions like this:

{code}
	@ManyToOne(targetEntity = Question.class)
	@JoinColumn(name = ""question_id"", referencedColumnName = ""id"")
	private Question question;
{code}

Trying to save a new question like this results in the above error:

{code}
{
  ""questionText"":""Do you like using Spring?"",
  ""answers"":[{""answerText"":""Yes"",""answerKey"":1},{""answerText"":""No"",""answerKey"":2}]
}
{code}","25/Sep/14 8:24 PM;zpyoung;Joshua Chaitin-Pollak do you have sample code for your example in github?  I'm also having the same issue.  I even tried creating a custom controller to work around the issue but got a similar error.  I believe if you remove the Answer repository it will save.  This also is my question on Stackoverflow http://stackoverflow.com/questions/24356680/cant-post-a-collection.

Oliver would it be possible to have something like a Command attribute to allow us to configure how POST or PUT should work?  I'm thinking it would be the opposite of a projection.

I know we talked about it at great lengths already but the more I think about this issue the more I feel that it should be able to support both methods.   The current way by sending url to already created entities and full payload.","09/Oct/14 12:15 PM;ruaghain;Hi @olivergierke, how're things? Here, have you had a chance to look at this at all? ","09/Oct/14 1:59 PM;josh@assuredlabor.com;Hi @Zachariah Young: You are correct. I added this annotation:

{code}
@RestResource(exported = false)
{code}

to the top of my Answer repository, and now instead of referring to linked Answers, the Answer objects are embedded directly in the Question. According to the documentation, if the RestResource IS exported, you should be able to post a new nested object directly to the URL you want. In my example above this would be something like posting a JSON Answer to: {{/questions/\{question_id\}/answers/}}. This should create a new answer for your question.

What is frustrating is that if you disable exporting the resource, you can no longer create a new nested object by posting to {{/questions/\{question_id\}/answers/}}. I sort of get why this might be the case, but it does make managing nested objects a bit more complicated.

A related StackOverflow question is here: http://stackoverflow.com/questions/15886897/how-do-i-avoid-n1-queries-with-spring-data-rest

To the extent that I understand HATEOAS and the @RestResource(exported = false) annotation, I think its a good question - you don't seem to be able to have the best of both worlds with Spring Data REST (yet).

","03/Nov/14 6:58 PM;zpyoung;Any status on this?","24/Jan/15 3:09 AM;jhiemer;Which database you are working with?","26/Jan/15 2:14 PM;josh@assuredlabor.com;I am using MySQL 5.5 and Spring-Data-JPA","25/Feb/15 4:44 PM;jdkn74;As a workaround, you can send a content-type that hits the fallbackJsonConverter created by RepositoryRestMvcConfiguration.defaultMessageConverters().  Otherwise, the halJacksonHttpMessageConverter() or jacksonHttpMessageConverter() look like they always try to deserialize an embedded entity into a URI, and end up throwing this exception.","30/May/15 9:41 AM;jayalss;Even with the above workaround, isn't it true that you can't POST an object with both a nested object and a reference (a URL) to another managed entity at the same time? In that case is the only workaround to write a custom controller to handle the POST for that URL?","01/Jun/15 7:08 AM;jdkn74;@Jason, yes that's correct.  That question was also asked on a related StackOverflow question, http://stackoverflow.com/questions/24569399/how-to-post-nested-entities-with-spring-data-rest","12/Jul/15 11:37 PM;olivergierke;I've pushed fixes to make {{UriStringDeserializer}} more robust against invalid values to the branches for Gosling and Fowler. We now eagerly return {{null}} for empty values for associations and handle conversion failures (e.g. a JSON object submitted where a URI is expected) by explicitly rejecting those with a detailed error message.

Note, the rather convoluted example provided still doesn't work cause it's basically submitting invalid JSON (embedded object VS. the expected reference) to the server which definitely has to be rejected given we treat the separation of aggregates currently.","31/Dec/15 12:13 AM;doviche;package com.enterprise.platform.persistence.entity;

@Entity
@Table(name=""tipo_documento"")
public class TipoDocumento implements Serializable{

	@Id
	@Column(name=""ID"")
	private Short id;
	
	@Column(name=""DESCRIZIONE"")
	private String descrizione;
	
	... GETTER AND SETTER omitted
}

package com.enterprise.platform.persistence.entity;

@SuppressWarnings(""serial"")
@Entity(name=""FatturaCliente"")
@Table(name=""fattura_cliente"")
public class FatturaCliente implements Serializable {

	@Id
	@Column(name=""NUMERO"") 
	private Long numero;
		
	@Column(name=""ID_TIPO_DOCUMENTO"")
	private Short idTipoDocumento;	
	
	@OneToOne(cascade=CascadeType.ALL, fetch=FetchType.LAZY)
	@JoinColumn(name=""ID_TIPO_DOCUMENTO"", referencedColumnName=""ID"", insertable=false, updatable=false)
	private TipoDocumento tipoDocumento;	
	
	... GETTER AND SETTER omitted
}

// This is my repository for FatturaCliente entity
package com.enterprise.platform.persistence.repository;

@RestResource(path = ""fatturaCliente"", rel = ""fatturaCliente"")
@Produces(""applicationjson; charset=UTF-8;"")
public interface FatturaClienteRepository <T, ID> extends CrudRepository<FatturaCliente, Long>{
	
	@Query(""SELECT f FROM FatturaCliente f WHERE f.numero = :numero "")
	public FatturaCliente findFatturaByNumero(@Param(""numero"") Long numero);
	
	@Query(""select f from FatturaCliente f where f.dataEmissione = :dataEmissione"")
	public List<FatturaCliente> findFatturaByDataEmissione(@Param(""dataEmissione"") java.util.Date dataEmissione);	
}

// This is my repository for TipoDocumento entity

package com.enterprise.platform.persistence.repository;

@RestResource(path = ""tipoDocumento"", rel = ""tipoDocumento"")
@Produces(""application/json; charset=UTF-8;"")
public interface TipoDocumentoRepository  <T, ID> extends CrudRepository<TipoDocumento, Short>{
}


Hitting the browser with the url http://localhost:8080/fatturaCliente/16
works like a charm as the json response displays all the expected data 
as well as the different links provided by the HATEOAS spring implementation mechanism as follow:

This is the response regarding the invocation of the fatturaCliente entity with ID (16)
""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/fatturaCliente/16""
    },
    ""tipoDocumento"" : {
      ""href"" : ""http://localhost:8080/fatturaCliente/16/tipoDocumento""
    }
  }
  
When I hit the link http://localhost:8080/fatturaCliente/16/tipoDocumento
the response is as expected as well:
{
  ""id"" : 1,
  ""descrizione"" : ""Fattura Immediata"",
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/tipoDocumento/1""
    }
  }
}
The above response regards the type of invoice related to FatturaCliente.
I have different document types but this one is well correlated to fatturaCliente

So far so good
The following class is the implementation on the client side to save or update my fatturaCliente dto.

@Service
public class FatturaClienteServiceImpl implements FatturaClienteService {
	
	private static final Log logger = LogFactory.getLog(FatturaClienteServiceImpl.class);
	
	@Override
	public boolean salva(FatturaCliente fattura) {
		ClientConfig config = new DefaultClientConfig();
		Client client = Client.create(config); 
		WebResource webResource = client.resource(UriBuilder.fromUri(""http://localhost:8080/fatturaCliente"").build());

		ClientResponse response = webResource.type(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class, fattura);	

		logger.info(""saved "" + response.getEntity(String.class));
		
		return true;
	}
}

 but when I try to update or save the FatturaCliente object from my web client
which has the same class structure as the FatturaCliente entity at the backend, 
I've got the following exception at the endpoint/backend

{color:#205081}
org.springframework.http.converter.HttpMessageNotReadableException: Could not read document: Template must not be null or empty! (through reference chain: com.enterprise.platform.persistence.entity.FatturaCliente[""tipoDocumento""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Template must not be null or empty! (through reference chain: com.enterprise.platform.persistence.entity.FatturaCliente[""tipoDocumento""])
        at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:208)
        at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readInternal(AbstractJackson2HttpMessageConverter.java:192)
        at org.springframework.http.converter.AbstractHttpMessageConverter.read(AbstractHttpMessageConverter.java:159)
        at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.read(PersistentEntityResourceHandlerMethodArgumentResolver.java:205)
        at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.read(PersistentEntityResourceHandlerMethodArgumentResolver.java:169)
        at org.springframework.data.rest.webmvc.config.PersistentEntityResourceHandlerMethodArgumentResolver.resolveArgument(PersistentEntityResourceHandlerMethodArgumentResolver.java:125)
        at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:78)
        at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162)
        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:129)
        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110)
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:775)
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:705)
        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)
        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)
        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967)
        at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:869)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:648)
        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
        at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:217)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518)
        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:673)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1500)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1456)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
        at java.lang.Thread.run(Unknown Source)
Caused by: com.fasterxml.jackson.databind.JsonMappingException: Template must not be null or empty! (through reference chain: com.enterprise.platform.persistence.entity.FatturaCliente[""tipoDocumento""])
        at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:210)
        at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:177)
        at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.wrapAndThrow(BeanDeserializerBase.java:1428)
        at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:240)
        at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:118)
        at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3066)
        at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2221)
        at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:205)
        ... 47 common frames omitted
Caused by: java.lang.IllegalArgumentException: Template must not be null or empty!
        at org.springframework.util.Assert.hasText(Assert.java:162)
        at org.springframework.hateoas.UriTemplate.<init>(UriTemplate.java:56)
        at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$UriStringDeserializer.deserialize(PersistentEntityJackson2Module.java:392)
        at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:538)
        at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:99)
        at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:238)
        ... 51 common frames omitted{color}


Any idea colleagues?

Sincerey

Douglas","31/Dec/15 2:08 AM;doviche;Hello there,
sorry guys, doing copy and paste I basicly removed the introduction to this issue.

I am using spring-boot-starter-parent with version 1.2.7.RELEASE.

Regards and Happy new year to all of you

Douglas","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#708|https://github.com/spring-projects/spring-data-rest/issues/708]. ",
Latest SNAPSHOT return multiple links attribute,DATAREST-363,59035,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Blocker,Fixed,olivergierke,ptahchiev,ptahchiev,28/Jul/14 1:46 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,30/Aug/15 5:17 PM,,,,,2.3.3 (Fowler SR3),2.4 GA (Gosling),,,,,,3,,,,,"Hello,

I'm testing with the latest SNAPSHOT versions and since last friday I get the following JSON  back:
{code}
{
  ""links"" : [ {
    ""rel"" : ""self"",
    ""href"" : ""http://localhost:8111/storefront/rest/country{?page,size,sort}""
  }, {
    ""rel"" : ""search"",
    ""href"" : ""http://localhost:8111/storefront/rest/country/search""
  } ],
  ""content"" : [ {
    ""pk"" : 56296077566262224,
    ""uid"" : ""uk"",
    ""createdBy"" : ""anonymous"",
    ""createdDate"" : ""25/07/2014"",
    ""lastModifiedBy"" : ""anonymous"",
    ""lastModifiedDate"" : ""25/07/2014"",
    ""name"" : {
      ""bg"" : {
        ""value"" : ""Обединено кралство""
      },
      ""en"" : {
        ""value"" : ""United Kingdom""
      }
    },
    ""typeCode"" : 200,
    ""entityName"" : ""country"",
    ""id"" : 56296077566262224,
    ""new"" : false,
    ""links"" : [ ],
    ""content"" : [ ],
    ""links"" : [ {
      ""rel"" : ""self"",
      ""href"" : ""http://localhost:8111/storefront/rest/country/56296077566262224""
    }, {
      ""rel"" : ""regions"",
      ""href"" : ""http://localhost:8111/storefront/rest/country/56296077566262224/regions""
    } ]
  }, {
    ""pk"" : 56296077566294992,
...........
{code}

As you can see the {{content}} contains {{links}} twice - first time it is empty, and second time it is correct. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-10-31 14:05:56.279,45194,issuemaster(issuemaster),,"0|hzzz76:",10,44896,,,52 - Evans GA,53 - Evans SR1,54 - Fowler M1,55 - Evans SR2,56 - Fowler RC1,56 - Fowler GA,57 - Fowler Aftermath,58 - Gosling M1,59 - Evans / Fowler SR,Gosling RC1,Gosling GA,"10/Sep/14 5:22 AM;ptahchiev;The problem occurs only if you use this {{MediaType}}:
{code}
new MediaType(""application"", ""json"", Charset.forName(""UTF-8""))
{code}","31/Oct/14 2:05 PM;gregturn;I wrote a unit test that verifies this simply with application/json. I didn't need UTF-8 to reproduce it.","03/Nov/14 10:46 AM;gregturn;The following unit test shows the same issue:
{code}
@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration(classes = {JpaRepositoryConfig.class, DuplicateLinkListingTests.ClassicConfiguration.class,
		DuplicateLinkListingTests.Config.class })
public class DuplicateLinkListingTests {

	@Autowired WebApplicationContext context;
	@Autowired LinkDiscoverers discoverers;
	@Autowired PersonRepository personRepository;

	private static MediaType MEDIA_TYPE = MediaType.APPLICATION_JSON;

	protected WebTestUtils webTestUtils;
	protected MockMvc mvc;

	@Configuration
	static class Config {

		@Bean
		public LinkDiscoverer classicLinkDiscover() {
			return new JsonPathLinkDiscoverer(""$.links[?(@.rel == '%s')].href"",
					MEDIA_TYPE);
		}
	}

	@Configuration
	static class ClassicConfiguration extends RepositoryRestMvcConfiguration {

		@Override
		protected void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {
			config.setDefaultMediaType(MEDIA_TYPE).useHalAsDefaultJsonMediaType(false);
		}
	}

	@Before
	public void setUp() {

		mvc = MockMvcBuilders.webAppContextSetup(context).//
				defaultRequest(get(""/"")).build();
		webTestUtils = new WebTestUtils(mvc, discoverers);

		personRepository.save(new Person(""Frodo"", ""Baggins""));
	}

	@Test
	public void testBasics() throws Exception {

		Link peopleLink = webTestUtils.discoverUnique(""people"");
		ResultActions peopleActions = webTestUtils.follow(peopleLink);

		System.out.println(peopleActions.andReturn().getResponse().getContentAsString());
	}
}
{code}","10/Nov/14 8:08 AM;gregturn;so far, the code reproducing this failure can be found at https://github.com/spring-projects/spring-data-rest/tree/issue/DATAREST-363","21/May/15 2:37 AM;jayalss;In the snapshot build this week I've also seen two links with the same ""rel"" and ""href"" in the same ""links"" section. Not sure if this is related.","21/May/15 2:44 AM;olivergierke;Make sure you move away from the legacy representation format towards standard HAL which is not exposed to this bug.","21/May/15 3:03 AM;jayalss;How do I ""move away from the legacy representation format""? SDR generates the _links automatically and I don't know how to take control of that behavior.","21/May/15 3:08 AM;olivergierke;This issue is about the legacy media type (using {{links}} and {{content}}). So far, we haven't been able to reproduce this with the standard media type of HAL. Any chance you can provide a test case showing this also happens for HAL?","21/May/15 5:16 AM;jayalss;I just replicated the behavior, it's a little bit different from what's described in the jira, just wondering if it's related...

when I hit /api/scanners/search, the response in _links:
(response is with Content-Type: application/hal+json;charset=UTF-8)

""bypartnertype"" : [ {
      ""href"" : ""https://localhost:5199/api/scanners/search/bypartnertype{?partnerName,typeName,page,size,sort}"",
      ""templated"" : true
    }, {
      ""href"" : ""https://localhost:5199/api/scanners/search/bypartnertype{?partnerName,typeName,page,size,sort}"",
      ""templated"" : true
    } ]

I don't have a unit test, but my current project can easily expose this behavior. What's the best way to get this to you? Can I send you an invitation to my bitbucket repo, with directions on how to reproduce the behavior?","21/May/15 6:50 AM;ptahchiev;I can confirm on this - I saw it too last week, but I thought it was something to do with my setup.","27/Aug/15 2:01 PM;tsachev;Hi I hit this issue too. I am using 2.4.0.RC1.

I debuged the code and I think I found what is causing it for me.
{{PersistentEntityResource}} should hold _embeddeds_ in {{Iterable<EmbeddedWrapper>}} which is not {{Resources<EmbeddedWrapper>}}.
I guess, when _embeddeds_ is not an ArrayList, but Resources<EmbeddedWrapper> some additional serialization configuration kicks in (I have Jackson2HalModule installed).

I guess this was missed when fixing DATAREST-622 with [https://github.com/spring-projects/spring-data-rest/commit/1e9e3f5635f979fcccca02f1ff1f905f01f4bd80]
Hope this give you enough context to reproduce the issue, If you need more details let me know.

Following changes against 2.4.0.RC1 tag seems to fix the issue for me.
{code}
diff --git a/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/PersistentEntityResource.java b/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/PersistentEntity
index 2b73b0f..a9be3b7 100644
--- a/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/PersistentEntityResource.java
+++ b/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/PersistentEntityResource.java
@@ -42,8 +42,8 @@ public class PersistentEntityResource extends Resource<Object> {
        private final Iterable<EmbeddedWrapper> embeddeds;
 
        /**
-        * Creates a new {@link PersistentEntityResource} for the given {@link PersistentEntity}, content, embedded
-        * {@link Resources}, links and flag whether to render all associations.
+        * Creates a new {@link PersistentEntityResource} for the given {@link PersistentEntity}, content, links
+        * and embeddeds.
         * 
         * @param entity must not be {@literal null}.
         * @param content must not be {@literal null}.
@@ -110,7 +110,7 @@ public class PersistentEntityResource extends Resource<Object> {
                private final PersistentEntity<?, ?> entity;
                private final List<Link> links = new ArrayList<Link>();
 
-               private Resources<EmbeddedWrapper> embeddeds;
+               private Iterable<EmbeddedWrapper> embeddeds;
 
                /**
                 * Creates a new {@link Builder} instance for the given content and {@link PersistentEntity}.
@@ -135,7 +135,7 @@ public class PersistentEntityResource extends Resource<Object> {
                 */
                public Builder withEmbedded(Iterable<EmbeddedWrapper> resources) {
 
-                       this.embeddeds = resources == null ? null : new Resources<EmbeddedWrapper>(resources);
+                       this.embeddeds = resources;
                        return this;
                }
{code}","27/Aug/15 6:10 PM;gregturn;I have tried that patch, and it indeed filters out the double ""links"" entry. But in the test case I'm using to poke at it (JpaWebTests.createsOrdersUsingPut with HAL switched off), I still get an empty ""embedded"", which I'm not sure is correct.

{code}
MockHttpServletRequest:
         HTTP Method = PUT
         Request URI = /orders/4711
          Parameters = {}
             Headers = {Content-Type=[application/json], Accept=[application/json]}

             Handler:
                Type = org.springframework.data.rest.webmvc.RepositoryEntityController
              Method = public org.springframework.http.ResponseEntity<? extends org.springframework.hateoas.ResourceSupport> org.springframework.data.rest.webmvc.RepositoryEntityController.putItemResource(org.springframework.data.rest.webmvc.RootResourceInformation,org.springframework.data.rest.webmvc.PersistentEntityResource,java.io.Serializable,org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler,org.springframework.data.rest.webmvc.support.ETag,java.lang.String) throws org.springframework.web.HttpRequestMethodNotSupportedException

               Async:
       Async started = false
        Async result = null

  Resolved Exception:
                Type = null

        ModelAndView:
           View name = null
                View = null
               Model = null

            FlashMap:

MockHttpServletResponse:
              Status = 201
       Error message = null
             Headers = {Location=[http://localhost/orders/2], Content-Type=[application/json]}
        Content type = application/json
                Body = {
  ""lineItems"" : [ {
    ""name"" : ""Java Chip""
  }, {
    ""name"" : ""Chocolate Mocca ""
  } ],
  ""type"" : ""TAKE_AWAY"",
  ""price"" : 2.5,
  ""embedded"" : [ ],
  ""links"" : [ {
    ""rel"" : ""self"",
    ""href"" : ""http://localhost/orders/2""
  }, {
    ""rel"" : ""order"",
    ""href"" : ""http://localhost/orders/2{?projection}""
  }, {
    ""rel"" : ""creator"",
    ""href"" : ""http://localhost/orders/2/creator""
  } ]
}
       Forwarded URL = null
      Redirected URL = http://localhost/orders/2
             Cookies = []
{code}","27/Aug/15 6:14 PM;tsachev;I do not know if it is correct too. But at least it is valid json.","28/Aug/15 10:32 AM;olivergierke;Before talking about possible solutions here, I'd like to get a reproduceable test case build against the latest snapshots. The removal of the {{Resources}} wrapping basically simplifies things as the {{_embedded}} comes from {{PersistentEntityResource}} anyway and it's basically about a list of objects, so that the additional links that a {{Resources}} instance can carry are not needed and we can remove one level of indirection.

The original poster didn't use HAL in the first place so it seems we're slightly getting off-original-topic here. So, do you think we can get an example that renders duplicate links?","28/Aug/15 3:52 PM;gregturn;I have created an updated branch at https://github.com/spring-projects/spring-data-rest/tree/issue/DATAREST-363 using Spring Data dev protocols that reproduces the issue.

If I plug in the proposed solution:
{code}
--- a/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/PersistentEntityResource.java
+++ b/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/PersistentEntityResource.java
@@ -122,7 +122,7 @@ public class PersistentEntityResource extends Resource<Object> {
                private final PersistentEntity<?, ?> entity;
                private final List<Link> links = new ArrayList<Link>();
 
-               private Resources<EmbeddedWrapper> embeddeds;
+               private Iterable<EmbeddedWrapper> embeddeds;
 
                /**
                 * Creates a new {@link Builder} instance for the given content and {@link PersistentEntity}.
@@ -147,7 +147,8 @@ public class PersistentEntityResource extends Resource<Object> {
                 */
                public Builder withEmbedded(Iterable<EmbeddedWrapper> resources) {
 
-                       this.embeddeds = resources == null ? null : new Resources<EmbeddedWrapper>(resources);
+                       //this.embeddeds = resources == null ? null : new Resources<EmbeddedWrapper>(resources);
+                       this.embeddeds = resources;
                        return this;
                }
 {code}

It breaks a different test case with terrible results:

{code}
com.jayway.jsonpath.PathNotFoundException: Path '_embedded' not found in the current context:
{""firstName"":""Oliver August"",""lastName"":""Matthews"",""_links"":{""siblings"":{""href"":""\/people\/1\/siblings""},""father"":{""href"":""\/people\/1\/father""},""self"":{""href"":""\/people\/1""}},""embedded"":[{""rel"":""father"",""relTargetType"":""org.springframework.data.rest.webmvc.jpa.Person"",""value"":{""_links"":{""siblings"":{""href"":""http:\/\/localhost\/people\/1\/siblings""},""father"":{""href"":""http:\/\/localhost\/people\/1\/father""},""self"":{""href"":""http:\/\/localhost\/people\/1""}}},""collectionValue"":false}]}
	at com.jayway.jsonpath.internal.filter.FieldFilter.filter(FieldFilter.java:93)
	at com.jayway.jsonpath.JsonPath.read(JsonPath.java:255)
	at com.jayway.jsonpath.internal.JsonReader.read(JsonReader.java:103)
	at com.jayway.jsonpath.internal.JsonReader.read(JsonReader.java:97)
	at com.jayway.jsonpath.JsonPath.read(JsonPath.java:462)
	at org.springframework.data.rest.webmvc.json.PersistentEntitySerializationTests.serializesLinksForExcerpts(PersistentEntitySerializationTests.java:278)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:73)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:82)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:73)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:224)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:83)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:68)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:163)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)
{code}
","28/Aug/15 6:48 PM;tsachev;Wired.
I tried to tweak it a little and the {{org.springframework.data.rest.webmvc.json.PersistentEntitySerializationTests.serializesLinksForExcerpts}} now passes.
I changed the name of the getter here [https://github.com/spring-projects/spring-data-rest/blob/issue/DATAREST-363/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/json/PersistentEntityJackson2Module.java#L174-174] to {{getUnwrappedEmbedded}}.

I think it was interfering with the overridden {{getContent}} in {{ResourcesMixin}} (look at the name for xm {{embedded}} is the same as what jackson will assume for {{getEmbedded}}).

Jackson mix-in annotations FTW!","30/Aug/15 5:17 PM;olivergierke;This should be fixed now as we explicitly ignore the links attribute for the {{Resources}} instance that will eventually constitute the {{_embedded}} clause. Fixed in master and the bugfix branch for Fowler. Nightly build not yet available due to some CI issues but you could just build the project locally ({{mvn clean install}}). Feedback appreciated, as we're shooting for a Gosling GA release early next week.","31/Aug/15 9:48 AM;tsachev;With Gosling local build it works for me.
Thanks.","31/Aug/15 9:53 AM;olivergierke;That's awesome, thanks Vladimir! :)","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#705|https://github.com/spring-projects/spring-data-rest/issues/705]. ",,,,
Deleting a non-existing resource leads to NullPointerException in RepositoryEntityController,DATAREST-353,58763,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,jhiemer,jhiemer,11/Jul/14 3:15 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,16/Jul/14 8:49 AM,2.2 M1 (Evans),,,,2.1.2 (Dijkstra SR2),2.2 RC1 (Evans),,,Repositories,,,0,,,,,"When trying to access resources from Spring MVC (named custom DELETEs/PUTs above) like this:

DELETE 
http://172.16.56.1:8080/service/entity/removeBySubInstanceId?subInstanceId=ec81d9fc48f328052fc59e1c6a34ea2f

A NPE in AbstractRepositoryRestController is thrown.

{code:bash}
OGBACK:12:02:59.986 [tomcat-http--5] ERROR o.s.d.r.w.AbstractRepositoryRestController - null source
java.lang.IllegalArgumentException: null source
	at java.util.EventObject.<init>(EventObject.java:56) ~[na:1.7.0_45]
	at org.springframework.context.ApplicationEvent.<init>(ApplicationEvent.java:42) ~[spring-context-4.0.2.RELEASE.jar:4.0.2.RELEASE]
	at org.springframework.data.rest.core.event.RepositoryEvent.<init>(RepositoryEvent.java:15) ~[spring-data-rest-core-2.2.0.BUILD-SNAPSHOT.jar:na]
	at org.springframework.data.rest.core.event.BeforeDeleteEvent.<init>(BeforeDeleteEvent.java:13) ~[spring-data-rest-core-2.2.0.BUILD-SNAPSHOT.jar:na]
	at org.springframework.data.rest.webmvc.RepositoryEntityController.deleteItemResource(RepositoryEntityController.java:356) ~[spring-data-rest-webmvc-2.2.0.BUILD-SNAPSHOT.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_45]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_45]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_45]
	at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_45]
	at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:215) ~[spring-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132) ~[spring-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) ~[spring-webmvc-4.0.2.RELEASE.jar:4.0.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:749) ~[spring-webmvc-4.0.2.RELEASE.jar:4.0.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:690) ~[spring-webmvc-4.0.2.RELEASE.jar:4.0.2.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83) ~[spring-webmvc-4.0.2.RELEASE.jar:4.0.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:945) ~[spring-webmvc-4.0.2.RELEASE.jar:4.0.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:876) ~[spring-webmvc-4.0.2.RELEASE.jar:4.0.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961) [spring-webmvc-4.0.2.RELEASE.jar:4.0.2.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:885) [spring-webmvc-4.0.2.RELEASE.jar:4.0.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:653) [servlet-api.jar:na]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837) [spring-webmvc-4.0.2.RELEASE.jar:4.0.2.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) [servlet-api.jar:na]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) [catalina.jar:7.0.42.A]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [catalina.jar:7.0.42.A]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-3.2.0.RELEASE.jar:3.2.0.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118) [spring-security-web-3.2.0.RELEASE.jar:3.2.0.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) [spring-security-web-3.2.0.RELEASE.jar:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.2.0.RELEASE.jar:3.2.0.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) [spring-security-web-3.2.0.RELEASE.jar:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.2.0.RELEASE.jar:3.2.0.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) [spring-security-web-3.2.0.RELEASE.jar:3.2.0.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.2.0.RELEASE.jar:3.2.0.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154) [spring-security-web-3.2.0.RELEASE.jar:3.2.0.RELEASE]
{code}

Same behaviour applies for custom PUT operations afaik.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:51.404,44923,issuemaster(issuemaster),,"0|i00227:",335,44625,,,51 - Dijkstra SR2,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#735|https://github.com/spring-projects/spring-data-rest/issues/735]. ",,,,,,,,,,,,,,,,,,,,,,,
Href in links all prefixed with http:// while the Spring Data Rest is on an https:// website,DATAREST-347,58607,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Works as Designed,olivergierke,adelinor,adelinor,02/Jul/14 2:25 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,08/Jul/14 10:25 AM,2.0.1 (Codd SR1),2.1.1 (Dijkstra SR1),,,,,,,API Documentation,,,0,,,,,"I have been using Spring data rest successfully on a new project but noticed an issue while testing a release in a TEST environment. The web application which uses Spring Data REST is published on a secured website:

https://app.domain.com/project/api

Links nevertheless are all prefixed with http://
{code:javascript}
{
  ""_links"" : {
    ""examples"" : {
      ""href"" : ""http://app.domain.com/project/api/examples""
    }
}
{code}","Java SE 6, Weblogic application server 10.3.6 (servlet 2.5)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-07-03 00:00:42.829,44767,issuemaster(issuemaster),,"0|i07odr:",44822,44469,,,,,,,,,,,,,,"03/Jul/14 12:00 AM;olivergierke;Have you tried using a more recent version? The latest Codd version is SR3, The very latest release version is Dijkstra SR1 (2.1.1.RELEASE). Is there a proxy in place? Do you have {{X-Forwarded-*}} headers set?","03/Jul/14 8:09 AM;adelinor;Hi,

I upgraded the spring data rest version to 2.1.1.RELEASE . This took me a fair amount of time as some dependency assumes a Java 7 runtime. I explicitly added the dependency below to avoid the issue:
{code:xml}
		<dependency>
			<groupId>org.atteo</groupId>
			<artifactId>evo-inflector</artifactId>
			<version>1.0.1</version>
		</dependency>
{code}

After the upgrade the behaviour is the same: I still get http:// as a prefix in the generated links .

Yes there is a reverse proxy but I don't think this creates an issue. Within the same application, for a resource that I implemented with a simple Spring MVC controller, I retrieve the correct URL with the correct protocol (https) to set up the Location using the request.getRequestURL() method:

{code:Java}
	private ResponseEntity<String> saveAndRespond(MultipartFile file,
			HttpServletRequest request)
	throws IOException, URISyntaxException
	{
		HttpHeaders responseHeaders = new HttpHeaders();

		// ...

		//Set headers
		String path = request.getRequestURL() + ""/"" + c.getId();
		if (logger.isDebugEnabled()) {
			logger.debug(""Uploaded file "" + c + "" Location: "" + path);
		}
		responseHeaders.setLocation(new URI(path));
		responseHeaders.setContentType(MediaType.TEXT_HTML);

		return new ResponseEntity<String>(
				path, responseHeaders, HttpStatus.CREATED);
	}

{code}","03/Jul/14 9:40 AM;olivergierke;We do something similar basically by using Spring's {{ServletUriComponentsBuilder}} (from {{RepositoryLinkBuilder.prepareBuilder(…)}}) which takes the current request's scheme for create new links. However, it seems {{ServletUriComponentsBuilder}} is currently not considering {{X-Forwarded-Ssl}} headers. Is that what your proxy is setting maybe?

You might wanna debug into {{ServletUriComponentsBuilder.fromRequest(…)}} to see what headers are set and why the base URI is set up as it is. Also, make sure you don't accidentally have set an absolute baseUri in the configuration. That will trump the dynamic creation as well.","03/Jul/14 9:42 AM;olivergierke;Re: Java 6 compatibility. Unless you're using Spring Data Neo4j (which requires Java 7) you should be able to run fine on Java 6. According to the [changelog|https://github.com/atteo/evo-inflector#changes] of EvoInflector, the current 1.2 is java 6 compatible.","08/Jul/14 6:36 AM;adelinor;Re: Java 6 compatibility, _spring-data-rest-core_ dependency version _2.1.1.RELEASE_ brings the compile dependency on _evo-inflector_ version 1.1 . This particular release causes the application to crash when deployed to a app server running on java se 6. To resolve this properly, _spring-data-rest-core_ should then be updated to use version 1.2 instead.
 ","08/Jul/14 8:10 AM;olivergierke;I've filed and fixed DATAREST-351 for the Java 6 compatibility issue.","08/Jul/14 9:55 AM;adelinor;Thank you for pointing out the classes that build the URL links. I have checked the methods that provide the information and created a JSP file to display the corresponding values.

This shows that method getScheme() *returns indeed ""http""*.

Our reverse proxy setup is not setting up any of the X-Forwarded-Ssl headers. From my point of view this issue can be closed. ","08/Jul/14 10:25 AM;olivergierke;Do you know which X-Forwarded-Headers *are* set? It might be worth opening a ticket against core Spring to take the ones into account you set (assuming it are other ones in the X-Forwarded family).","28/Jul/14 9:01 AM;adelinor;The following headers are set:

{code}
X-Forwarded-Protocol=https
X-Forwarded-Ssl=on
X-Url-Scheme=https
{code}

I saw that the method _ServletUriComponentsBuilder.fromRequest_ was updated to take into account the _X-Forwarded-Proto_ header (see https://jira.spring.io/browse/SPR-11872). I am checking with our network team to see if we could use the X-Forwarded-Proto instead.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#729|https://github.com/spring-projects/spring-data-rest/issues/729]. ",,,,,,,,,,,,,,
ReflectionRepositoryInvoker doesn't apply conversion on invocation of an overridden delete(…) method,DATAREST-346,58593,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,02/Jul/14 4:17 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,08/Jul/14 5:06 AM,2.1.1 (Dijkstra SR1),,,,2.1.2 (Dijkstra SR2),2.2 M1 (Evans),,,Repositories,,,0,,,,,"If a repository redeclares a {{delete(…)}} method using the concrete identifier type the {{ReflectionRepositoryInvoker}} fails to invoke this method as it will get the raw id value handed into the {{invokeDelete(…)}} method.

This is a side effect of the fix for DATAREST-335 which added explicit handling for the overridden method with the concrete identifier type but assumed the parameter would be handed in the correct type already.",,,,,,,,,,,,,,,,,DATAREST-335,,,,,,,,,,,,,,,2020-12-31 10:29:50.59,44755,issuemaster(issuemaster),,"0|i07oav:",44809,44457,,,50 - Evans M1,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#728|https://github.com/spring-projects/spring-data-rest/issues/728]. ",,,,,,,,,,,,,,,,,,,,,,,
Nulling out fields doesn't work on PATCH requests,DATAREST-345,58592,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,george.migkos,george.migkos,02/Jul/14 4:11 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,08/Jul/14 7:31 AM,2.1 GA (Dijkstra),,,,2.2 M1 (Evans),,,,,,,0,,,,,"When sending via PATCH operation a json of the following format:
{""field"":null} in order to clear any previously entered value, the new value is ignored and the field is never updated to null.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-07-02 05:50:30.705,44754,issuemaster(issuemaster),,"0|i07obb:",44811,44456,,,50 - Evans M1,,,,,,,,,,,"02/Jul/14 5:50 AM;benneq;That's not an easy task. Reason:

Jackson maps your JSON to Java. And a Java value can be either null or not null. By default Jackson gives your field (in the POJO) the default value, if it's missing inside the JSON String.

This means: It doesn't matter if you set it to null within your JSON or just don't include it, the result is always field = null in your POJO. And the implication is: If Spring looks at your mapped POJO, it can't figure out, if the field was sent within the JSON String or not.

Maybe it's possible to use some kind of Wrapper within the POJO, like java.util.Optional. Then it would be possible to see if the Optional itself is null or the wrapped property is null.

But as you can see: This is basically a Jackson issue, not really related to Spring.

EDIT 1:
Here's some additional information: http://stackoverflow.com/questions/19551098/how-to-define-optional-json-field-using-jackson
If that's true, you could really do what I suggested above: Wrap it inside some simple wrapper like java.util.Optional.

I'll try to do that in a minute and then give feedback.


EDIT2:
{code}
public void run() throws JsonParseException, JsonMappingException, IOException {
	ObjectMapper om = new ObjectMapper();
	Entity e1 = om.readValue(""{}"", Entity.class);
	System.err.println(""{} -> "" + e1.field);
	Entity e2 = om.readValue(""{\""field\"":null}"", Entity.class);
	System.err.println(""{\""field\"":null} -> "" + e2.field);
	Entity e3 = om.readValue(""{\""field\"":\""value\""}"", Entity.class);
	System.err.println(""{\""field\"":\""value\""} -> "" + e3.field);
}
	
public class Entity {
	Optional<String> field;
	public String getField() { return field.get(); }
	public void setField(String field) { this.field = Optional.ofNullable(field); }
}
{code}

As you can see, I tried 3 different JSON Strings: 1. no field, 2. field = null, 3. field = value
The output is:
{code}
{} -> null
{""field"":null} -> Optional.empty
{""field"":""value""} -> Optional[value]
{code}
So, this works. But now you would have to modify Springs mapping stuff, in order to take care of those {{Optional}} fields. And after that, I think you'll have the next problem: Hibernate (or whatever mapper you use), doesn't have a clue what to do with those {{Optional}} wrappers.

EDIT 3:
There's also a corresponding Ticket on Jackson's Github page: https://github.com/FasterXML/jackson-databind/issues/494","02/Jul/14 7:28 AM;olivergierke;That's good observations, Benjamin. Jackson even has a slighly more comfortable way of achieving that. An {{ObjectMapper}} allows you to obtain a writer to update an existing object which actually behaves just like we need it (does not invoke setter if the field is not present at all, invokes it with {{null}} if the JSON value is {{null}}.

I previously shied away from trying that as it effectively means we somehow work around the standard {{HttpMesageConverter}} mechanics. The standard mechanism has no notion of updating an existing object. However, I gave this a quick spin and actually could get it to work. It needs a little polishing still but it looks like this can be a fix for this.","02/Jul/14 7:39 AM;george.migkos;Hi Benjamin, Oliver,

Thank you for your immediate responses. I can verify that using ObjectMapper' s readerForUpdating() method we can obtain an ObjectReader which can partially clear a null valued field (If the field is missing from the json, the old value will be left as is).
This is what I do for now although it is a quick and dirty approach since as far as I know only shallow copying is used.","02/Jul/14 7:44 AM;olivergierke;{quote}
This is what I do for now although it is a quick and dirty approach since as far as I know only shallow copying is used.
{quote}

Can you elaborate on that?","02/Jul/14 8:06 AM;george.migkos;After searching for a solution to the problem I ended up to http://stackoverflow.com/questions/9895041/merging-two-json-documents-using-jackson where I saw that deep copy is not yet supported. 
Although not mentioned in the post I believe that the relevant issue is https://github.com/FasterXML/jackson-databind/issues/160

The solution I currently adopted is to accept the json as a @RequestBody JsonNode payload parameter in RepositoryEntityController's patchItemResource() method.
After that it's easy to use the ObjectReader in order to update the existing domainObject according to the field's values in the JsonNode.","02/Jul/14 9:54 AM;benneq;That would be pretty awesome if this could work out-of-the box with Spring Data Rest!
","02/Jul/14 10:10 AM;olivergierke;I found [this comment|http://jira.codehaus.org/browse/JACKSON-679?focusedCommentId=279331&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-279331] in the discussion in the old Jackson JIRA. This sounds similar to what [~george.migkos] was suggesting as well. I quickly implemented a prototype and it indeed seems to fix the deep merging problem nicely. Going to add a few test cases and polish this up.","02/Jul/14 10:56 AM;benneq;Cool! :)
But it's a API breaking change, right? So we need some Trigger to activate it.","02/Jul/14 11:02 AM;olivergierke;Don't think so. Sending null fields with a PATCH request has never worked, so it's a bug that will be fixed.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#727|https://github.com/spring-projects/spring-data-rest/issues/727]. ",,,,,,,,,,,,,,
Non-persistent properties not rendered,DATAREST-340,58539,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,30/Jun/14 4:14 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,30/Jun/14 4:32 AM,2.1 GA (Dijkstra),,,,2.1.1 (Dijkstra SR1),2.2 M1 (Evans),,,,,,0,,,,,See the Boot issue for reference.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:49.839,44702,issuemaster(issuemaster),,"0|i07o3b:",44775,44404,https://github.com/spring-projects/spring-boot/issues/1190,,49 - Dijkstra SR1,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#722|https://github.com/spring-projects/spring-data-rest/issues/722]. ",,,,,,,,,,,,,,,,,,,,,,,
java.lang.IllegalStateException: Ambiguous handler methods mapped for HTTP,DATAREST-338,58527,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Blocker,Fixed,olivergierke,ptahchiev,ptahchiev,29/Jun/14 4:29 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,20/Jan/15 4:19 AM,,,,,,,,,,,,0,,,,,"So before I get to the point I have to explain my setup. I have a jar (called {{restservices.jar}}) which holds all my spring repositories and rest configuration. This jar is mapped under it's own web-config under {{/rest/}}
{code}
    /* Spring REST Delegating Dispatcher Servlet */
    Servlet restDispatcherServlet = new RepositoryRestDispatcherServlet(webCtx);
    ServletRegistration.Dynamic restDispatcherServletReg = servletContext.addServlet(""restDispatcherServlet"", restDispatcherServlet);
    restDispatcherServletReg.setLoadOnStartup(1);
    restDispatcherServletReg.addMapping(""/rest/*"");
{code}
I also have a webapplication in a war file (called storefront.war) and the user has the ability to include the {{restservices.jar}} in {{WEB-INF/lib}}. The storefront is mapped under {{/}}:
{code}
    final Servlet dispatcherServlet = new DispatcherServlet(webCtx);
    final ServletRegistration.Dynamic dispatcherServletReg = servletContext.addServlet(""dispatcherServlet"", dispatcherServlet);
    dispatcherServletReg.setInitParameter(""contextConfigLocation"", """");
    dispatcherServletReg.setLoadOnStartup(1);
    dispatcherServletReg.addMapping(""/"");
{code}

So far it all worked fine - user can open the {{/storefront}} and see the storefront and also open the {{/storefront/rest}} and use the rest. But because I'm building with the latest SNAPSHOT it all broke down yesterday. Now when the user opens the {{/storefront}} they see an exception: 
{code}
org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalStateException: Ambiguous handler methods mapped for HTTP
path 'http://localhost:8111/storefront/': {public java.lang.String com.xxxx.storefront.controllers.pages.HomePageController.home(org.springframework.ui.Model,java.lang
.String,javax.servlet.http.HttpServletRequest), public org.springframework.http.HttpEntity org.springframework.data.rest.webmvc.RepositoryController.listRepositories()}
at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:973)
at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:852)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:711)
at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1644)
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118)
at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84)
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113)
at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
...
{code}

And I believe it is because of this commit:
https://github.com/spring-projects/spring-data-rest/commit/e70285331c3270d88fe47a576c13bcae795763a8#diff-56747b96ce7be9e2c805687d47b49b54

Please confirm if it's a bug and fix it if it is :)
Thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-12-01 10:21:21.107,44690,issuemaster(issuemaster),,"0|i0001r:",9,44392,,,52 - Evans GA,53 - Evans SR1,54 - Fowler M1,55 - Evans SR2,,,,,,,,"01/Dec/14 10:21 AM;olivergierke;Petar, would you mind checking whether this is still an issue with Evans SR1 and Fowler M1? We moved away from type-level mappings as they inevitably cause Spring MVC picking up the controllers which we need to avoid. This should all be in place in the released versions.","16/Jan/15 2:54 AM;ptahchiev;No it has been fixed. Thank you :)","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#698|https://github.com/spring-projects/spring-data-rest/issues/698]. ",,,,,,,,,,,,,,,,,,,,,
"Overriding repositories delete method results in ""argument type mismatch"" exception",DATAREST-335,58466,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,benneq,benneq,25/Jun/14 8:59 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,27/Jun/14 8:10 AM,2.1 GA (Dijkstra),,,,2.1.1 (Dijkstra SR1),2.2 M1 (Evans),,,Repositories,,,0,,,,,"Hi,

I just tried to override the delete method in a repository and when I try to call the URL {{DELETE http://localhost:8080/webapp/xs/53ab96c930049cc029440d46}} Spring throws an exception within {{AbstractRepositoryRestController}} line 177.

*Stacktrace says:*
{quote}
2014-06-26 05:44:02,011 ERROR o.s.d.rest.webmvc.AbstractRepositoryRestController: 177 - argument type mismatch
java.lang.IllegalArgumentException: argument type mismatch
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) \~\[na:1.8.0_05\]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) \~\[na:1.8.0_05\]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) \~\[na:1.8.0_05\]
	at java.lang.reflect.Method.invoke(Method.java:483) \~\[na:1.8.0_05\]
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:196) \~\[ReflectionUtils.class:4.0.5.RELEASE\]
	at org.springframework.data.rest.core.invoke.ReflectionRepositoryInvoker.invoke(ReflectionRepositoryInvoker.java:277) \~\[ReflectionRepositoryInvoker.class:na\]
	at org.springframework.data.rest.core.invoke.ReflectionRepositoryInvoker.invokeDelete(ReflectionRepositoryInvoker.java:210) \~\[ReflectionRepositoryInvoker.class:na\]
...
{quote}


*My code ist fairly simple:*

{code:java}
@Document(collection=""x"")
public class X implements Identifiable<ObjectId> {
	@Id ObjectId id;
	public ObjectId getId() { return id; };
	
	String x;
	public String getX() { return x; }
	public void setX(String x) { this.x = x; }
}

@RepositoryRestResource(
		path=""xs"",
		collectionResourceDescription=@Description(""Xs""),
		collectionResourceRel=""xs"",
		itemResourceDescription=@Description(""X""),
		itemResourceRel=""x""
		)
public interface XRepo extends MongoRepository<X, ObjectId>, XRepoCustom {}

public interface XRepoCustom {
	void delete(ObjectId id);
}

public class XRepoImpl implements XRepoCustom {
	@Override
	public void delete(ObjectId id) {
		System.out.println(""WORKS"");
	}	
}
{code}

I tried to find the underlying reason using the debugger, but after a few steps the code only consists of reflection method calling and I couldn't figure out what really happens underneath.


*EDIT:*
I now tried the same thing with the {{Page<X> findAll(Pageable pageable)}} method. And it works. So it must have something to do with the delete method, I think.","Java 1.8.0_05
Spring 4.0.5
Spring Data Rest Webmvc 2.1.0
Spring Hateoas 0.13.0
Spring Data MongoDB 1.5.0
Mongo Java driver 2.12.2",,,,,,,,,,,,,,,,,,,,,DATAREST-346,,,,,,,,,,2014-06-27 08:10:17.67,44629,issuemaster(issuemaster),,"0|i07nvr:",44741,44331,,,49 - Dijkstra SR1,,,,,,,,,,,"27/Jun/14 8:10 AM;olivergierke;That should be fixed in master and the bugfix branch. Feel free to give the snapshots a spin.","30/Jun/14 1:26 PM;benneq;The error still exists!

Today I've updated to:
Commons 1.8.1
MongoDB 1.6.1
REST 2.1.1
Hateoas 0.14.0

I saw that you've changed the implementation a bit. Now I had to implement {{void delete(Iterable<? extends X> entities);}} in order to make the {{DELETE}} method available via HTTP. (before the update it was {{void delete(ObjectId id);}})

So here's my current code:
{code}
public interface AssetRepo extends Repository<Asset, ObjectId>, AssetRepoCustom {}

public interface AssetRepoCustom {
	void delete(Iterable<? extends Asset> entities);
}

public class AssetRepoImpl implements AssetRepoCustom {
	@Override
	public void delete(Iterable<? extends Asset> entities) {
		System.err.println(""WORKS?!"");
	}
}
{code}

As before, I get:
{code}
java.lang.IllegalArgumentException: argument type mismatch
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_05]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_05]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_05]
	at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0_05]
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:196) ~[ReflectionUtils.class:4.0.5.RELEASE]
	at org.springframework.data.rest.core.invoke.ReflectionRepositoryInvoker.invoke(ReflectionRepositoryInvoker.java:282) ~[ReflectionRepositoryInvoker.class:na]
	at org.springframework.data.rest.core.invoke.ReflectionRepositoryInvoker.invokeDelete(ReflectionRepositoryInvoker.java:213) ~[ReflectionRepositoryInvoker.class:na]
	at org.springframework.data.rest.webmvc.RepositoryEntityController.deleteItemResource(RepositoryEntityController.java:330) ~[RepositoryEntityController.class:na]
{code}

While debugging I saw that the exception gets thrown at {{ReflectionUtils.invokeMethod}} (line 194). Arguments are:
Method method = {{public abstract void AssetRepoCustom.delete(java.lang.Iterable)}}
Object target = Proxy -> {{AssetRepoImpl@112366e5}}
Object... args = de.benneq.resttest.asset.Asset

I don't know how this Reflection stuff works, but to me it looks like its trying to call {{AssetRepoImpl.delete(asset)}}, but it _should_ call {{AssetRepoImpl.delete(Collections.singleton(asset))}}.","30/Jun/14 1:40 PM;benneq;Even if I put all 4 delete methods in {{AssetRepoCustom}} and {{AssetRepoImpl}} it always tries to call {{delete(java.lang.Iterable)}}.","30/Jun/14 3:41 PM;olivergierke;The delete methods are used in the folloing parameter order: concrete id type, {{Serializable}}, {{Iterable}}. So I wonder what made you switching to the {{Iterable}} version in the first place?

You can give this a quick try:

{code:java}
RepositoryMetadata metadata = new DefaultRepositoryMetadata(AssetRepo.class);
CrudMethods methods = new DefaultCrudMethods(metadata);
Method method = methods.getDeleteMethod();
{code}

If you inspect this one, the method's parameter type should match your {{AssetRepo}} setup.","30/Jun/14 4:26 PM;benneq;{{DefaultCrudMethods}} is package protected, so I just copy&pasted the whole code into my own DefaultCrudMethods class.

When I execute your given code, the Debugger tells me:
method = {{public abstract void AssetRepoCustom.delete(java.lang.Iterable)}}

Maybe it's because my repository doesn't extend {{CrudRepository}}? I only extend {{Repository<Asset, ObjectId>}}.


Test:
{code}
public interface AssetRepo extends CrudRepository<Asset, ObjectId> {}
{code}
Now your given code works, and I get:
method = {{public abstract void CrudRepository.delete(java.io.Serializable)}}

_But_: Now of course my custom implementation won't get used and I have a lot of methods inside my repo, that I don't want to have.","30/Jun/14 5:44 PM;benneq;Grrr... I had a mistake inside my code :(
Now your code snippet gives me: {{public abstract void AssetRepoCustom.delete(org.bson.types.ObjectId)}}

But I still get the error. I've chased it down a bit:
{{RepositoryEntityController.deleteItemResource(...)}} line 321-333
The debugger tells me, that {{id}} is a String!! It should of course be an ObjectId.

Then it tries to call {{invoker.invokeDelete(id)}} which points to {{AssetRepoCustom.delete(ObjectId}} and this of course fails.

Now the question is, why does {{RepositoryEntityController}} give a String instead of an ObjectId?","02/Jul/14 4:18 AM;olivergierke;See DATAREST-346 for further progress on that one.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#718|https://github.com/spring-projects/spring-data-rest/issues/718]. ",,,,,,,,,,,,,,,,
Improvements in ResourceProcessorHandlerMethodReturnValueHandler,DATAREST-331,58438,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,24/Jun/14 10:16 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,24/Jun/14 10:44 AM,2.1 GA (Dijkstra),,,,2.1.1 (Dijkstra SR1),2.2 M1 (Evans),,,,,,0,,,,,{{ResourceProcessorHandlerMethodReturnValueHandler}} currently doesn't invoke {{ResourceProcessor}} instances that are typed to {{Resources}} if the value returned from the controller is a subtype of {{Resources}} (e.g. {{PagedResources}}).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:48.783,44601,issuemaster(issuemaster),,"0|i07nhr:",44678,44303,,,49 - Dijkstra SR1,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#714|https://github.com/spring-projects/spring-data-rest/issues/714]. ",,,,,,,,,,,,,,,,,,,,,,,
RepositoryRestMvcConfiguration causes eager initialization of beans,DATAREST-329,58424,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,24/Jun/14 5:29 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,24/Jun/14 6:41 AM,2.1 GA (Dijkstra),,,,2.1.1 (Dijkstra SR1),2.2 M1 (Evans),,,,,,0,,,,,"{{RepositoryRestMvcConfiguration}} declares a bean of type {{AnnotatedHandlerBeanPostProcessor}} which is a {{BeanPostProcessor}} and thus will get initialized very early in the container lifecycle. This however means that the configuration class will be populated and thus trigger the creation of all beans that need to be autowired into the container.

We should make the bean definition method static as it doesn't actually require any dependencies be present in the first place.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:48.617,44587,issuemaster(issuemaster),,"0|i07nhb:",44676,44289,,,49 - Dijkstra SR1,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#712|https://github.com/spring-projects/spring-data-rest/issues/712]. ",,,,,,,,,,,,,,,,,,,,,,,
Serialization errors if type contains only renamed properties,DATAREST-328,58348,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,ncantelmo,ncantelmo,19/Jun/14 8:00 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,27/Jun/14 9:51 AM,,,,,2.1.1 (Dijkstra SR1),2.2 M1 (Evans),,,,,,0,,,,,"Adding @EnableMongoAuditing to an application configuration causes a few different problems related to (but probably not caused by) Jackson serialization.  These issues can be reproduced by (1) starting an application with @EnableMongoAuditing, (2) POSTing certain types of entities to a RepositoryRestResource, and (3) attempting to GET from the same repository.  

Please refer to the referenced URL for a working example based on the mongodb-data-rest getting-started sample.  Also note the comment with sample command-line input at: https://github.com/ncantelmo/gs-accessing-mongodb-data-rest/commit/988626629a1ef708b5a3d44c4bd8b2874662747f#commitcomment-6740135

Additional notes:
- This issue was initially identified in an application that implemented AuditorAware.  The inclusion of an AuditorAware bean appears to make no difference on the described behavior.
- The following sequence of events will *NOT* reveal the issue: (1) POST a new document to some repository X, (2) Restart the application, (3), GET from repository X, (4) POST another document with the same fields to repository X, (5) GET from repository X.
- In other words, if you GET from a populated repository before you POST, the serialization routines will work properly.
- In the referenced example, removing the @JsonProperty(""brand_name"") annotation in PetFood.java will prevent serialization from causing a crash.
- In root-level entities or immediate nested children, custom @JsonProperty annotations will cause the annotated properties to not be fetched during a GET after an initial POST, but won't cause a crash.
",Java 1.7 or 1.8 with MongoDB running.,,,,,,,,,,,,,,,DATAREST-320,,,,,,,,,,,,,,,,2014-06-27 09:48:27.923,44511,issuemaster(issuemaster),,"0|i07n07:",44599,44213,https://github.com/ncantelmo/gs-accessing-mongodb-data-rest,,49 - Dijkstra SR1,,,,,,,,,,,"27/Jun/14 9:48 AM;olivergierke;Turns out this was unrelated to {{@EnableMongoAuditing}}. Our serialization customizations were trying to find properties by their JSON names. You {{PetFood}} only has renamed fields, so that not a single property could be found which made Jackson complain that it's got nothing to serialize.

Should be fixed in master and the bugfix branch. Feel free to give the snapshots a try.","01/Jul/14 10:42 AM;ncantelmo;I just tested it out with the release version and it's working as expected now.  Thanks!","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#693|https://github.com/spring-projects/spring-data-rest/issues/693]. ",,,,,,,,,,,,,,,,,,,,,
Collection references are removed on PUT and PATCH if defaulted to empty collections,DATAREST-327,58346,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,loesak,loesak,19/Jun/14 2:16 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,20/Jun/14 5:08 AM,2.1 GA (Dijkstra),,,,2.1.1 (Dijkstra SR1),2.2 M1 (Evans),,,,,,0,,,,,"Whenever a PUT or PATCH is performed, the DomainObjectMerger erases the objects references/associations if not null on the ""from"" object. In our case of one-to-many, we initialize those variable to empty arrays so they are never null unless explicitly set so. I'm curious as to why the DomainObjectMerger even would attempt to merge associations? Is it possible to send associations in the same payload as the aggregate root object? If so, then i could see why it would do so, but if not, then what is the point?

Work around for now is to not default association values to empty collections.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-06-19 14:29:47.644,44509,issuemaster(issuemaster),,"0|i07n0f:",44600,44211,,,49 - Dijkstra SR1,,,,,,,,,,,"19/Jun/14 2:29 PM;olivergierke;Generally speaking, PUT requires the state of the resource be transmitted entirely. So while patch effectively only sets the data submitted, PUT is more strict by setting everything not submitted to {{null}}. Without this behavior, we'd implement PUT invalidly and also pretty much prevent the client from setting something to {{null}} at all.

Associations are a special beast as they can be linked (if the association target is a managed resource as well) or inlined (if the target resource is not managed). {{DomainObjectMerger}} only sets the association value if it is submitted (see the {{doWithAssociations(…)}} call in {{merge(…)}}). This allows aggregates to be created with associations set in one call (by providing URIs as values to the association properties), which is needed if the association is a non-optional one.

Generally speaking, would you mind to be more specific about what's not working as you expect it to work when filing bugs? Please share some code, document the interaction with the server, the (invalid) responses and what you would've expected to see. Test cases are highly appreciated. Simply stating ""X doesn't work"" makes it hard to judge the case, especially if you don't back this statement with proof.","19/Jun/14 3:28 PM;loesak;If you can send in a payload with the URI aggregates, can you provide an example JSON showing how that is done, both in a one-to-one and one-to-many scenarios?

Regarding examples, sure:

Given the following Domain classes and assuming they have associated Repositories:

{code:title=Farm.java|borderStyle=solid}
public class Farm {
    @Id
    private String id;
	
	private String name;

    @Reference
    @DBRef
    private List<Animal> animals = new ArrayList<Animal>();

    // ... getters and setters
}
{code}

{code:title=Animal.java|borderStyle=solid}
public class Animal {
    @Id
    private String id;

    private String type; // cow, pig, horse

    // ... getters and setters
}
{code}

and i have an existing Farm:

{code:title=GET http://localhost:8080/farms/1|borderStyle=solid}
{
  ""name"" : ""Old Macdonalds Farm"",
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/farms/1""
    },
    ""animals"" : {
      ""href"" : ""http://localhost:8080/farms/1/animals""
    }
  }
}
{code}

which has animals:

{code:title=GET http://localhost:8080/farms/1/animals|borderStyle=solid}
{
  ""_embedded"" : {
    ""animals"" : [ {
      ""type"" : ""Horse"",
      ""_links"" : {
        ""self"" : {
          ""href"" : ""http://localhost:8080/animals/2""
        }
      }
    }, {
      ""type"" : ""Cow"",
      ""_links"" : {
        ""self"" : {
          ""href"" : ""http://localhost:8080/animals/3""
        }
      }
    }, {
      ""type"" : ""Pig"",
      ""_links"" : {
        ""self"" : {
          ""href"" : ""http://localhost:8080/animals/4""
        }
      }
    } ]
  }
}
{code}

then when i call PUT or PATCH on my farm entity:

{code:title=PATCH http://localhost:8080/farms/1/animals|borderStyle=solid}
{
  ""name"" : ""Old MacDonald's Farm""
}
{code}

the references will be erased because the serializer will create a Farm instance where the value of ""animals"" is an empty collection. Then when merging that object form the payload, with the object fected from the database, it will assign the empty ArrayList from the HTTP payload to the instance fetched from the database and save it. Meaning when we get our Farm back from the API, we get:

{code:title=GET http://localhost:8080/farms/1|borderStyle=solid}
{
  ""name"" : ""Old MacDonald's Farm"",
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/farms/1""
    },
    ""animals"" : {
      ""href"" : ""http://localhost:8080/farms/1/animals""
    }
  }
}
{code}

then fetching the farms associated animals:

{code:title=GET http://localhost:8080/farms/1/animals|borderStyle=solid}
{ }
{code}

This was not the expected behavior to us. This may be all because we're assigning a default value on a Reference

{code:borderStyle=solid}
private List<Animal> animals = new ArrayList<Animal>();
{code}

could become:

{code:borderStyle=solid}
private List<Animal> animals;
{code}

and the solution is we need to default it to null and perform null checking everywhere. Or we create our own DomainObjectMerger (which probably should have an interface for bean resolution as not needing to extend existing) that skips the merging of associations. The thing is that the merging of associations is new behavior in 2.1.","20/Jun/14 1:36 AM;olivergierke;Thanks Aaron, that makes a whole lot of sense. Or none at all to be precise :). Submitting associations on POST and PUT requests works as follows:

{code:javascript}
{ ""name"" : ""My cool farm"",
  ""animals"" : [
    ""http://localhost:8080/animals/1"",
    ""http://localhost:8080/animals/2""
  ]
}
{code}

For collection associations you provide a collection, for single references simply submit the URI of the resource you want to connect as String value (without the array wrapper). As indicated above, this is in place to allow to create resources that have non-optional relationships to other resources.

So what we're suffering from is that of course Jackson creates a default instance of the type you provide and then binds all values to it with the downside that after that process we cannot differentiate between a default value and a submitted one anymore. However I think in the use case we want to support, submitting an empty collection doesn't make any sense at all, so that I think I'll just go ahead and add the additional guard to {{DomainObjectMerger}}. I thought about a more drastic change to all of that by switching to letting Jackson bind to the object already existing (see [this StackOverflow question|http://stackoverflow.com/questions/12518618/deserialize-json-into-existing-object-java]) but that would have quite some implications on the general request handling.","20/Jun/14 5:08 AM;olivergierke;That should be fixed in master and the bugfix branch.","20/Jun/14 9:36 AM;loesak;If you can set references in the same call, then i think passing in an empty array is a valid scenario. I think the fix here is either:

a) document that default values should not be given on domain objects and null checking is required everywhere (which kind of goes against common coding norms).

b) dont parse the incoming payload into a domain object but a map, then have the merger use that when merging instead. This gives you the benefit of knowing what was explicitly set in the incoming request and having the value provided, as well as what was explicitly not set. This covers my case, the case where someone is explicitly setting a value to null, and potentially many other cases.","20/Jun/14 10:03 AM;olivergierke;I think it's slightly different: the feature was introduced to allow to *create* instances that have non-optional associations. Once the resource is in place, there's a dedicated sub-resource (i.e. {{/farm/4711/animals}}) to manage those associations. If that association is non-optional in the first place, it also doesn't make a whole lot of sense to pass an empty array even for updates. In other words: *if* the association property is set in the first place, it needs to have a non-{{null}}, non-empty value, otherwise you just could've omitted it.

Marshalling to a {{Map}} unfortunately is a non-option as well as the type might have custom serializers applied to individual properties which would create invalid unmarshal results.

That advanced discussion aside, do you see the erroneous behavior fixed with the latest snapshots?","30/Jun/14 2:44 PM;loesak;Regarding verifying the fix, I haven't had time. Deadline for our application is quicking approaching and focusing on that. When my schedule loosens up, I can verify the fix.

In the meantime, I still think parsing the incoming payload into its matching domain object before merging is problematic. Take this case that I just ran into:

Given an existing farm: 

{code:title=GET http://localhost:8080/farms/1}
{
  ""name"" : ""Old Macdonalds Farm"",
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/farms/1""
    },
    ""animals"" : {
      ""href"" : ""http://localhost:8080/farms/1/animals""
    }
  }
}
{code}

If i were to perform a PATCH where i would want to empty out our farms name:

{code:title=PATCH http://localhost:8080/farms/1}
{
  ""name"" : null
}
{code}

this change will not get applied due to the null checking in DomainObjectMerger:

{code:title=response from PATCH}
{
  ""name"" : ""Old Macdonalds Farm"",
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/farms/1""
    },
    ""animals"" : {
      ""href"" : ""http://localhost:8080/farms/1/animals""
    }
  }
}
{code}

To me this is wrong because i've made an explicit decision to null out a value and it will not be applied.","30/Jun/14 2:48 PM;loesak;Since this issue is closed, created a new one for this last mentioned scenario.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#709|https://github.com/spring-projects/spring-data-rest/issues/709]. ",,,,,,,,,,,,,,,
ReflectionRepositoryInvoker fails to invoke non-public methods,DATAREST-325,58339,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,19/Jun/14 8:58 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,20/Jun/14 2:52 AM,2.0.3 (Codd SR3),2.1 GA (Dijkstra),,,2.1.1 (Dijkstra SR1),2.2 M1 (Evans),,,Repositories,,,0,,,,,"Assume the following repository:

{code:java}
@RepositoryRestResource
interface AuthorRepository extends Repository<Author, Long> {

	List<Author> findByFirstnameContaining(String name);
}
{code}

This repo is package scope but still exported, due to its  {{@RepositoryRestResource}} annotation. Trying to invoke the finder will cause an exception in {{ReflectionRepositoryInvoker.invoke(…)}} as the method is not accessible.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:48.148,44502,issuemaster(issuemaster),,"0|i07mzz:",44598,44204,,,49 - Dijkstra SR1,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#704|https://github.com/spring-projects/spring-data-rest/issues/704]. ",,,,,,,,,,,,,,,,,,,,,,,
Fields with @JsonProperty are ignored on serialization,DATAREST-320,58262,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,runarb,runarb,13/Jun/14 5:04 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,27/Jun/14 9:53 AM,2.1 GA (Dijkstra),,,,2.1.1 (Dijkstra SR1),2.2 M1 (Evans),,,,,,1,jackson,json,serialization,,"Field annotated with {{@JsonProperty}} are left out from the serialization. This also means that it is not possible to alter the json property name. 

The problem seems to be caused by {code}PersistentEntityJackson2Module.updateBuilder(..){code} on line #219, where the property is attempted looked up by the name from the {{@JsonProperty}}, instead of the ""real"" property name. One way I think this can be solved is to add an inner loop to find the internal name from {{beanDesc.findProperties()}}.

Example:
{code:java}
@Entity
public class Description {    
    private String heading;
    @JsonProperty(""body"")
    private String content;
    ...
}
{code}
On serialization, everything looks fine from Jackson's perspective, but when the {{updateBuilder()}} hook on {{PersistentEntityJackson2Module}} is called the {{content}} property is omitted because the name of the field is different from the {{@JsonProperty}}.

I haven't sent a pull request, since I haven't enlisted in the contributor program, but hopefully you can cherry pick or look at the commit on my fork.

This problem was also described in DATAREST-117 and the corresponding pull request that was never merged: https://github.com/spring-projects/spring-data-rest/pull/136.",,,,,,,,,,,,DATAREST-328,,,,,,,,,,,,,,,,,,,,2014-06-27 09:53:28.5,44425,issuemaster(issuemaster),,"0|i07mm7:",44536,44127,https://github.com/runarb/spring-data-rest/commit/c008b864eda3ed3b4f4c882f9a62f1540c20a08e,,,,,,,,,,,,,"27/Jun/14 9:53 AM;olivergierke;Good catch, I stumbled over this again while trying to fix DATAREST-328. Should be fixed in master and the bugfix branch. Feel free to give the snapshots a try.","27/Jun/14 10:46 AM;runarb;Just had to get old Maven references cleared away. Works like a charm! Thanks a lot.","27/Jun/14 10:49 AM;olivergierke;Thanks for validating! :)","14/Apr/15 10:56 PM;richardliu;Hi, 
I found that Spring Boot Fields with @JsonProperty are still ignored on serialization Bug. 
I create a minimal demo project reproduce the bug(?) in Spring Boot 1.2.3.RELEASE. 

Shortcut: https://github.com/cdcorg/JsonPropertyBug/blob/master/src/main/java/demothree/domain/Entity.java#L21
Enable @JsonProperty will make it impossible to alter the property(by using HTTP PUT)

Can anyone confirm on this?
Without Spring Boot: the bug has been fixed.

Any help is highly appreciated!","15/Apr/15 3:47 PM;ww4;+1 for associations, per DATAREST-87.

For simple properties (strings, ints and such), @JsonIgnore is working for me.
","15/Apr/15 3:49 PM;ww4;Please disregard/delete my comment above. I was talking about @JsonIgnore not @JsonProperty.","17/Apr/15 12:33 AM;richardliu;Stack Overflow question link:
http://stackoverflow.com/questions/29692942/fields-with-jsonproperty-are-still-ignored-on-serialization-in-spring-boot-sp","22/Apr/15 6:01 PM;danielfariati;I'm having the same problem as Richard Liu:
Using Spring Boot + Spring Data, it is not working properly.","28/Apr/15 9:14 PM;richardliu;A very strange solution:

After I switch back to Spring Data Rest 2.2.1 (contained in Spring Boot 1.2.1.RELEASE), HTTP PUT now works properly. You can verify this by changing my bug demo project's POM file.

Now I got confused:
Why didn't I reproduce the same bug by using Spring Data Rest 2.2.1 as Runar Botten did?
Why do I encounter the bug by using the latter versions(2.2.2) which are supposed to fix that??","10/May/15 1:29 PM;olivergierke;I am not sure I get the connection to this ticket. The referenced StackOverflow ticket is about *de*serialization. This one here is about serialization.

As this ticket is marked as closed against a released version, please create a new ticket with a detailed problem description and potentially a minimal test case, showing the broken behavior.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#701|https://github.com/spring-projects/spring-data-rest/issues/701]. ",,,,,,,,,,,,,
Add means to prefer deleting by object instead of deleting by id,DATAREST-319,58214,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,imduffy15,imduffy15,12/Jun/14 7:36 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,15/Jul/14 1:42 AM,2.1 GA (Dijkstra),,,,2.2 RC1 (Evans),,,,,,,0,,,,,From the REST interface to the Repository you cannot force preference for using the {{void delete(T t)}} method over {{void delete(ID id)}} method. As a result we cannot do {{@PreAuthorize}} filters on delete based of object values. A use case for this would be to set security constraints.,Non environment specific.,,,,,,,,,,DATACMNS-539,,,,,,,,,,,,,,,,,,,,,2014-07-15 01:42:32.392,44377,issuemaster(issuemaster),,"0|i07mdj:",44497,44079,,,,,,,,,,,,,,"15/Jul/14 1:42 AM;olivergierke;This should be resolved by fixing DATACMNS-539 transitively. Feel free to give the snapshots a try.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#700|https://github.com/spring-projects/spring-data-rest/issues/700]. ",,,,,,,,,,,,,,,,,,,,,,
UriStringDeserializer should guard against URI templates submitted,DATAREST-316,58179,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,10/Jun/14 7:47 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,12/Jun/14 3:46 AM,2.0.2 (Codd SR2),2.1 GA (Dijkstra),,,2.0.3 (Codd SR3),2.1.1 (Dijkstra SR1),2.2 M1 (Evans),,,,,0,,,,,"Currently {{UriStringDeserializer}} uses the raw {{String}} provided for the value and tries to create a {{URI}} instance from it. In case the client accidentally submits a URI tempalte, this will fail.

The {{UriStringDeserializer}} should defensively expand the given value to make sure optional template variables are stripped.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:47.228,44342,issuemaster(issuemaster),,"0|i07m7j:",44470,44044,,,48 - Dijkstra GA,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#696|https://github.com/spring-projects/spring-data-rest/issues/696]. ",,,,,,,,,,,,,,,,,,,,,,,
executeSearchCompact - Mismatch argument name and path variable name,DATAREST-311,58028,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,rbouleau,rbouleau,30/May/14 5:40 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,02/Jun/14 3:07 AM,2.0.2 (Codd SR2),,,,2.0.3 (Codd SR3),2.1.1 (Dijkstra SR1),2.2 M1 (Evans),,Repositories,,,0,,,,,"In the RepositorySearchController class, the method executeSearchCompact does not take the right argument.

This case happens when the Accept values in the Request Header contains application/*+json

If you use the browser, no issue can be detected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-05-30 09:09:21.595,44192,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/139,"0|i07l4f:",44294,43894,,,48 - Dijkstra GA,,,,,,,,,,,"30/May/14 9:09 AM;gregturn;Looks good! 

@Rodrigue, is it possible for you to write a test case that exposes this bug and then would turn green with your patch?","30/May/14 12:10 PM;rbouleau;I create an Web Integration test in JpaWebTests.

But when I wrote this test, I have another issue about the Resource class (from Spring HATEOS). In the version 2.0.x of Spring Data Rest, the version 0.9.0 of HATEOS was used. In the snapshot version, the version 0.12.0 is used and the Resource class changes between these versions. 
The constructor of this class does not accept a collection now. So I have modified again the RepositorySearchController. 

During this investigation, I found another file which uses a Resource with an empty collection. see RepositoryPropertyReferenceController.followPropertyReferenceCompact(...). I don't modify this file because it is not in relation with this issue. 

If you want, I can create a new issue and fix it. 

","30/May/14 12:36 PM;gregturn;That sounds great! I'll look into your updated branch. And I would certainly appreciate the other fix as well if you have time.","30/May/14 12:45 PM;gregturn;I just tested your branch, and it looks good. I also see you coded it against last master branch.","30/May/14 12:45 PM;gregturn;Have you signed the Spring CLA?","31/May/14 5:11 AM;rbouleau;For the other fix, I will have time tomorrow, so I will create the JIRA issue and the patch (source code + unit test for the master branch)

I have signed the Spring CLA (few minutes ago)
","02/Jun/14 3:07 AM;olivergierke;Thanks Rodrigue! I've slightly altered your test case to make it more hypermedia driven and also reverted the change in {{ControllerUtils}} as it can be reasonable to use the stronger generic type going forward. Merged the changes back into the 2.0 and 2.1 bugfix branches.

Would you mind commenting the CLA registration confirmation number to the pull request you submitted?","02/Jun/14 4:00 AM;rbouleau;Ok for the changes you've done and for the confirmation number.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#689|https://github.com/spring-projects/spring-data-rest/issues/689]. ",,,,,,,,,,,,,,,
Root mapping not discovered on Tomcat,DATAREST-307,57861,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,20/May/14 4:31 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,20/May/14 4:41 AM,2.1 RC1 (Dijkstra),,,,2.1 GA (Dijkstra),,,,,,,0,,,,,In case the URI handling returns an empty String (e.g. on requests to the root mapping) the subsequent lookup of the handler method fails to discover the {{RepositoryController}} on Tomcat.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:46.298,44024,issuemaster(issuemaster),,"0|i07kgn:",44187,43726,,,48 - Dijkstra GA,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#686|https://github.com/spring-projects/spring-data-rest/issues/686]. ",,,,,,,,,,,,,,,,,,,,,,,
Illegal character '{' in URL when using projection and PUT request,DATAREST-301,57615,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,landrain,landrain,06/May/14 1:58 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,06/May/14 3:24 AM,2.1 RC1 (Dijkstra),,,,2.0.3 (Codd SR3),2.1 GA (Dijkstra),,,,,,0,,,,,"We are calling URL http://localhost:8080/rapnot/companies/4 with {{PUT}} method in order to update data.
In the logs, we see this error: 

{noformat}
2014-05-06 10:54:45,688 ERROR [org.springframework.data.rest.webmvc.AbstractRepositoryRestController] Illegal character in path at index 40: http://localhost:8080/rapnot/companies/4{?projection}
{noformat}

The {{\{?projection\}}} has been added to the URL and we get an invalid URL.

The issue seems to be located in this part of the code in {{org.springframework.data.rest.webmvc.RepositoryEntityController}}:

{code:java}
private ResponseEntity<ResourceSupport> mergeAndReturn(Object incoming, Object domainObject,
	RepositoryInvoker invoker, HttpMethod httpMethod, PersistentEntityResourceAssembler assembler) {

	…

	if (PUT.equals(httpMethod)) {
		headers.setLocation(URI.create(assembler.getSelfLinkFor(obj).getHref()));
	}
	…
}
{code}

At least, this is where the {{\{?projection\}}} is added to the URL.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:45.395,43780,issuemaster(issuemaster),,"0|i07j4n:",43971,43482,,,48 - Dijkstra GA,,,,,,,,,,,"06/May/14 2:01 AM;landrain;Here is the stacktrace:

2014-05-06 10:54:45,688 ERROR [org.springframework.data.rest.webmvc.AbstractRepositoryRestController] Illegal character in path at index 40: http://localhost:8080/rapnot/companies/4{?projection}
java.lang.IllegalArgumentException: Illegal character in path at index 40: http://localhost:8080/rapnot/companies/4{?projection}
	at java.net.URI.create(URI.java:859)
	at org.springframework.data.rest.webmvc.RepositoryEntityController.mergeAndReturn(RepositoryEntityController.java:322)
	at org.springframework.data.rest.webmvc.RepositoryEntityController.putItemResource(RepositoryEntityController.java:238)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:215)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:953)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:866)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:640)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:829)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:861)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:606)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)
	at java.lang.Thread.run(Thread.java:744)
Caused by: java.net.URISyntaxException: Illegal character in path at index 40: http://localhost:8080/rapnot/companies/4{?projection}
	at java.net.URI$Parser.fail(URI.java:2829)
	at java.net.URI$Parser.checkChars(URI.java:3002)
	at java.net.URI$Parser.parseHierarchical(URI.java:3086)
	at java.net.URI$Parser.parse(URI.java:3034)
	at java.net.URI.<init>(URI.java:595)
	at java.net.URI.create(URI.java:857)
	... 31 more","06/May/14 2:13 AM;landrain;Looking in the flow of the logs, the error happens at the end of the update process, when building the response to send to the caller. The data has already been effectively updated in our database.","07/May/14 5:13 AM;landrain;It works fine. Thank you.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#680|https://github.com/spring-projects/spring-data-rest/issues/680]. ",,,,,,,,,,,,,,,,,,,,
"""rel"" attribute of @RestResource should be optional",DATAREST-298,57405,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,snicoll,snicoll,29/Apr/14 3:27 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,29/Apr/14 3:34 AM,2.0.2 (Codd SR2),,,,2.0.3 (Codd SR3),2.1 RC1 (Dijkstra),,,,,,0,,,,,"When a finder method does not have any {{@RestResource}} annotation, the name of the method is taken by default.

The following construct does not work, I would expect it to take the custom {{path}} as the {{rel}} value instead of the following exception:

{code:java}
@RestResource(path = ""username"")
UserAccount findByUsername(@Param(""name"") String username);
{code}

{noformat}
java.lang.IllegalArgumentException: Rel must not be null or empty!
	at org.springframework.util.Assert.hasText(Assert.java:162)
	at org.springframework.hateoas.Link.<init>(Link.java:88)
	at org.springframework.hateoas.Link.<init>(Link.java:76)
	at org.springframework.data.rest.webmvc.RepositorySearchController.getSearchLinks(RepositorySearchController.java:247)
	at org.springframework.data.rest.webmvc.RepositorySearchController.listSearches(RepositorySearchController.java:108)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-04-29 03:34:43.851,43659,issuemaster(issuemaster),,"0|i07iif:",43871,43361,,,47 - Dijkstra RC1,,,,,,,,,,,"29/Apr/14 3:34 AM;olivergierke;Fixed and backported.","29/Apr/14 4:25 AM;olivergierke;I've fixed the defaulting for the rel to still fall back on the method name if it's not configured. It's not that the rel defaults to the path which defaults to the method name but both rel and path defaulting to the method name unless configured otherwise. We cannot imply any relation between path and rel as it's quite the contrary what you want to achieve with a rel: being able to change paths at will as the clients only rely on being able to find the links via rels.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#678|https://github.com/spring-projects/spring-data-rest/issues/678]. ",,,,,,,,,,,,,,,,,,,,,
Absolute base URI not applied correctly,DATAREST-296,57363,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,ptahchiev,ptahchiev,25/Apr/14 12:40 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,29/Apr/14 12:56 AM,,,,,2.1 RC1 (Dijkstra),,,,,,,0,,,,,"Hi guys,

I'm using latest snapshots 2.1.0.BUILD-SNAPSHOT of spring-data-rest and when I access http://locahost:8111/rest/ I get wrong hrefs:

{code}
        ""languageModels"": {
            ""href"": ""http://localhost:8111/resthttp:/localhost:8111/rest/language{?page,size,sort}"",
            ""templated"": true
        },
        ""taxModels"": {
            ""href"": ""http://localhost:8111/resthttp:/localhost:8111/rest/tax{?page,size,sort}"",
            ""templated"": true
        },
        ""abstractOrderModels"": {
            ""href"": ""http://localhost:8111/resthttp:/localhost:8111/rest/abstract_order{?page,size,sort}"",
            ""templated"": true
        },
{code}",2.1 SNAPSHOTS,,,,,,,,,,,,,,,,DATAREST-292,,,,,,,,,,,,,,,2014-04-27 23:19:34.368,43617,issuemaster(issuemaster),,"0|i07i33:",43802,43319,,,47 - Dijkstra RC1,,,,,,,,,,,"27/Apr/14 11:19 PM;olivergierke;What do you have configured your {{baseUri}} to? We recently discovered, it never really worked as expected and fixed that in the course of DATAREST-292.","27/Apr/14 11:25 PM;ptahchiev;My baseUri is http://localhost:8111/rest/","29/Apr/14 12:54 AM;olivergierke;The base URI is actually expected to only be the {{rest}} part in your case as it usually does not make too much sense to hard-code the server base (which effectively prevents the app from being deployed to other servers).

However, I've tweaked the link creation to check whether the base URI defined is absolute and if so use only that as a foundation for links.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#676|https://github.com/spring-projects/spring-data-rest/issues/676]. ",,,,,,,,,,,,,,,,,,,,
Reconfiguring baseUri isn't enough to change path to resolve URI links,DATAREST-292,57275,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,gregturn,gregturn,22/Apr/14 11:35 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,24/Apr/14 1:00 AM,,,,,2.0.3 (Codd SR3),2.1 RC1 (Dijkstra),,,,,,0,,,,,"With 2.1.0.BUILD-SNAPSHOT, I built a demo app to demonstrate hypermedia. In order to mix it with web pages, I reconfigured the baseUri to /api by extending RestRepositoryMvConfiguration and using the configureRepositoryRestConfiguration method to set baseUri.

The hypermedia links showed /api embedded at the front of each URI, but it still responded to the existing paths.",,,,,,,,,,,,,,,,,,,,,,DATAREST-296,,,,,,,,,,2020-12-31 10:29:44.471,43529,issuemaster(issuemaster),,"0|i003mv:",590,43231,,,47 - Dijkstra RC1,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#672|https://github.com/spring-projects/spring-data-rest/issues/672]. ",,,,,,,,,,,,,,,,,,,,,,,
RepositorySchemaController must not depend on javax.validation,DATAREST-288,57032,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,10/Apr/14 12:23 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,10/Apr/14 3:29 AM,2.0.1 (Codd SR1),2.1 M1 (Dijkstra),,,2.0.2 (Codd SR2),2.1 RC1 (Dijkstra),,,API Documentation,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:43.99,43287,issuemaster(issuemaster),,"0|i07gk7:",43555,42989,,,46 - Codd SR2,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#668|https://github.com/spring-projects/spring-data-rest/issues/668]. ",,,,,,,,,,,,,,,,,,,,,,,
500 returned if URL ends with /,DATAREST-276,56514,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,ptahchiev,ptahchiev,20/Mar/14 5:46 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,02/May/14 5:44 AM,2.1 M1 (Dijkstra),,,,2.0.3 (Codd SR3),2.1 RC1 (Dijkstra),,,,,,1,,,,,"So it all works fine if I try to access:

http://localhost:8111/rest/product

but if I try this:
http://localhost:8111/rest/product/

I get response 500 - no exception in the log or the response body.

I'm testing against the 2.1 SNAPSHOT",2.1 SNAPSHOTS,,,,,,,,,,,,,,,,,,,,,,,,,"02/May/14 1:25 AM;ptahchiev;test.zip;https://jira.spring.io/secure/attachment/21979/test.zip",,,,,,2014-05-01 12:20:52.963,42856,issuemaster(issuemaster),,"0|i07efz:",43212,42558,,,47 - Dijkstra RC1,,,,,,,,,,,"25/Apr/14 12:28 PM;ptahchiev;OK, with the latest SNAPSHOT I still get 500, but this time, there's also a stack-trace when I access: http://localhost:8111/rest/media/

{code}
Caused by: java.lang.IllegalStateException: Pattern ""/{repository}/"" is not a match for ""/media""
        at org.springframework.util.Assert.state(Assert.java:385)
        at org.springframework.util.AntPathMatcher.extractUriTemplateVariables(AntPathMatcher.java:389)
        at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleMatch(RequestMappingInfoHandlerMapping.java:112)
        at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleMatch(RequestMappingInfoHandlerMapping.java:56)
        at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:297)
        at org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.lookupHandlerMethod(RepositoryRestHandlerMapping.java:138)
        at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:248)
        at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:57)
        at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:299)
        at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1094)
        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:910)
        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:870)
        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961)
{code}","01/May/14 4:43 AM;ptahchiev;I don't want to be a nag, but I have to reopen this issue :(

So I tested with the latest SNAPSHOT, and here are the results:
1) I set the baseUrl to {{rest}}
Result is: 
{{http://localhost:8111/rest}} works fine, {{http://localhost:8111/rest/}} returns 404, and any other link like {{http://localhost:8111/rest/abstract_order}} returns 404, same as {{http://localhost:8111/rest/abstract_order/}} returns 404.

2) I set the baseUrl to {{/rest/}}
Result is: All of these return 404: {{http://localhost:8111/rest}}, {{http://localhost:8111/rest/}}, {{http://localhost:8111/rest/abstract_order}}, {{http://localhost:8111/rest/abstract_order/}}

3) I set the baseUrl to {{http://localhost:8111/rest/}}
Result is: {{http://localhost:8111/rest/}} returns 404, {{http://localhost:8111/rest}} works fine, {{http://localhost:8111/rest/abstract_order}} returns 404 and {{http://localhost:8111/rest/abstract_order/}} returns 404 too.","01/May/14 12:20 PM;olivergierke;Sorry for the hassle. I've added a few additional unit tests and tweaked the trailing slash handling slightly. Would you mind giving it another spin?","01/May/14 1:25 PM;ptahchiev;Hi Oliver,

it still doesn't work :( .. The results are the same","01/May/14 11:32 PM;olivergierke;This is weird as even before my my fix yesterday, relative base URIs worked (as it was confirmed by my added test cases). Are you sure you're using the latest snapshots? If so, can you provide a small sample project that shows the failing requests?","02/May/14 1:25 AM;ptahchiev;Attached sample project. Run {{mvn clean install -U}} from the top. Then {{cd mvc}}, then {{mvn jetty:run}} and once it starts go to http://localhost:8080/rest and it will work fine. Then go to http://localhost:8080/rest/ and it will return 404.","02/May/14 2:41 AM;olivergierke;Any chance you simplify this a little bit. Wading through a multi module Maven project is quite time consuming, especially given all the additional code that's in there that could play into this. I've pushed a tiny fix that prevents 500s being retuned from actual repository lookups (if they got trailing slashes). Simple access of the root URI have worked before nonetheless.

Please try the following:

{code}
$ git clone https://github.com/olivergierke/rest-microservices
$ cd rest-microservices
$ mvn clean install -U
$ cd rest-microservices-store
$ mvn spring-boot:run
$ curl http://localhost:8081/api
$ curl http://localhost:8081/api/
$ curl http://localhost:8081/api/stores
$ curl http://localhost:8081/api/stores/
{code}

The last {{curl}} commands should all be working as expected.","02/May/14 4:02 AM;ptahchiev;Hi Oliver,

I did exactly what you told me but it fails with:
{code}
C:\workspace\rest-microservices>mvn clean install -U
Listening for transport dt_socket at address: 8000
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO]
[INFO] REST Microservices
[INFO] rest-microservices-store
[INFO] rest-microservices-customers
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building REST Microservices 1.0.0.BUILD-SNAPSHOT
[INFO] ------------------------------------------------------------------------
Downloading: http://repo.spring.io/snapshot/org/springframework/data/spring-data-rest-webmvc/2.1.0.BUILD-SNAPSHOT/maven-metadata.xml
Downloading: http://repo.spring.io/libs-snapshot/org/springframework/data/spring-data-rest-webmvc/2.1.0.BUILD-SNAPSHOT/maven-metadata.xml
Downloaded: http://repo.spring.io/libs-snapshot/org/springframework/data/spring-data-rest-webmvc/2.1.0.BUILD-SNAPSHOT/maven-metadata.xml (3 KB at 1.7 KB/sec)
Downloaded: http://repo.spring.io/snapshot/org/springframework/data/spring-data-rest-webmvc/2.1.0.BUILD-SNAPSHOT/maven-metadata.xml (3 KB at 1.7 KB/sec)
Downloading: http://repo.spring.io/snapshot/org/springframework/data/spring-data-rest-parent/2.1.0.BUILD-SNAPSHOT/maven-metadata.xml
Downloading: http://repo.spring.io/libs-snapshot/org/springframework/data/spring-data-rest-parent/2.1.0.BUILD-SNAPSHOT/maven-metadata.xml
Downloaded: http://repo.spring.io/snapshot/org/springframework/data/spring-data-rest-parent/2.1.0.BUILD-SNAPSHOT/maven-metadata.xml (811 B at 1.3 KB/sec)
Downloaded: http://repo.spring.io/libs-snapshot/org/springframework/data/spring-data-rest-parent/2.1.0.BUILD-SNAPSHOT/maven-metadata.xml (811 B at 1.3 KB/sec)
Downloading: http://repo.spring.io/snapshot/org/springframework/data/build/spring-data-parent/1.4.0.BUILD-SNAPSHOT/maven-metadata.xml
Downloading: http://repo.spring.io/libs-snapshot/org/springframework/data/build/spring-data-parent/1.4.0.BUILD-SNAPSHOT/maven-metadata.xml
Downloaded: http://repo.spring.io/snapshot/org/springframework/data/build/spring-data-parent/1.4.0.BUILD-SNAPSHOT/maven-metadata.xml (811 B at 0.5 KB/sec)
Downloaded: http://repo.spring.io/libs-snapshot/org/springframework/data/build/spring-data-parent/1.4.0.BUILD-SNAPSHOT/maven-metadata.xml (811 B at 0.5 KB/sec)
Downloading: http://repo.spring.io/libs-snapshot/org/springframework/data/build/spring-data-build/1.4.0.BUILD-SNAPSHOT/maven-metadata.xml
Downloading: http://repo.spring.io/snapshot/org/springframework/data/build/spring-data-build/1.4.0.BUILD-SNAPSHOT/maven-metadata.xml
Downloaded: http://repo.spring.io/libs-snapshot/org/springframework/data/build/spring-data-build/1.4.0.BUILD-SNAPSHOT/maven-metadata.xml (810 B at 1.4 KB/sec)
Downloaded: http://repo.spring.io/snapshot/org/springframework/data/build/spring-data-build/1.4.0.BUILD-SNAPSHOT/maven-metadata.xml (810 B at 1.4 KB/sec)
Downloading: http://repo.spring.io/libs-snapshot/org/springframework/data/spring-data-rest-core/2.1.0.BUILD-SNAPSHOT/maven-metadata.xml
Downloading: http://repo.spring.io/snapshot/org/springframework/data/spring-data-rest-core/2.1.0.BUILD-SNAPSHOT/maven-metadata.xml
Downloaded: http://repo.spring.io/snapshot/org/springframework/data/spring-data-rest-core/2.1.0.BUILD-SNAPSHOT/maven-metadata.xml (3 KB at 3.2 KB/sec)
Downloaded: http://repo.spring.io/libs-snapshot/org/springframework/data/spring-data-rest-core/2.1.0.BUILD-SNAPSHOT/maven-metadata.xml (3 KB at 3.2 KB/sec)
Downloading: http://repo.spring.io/libs-snapshot/org/springframework/data/spring-data-commons/1.8.0.BUILD-SNAPSHOT/maven-metadata.xml
Downloading: http://repo.spring.io/snapshot/org/springframework/data/spring-data-commons/1.8.0.BUILD-SNAPSHOT/maven-metadata.xml
Downloaded: http://repo.spring.io/snapshot/org/springframework/data/spring-data-commons/1.8.0.BUILD-SNAPSHOT/maven-metadata.xml (3 KB at 2.6 KB/sec)
Downloaded: http://repo.spring.io/libs-snapshot/org/springframework/data/spring-data-commons/1.8.0.BUILD-SNAPSHOT/maven-metadata.xml (3 KB at 2.5 KB/sec)
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ rest-microservices ---
[INFO]
[INFO] --- spring-boot-maven-plugin:1.0.2.RELEASE:repackage (default) @ rest-microservices ---
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO]
[INFO] REST Microservices ................................ FAILURE [7.803s]
[INFO] rest-microservices-store .......................... SKIPPED
[INFO] rest-microservices-customers ...................... SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 8.439s
[INFO] Finished at: Fri May 02 14:00:38 EEST 2014
[INFO] Final Memory: 14M/491M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.0.2.RELEASE:repackage (default) on project rest-microservices: Execution default of goal org
.springframework.boot:spring-boot-maven-plugin:1.0.2.RELEASE:repackage failed: Source must refer to an existing file -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException
C:\workspace\rest-microservices>
{code}","02/May/14 4:17 AM;olivergierke;Looks weird. I've added the plugin repository declaration and rebase the branch. If you pull the latest changes of the branch this should be resolved correctly.

Otherwise instead of running it via the boot plugin, you can simply do {{java -jar target/*.jar}} after you've build the project. That should even do without any updates required.","02/May/14 4:36 AM;ptahchiev;Nope, still the same :(

And I'm pretty sure this guy has the same issue:
http://forum.spring.io/forum/spring-projects/boot/724165-repackager-source-must-refer-to-an-existing-file","02/May/14 6:16 AM;ptahchiev;{{rest}} only allows http://localhost:8111/rest and nothing else.
{{/rest/}} only allows http://localhost:8111/rest and nothing else.
{{http://localhost:8111/rest/}} only allows http://localhost:8111/rest and nothing else.
{{http://localhost:8111/rest}} only allows http://localhost:8111/rest and nothing else.

{code}
2014-05-02 16:16:00,075 [qtp73067426-107] WARN : No mapping found for HTTP request with URI [/rest/] in DispatcherServlet with name 'restDispatcherServlet'
2014-05-02 16:16:04,409 [qtp73067426-111] WARN : No mapping found for HTTP request with URI [/rest/product] in DispatcherServlet with name 'restDispatcherServlet'
2014-05-02 16:16:07,658 [qtp73067426-107] WARN : No mapping found for HTTP request with URI [/rest/product/] in DispatcherServlet with name 'restDispatcherServlet'
{code}","02/May/14 11:26 AM;olivergierke;The link you posted is not even remotely related to Spring Data. I am totally unable to reproduce this. Did you give the example a spin, which I pointed you to? It's not running on 8111 and does not use {{rest}} as base API? If you don't like the example please come up with a totally reduced reproducing test case, which I can verify.","03/May/14 2:08 AM;ptahchiev;Hi Oliver,

The link I posted leads to a guy who has {{""spring-boot-maven-plugin:1.0.2.RELEASE:repackage failed: Source must refer to an existing file""}} which is exactly the stacktrace I get when building your {{rest-microservices}} project. And the fact that he and I we both use Windows makes me thing the {{spring-boot-maven-plugin}} is broken under Windows. I don't know what this plugin does, I don't know what repackage means and that is why I provided you with a simple maven project which contains 7 classes.

Following your suggestion I tried to trim down the project to just 2 classes and to be honest it DID work. Which makes me think there's a problem with the multi-module setup. One difference is that if you have multi-module setup you will have 2 dispatcher servlets (one for {{/}} and one for {{/rest/}}).

 If you look inside the zip I have attached, (file test\rest\src\main\java\com\test\config\RestWebConfig) you will see I assign the rest dispatcher servlet to {{/rest/*}}:

{code}
        /* Spring REST Delegating Dispatcher Servlet */
        final Servlet restDispatcherServlet = new RepositoryRestDispatcherServlet(webCtx);
        final ServletRegistration.Dynamic restDispatcherServletReg = servletContext.addServlet(""restDispatcherServlet"", restDispatcherServlet);
        restDispatcherServletReg.setLoadOnStartup(1);
        restDispatcherServletReg.addMapping(""/rest/*"");
{code}

And if the rest module is not a separate module the dispatcher servlet is assigned to {{/}}. So I really believe the problem is the combination of the dispatcher servlet mapping {{/rest/*}} and the RepositoryRestConfiguration mapping {{rest}}.","03/May/14 3:43 AM;olivergierke;So if the servlet you run Spring Data REST in, already has a servlet mapping of {{/rest/*}} there's no need to configure a custom base URI at all, as Spring MVC will handle that for us already. Base URI is intended to be used if you run Spring Data REST inside the same servlet you have a normal Spring MVC application running and want to namespace your REST resources. E.g. serve an ordinary HTML page from {{/users}}, {{/account}} etc. but also expose a REST API with the same mappings. The you'd go ahead and configure the base URI to {{api}} (or any slash-equipped derivative), so that you'd get Spring Data REST to listen to {{/api/users}}, {{/api/accounts}} etc.

Does that make sense?","03/May/14 4:06 AM;ptahchiev;Hi Oliver,

yes it makes perfect sense. All works now after I comment the custom base URI.","03/May/14 4:19 AM;olivergierke;\o/ Glad to hear it works for you!","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#656|https://github.com/spring-projects/spring-data-rest/issues/656]. ",,,,,,,
PaginationCustomizations are not applied ,DATAREST-271,56344,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,13/Mar/14 12:43 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,13/Mar/14 12:56 AM,,,,,2.0.1 (Codd SR1),2.1 M1 (Dijkstra),,,,,,0,,,,,Some customizations made to {{RepositoryRestConfig}} (like configuring the pagination attributes) are not applied to the infrastructure.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:41.93,42687,issuemaster(issuemaster),,"0|i07dev:",43045,42389,,,44 - Codd GA,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#651|https://github.com/spring-projects/spring-data-rest/issues/651]. ",,,,,,,,,,,,,,,,,,,,,,,
Exception when putting element with return type,DATAREST-268,56267,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,jhiemer,jhiemer,08/Mar/14 2:26 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,11/Mar/14 10:26 AM,2.0 GA (Codd),,,,2.0.1 (Codd SR1),2.1 M1 (Dijkstra),,,Repositories,,,1,,,,,"When doing a PUT against the following url:
{code:none}
http://localhost:8080/web/entities/531ab755a0ee3b1979c587f9
{code}

{code:javascript}
{
	""prop1"":""dvsjdnvjkvnjk"",
  	""prop2"":60,
  	""prop3"":""speedport_w723_v_typ_a_1_00_098"",
  	""prop4"":{
      	""propprip1"":15,
      	""propprip1"":0,
      	""propprip1"":1500,
      	""propprip1"":5},
  	""prop5"":""2014-03-08T06:23:17.000+0000"",
}
{code}

Returns in a:
{code:none}
java.lang.IllegalArgumentException: Illegal character in path at index 65: http://localhost:8080/web/entities/531ab755a0ee3b1979c587f9{?projection}
{code}

This seems to be a result of: org.springframework.data.rest.webmvc.RepositoryEntityController:320 which creates a self - link as follows:
{code:none}
http://localhost:8080/web/entities/531ab755a0ee3b1979c587f9{?projection}
{code}

and results in the exception during 

{code:java}
URI.create(assembler.getSelfLinkFor(obj).getHref())
{code}


",,,,,,,,,,,,,,,,,DATAREST-221,,,,,DATAREST-609,,,,,,,,,,2014-03-08 03:27:25.172,42610,issuemaster(issuemaster),,"0|i07d6n:",43008,42312,,,44 - Codd GA,,,,,,,,,,,"08/Mar/14 2:32 AM;jhiemer;Seems to be that:
{code:java}
headers.setLocation(URI.create(assembler.getSelfLinkFor(obj).expand().getHref()));
{code}

fixes it. But I am not sure if this is intended behaviour. ","08/Mar/14 3:27 AM;olivergierke;Lowering the severity as this currently only an issue if projections are used, which is a feature, not released yet.","08/Mar/14 4:48 AM;jhiemer;No problem, fixed it here on my side for the time being.","11/Mar/14 10:26 AM;olivergierke;We now pipe the id segment obtained from the request URI through Spring HATEOAS' {{UriTemplate}} and remove the variables potentially contained in it.

So you should be able to simply take the {{href}} value from templated links and submit them as is, although a polite client would expand them itself. Still we don't blow up on the server anymore if such an ""invalid"" URI is used.","23/Mar/14 12:31 PM;jhiemer;Should that be in the Snapshots of 2.1?","05/May/14 2:00 AM;landrain;Is this really fixed in 2.1 M1 ? We are using the 2.1.0M1 (with projections) and we are encountering the same symptom.","05/May/14 2:20 AM;landrain;2014-05-05 11:18:40,788 ERROR [org.springframework.data.rest.webmvc.AbstractRepositoryRestController] Illegal character in path at index 41: http://localhost:8080/rapnot/companies/15{?projection}
java.lang.IllegalArgumentException: Illegal character in path at index 41: http://localhost:8080/tstprj/companies/15{?projection}
	at java.net.URI.create(URI.java:859)
	at org.springframework.data.rest.webmvc.RepositoryEntityController.mergeAndReturn(RepositoryEntityController.java:322)
	at org.springframework.data.rest.webmvc.RepositoryEntityController.putItemResource(RepositoryEntityController.java:238)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:215)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:953)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:866)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:640)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:829)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:861)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:606)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)
	at java.lang.Thread.run(Thread.java:744)
Caused by: java.net.URISyntaxException: Illegal character in path at index 41: http://localhost:8080/rapnot/companies/15{?projection}
	at java.net.URI$Parser.fail(URI.java:2829)
	at java.net.URI$Parser.checkChars(URI.java:3002)
	at java.net.URI$Parser.parseHierarchical(URI.java:3086)
	at java.net.URI$Parser.parse(URI.java:3034)
	at java.net.URI.<init>(URI.java:595)
	at java.net.URI.create(URI.java:857)
	... 31 more","05/May/14 6:08 AM;landrain;Same problem with 2.1.0_RC1","05/May/14 7:32 AM;olivergierke;I see where you're heading but the exception you see is not really related to the core concern of this ticket. You're issuing a request to an invalid URI (it contains a URI template placeholder, which has to be expanded before submitting). I generally agree that we could handle this more gracefully, so I filed and fixed DATAREST-300 for you.

Note, that you should fix the client to appropriately expand the URI templates (link objects with the {{templated}}) attribute set to {{true}}) before submitting requests.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#649|https://github.com/spring-projects/spring-data-rest/issues/649]. ",,,,,,,,,,,,,,
(Potentially) unwanted behaviour for self hrefs with projections,DATAREST-267,56265,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,jhiemer,jhiemer,08/Mar/14 12:09 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,11/Mar/14 10:26 AM,,,,,2.0.1 (Codd SR1),2.1 M1 (Dijkstra),,,Repositories,,,0,,,,,"When loading an entity with via id, the response always contains the a self link like this 
{code:javascript}
http://localhost:8080/web/entity/5319f06c804c618fc7e6cf73{?projection}
{code}

When using a HATEOAS approach based solution for entity handling I would to a PUT on self.

This leads to a put with:
{code:javascript}
http://localhost:8080/web/entity/5319f06c804c618fc7e6cf73{?projection}
{code}

which in turns leads to a:
{code:none}
URI::InvalidURIError: bad URI(is not URI?): http://localhost:8080/web/agentInstances/5319f06c804c618fc7e6cf73{?projection}
{code}

That's a bit messy I think and could be improved.",,,,,,,,,,,,,,,,,,,,,,DATAREST-609,,,,,,,,,,2014-03-08 03:23:31.358,42608,issuemaster(issuemaster),,"0|i07d67:",43006,42310,,,44 - Codd GA,,,,,,,,,,,"08/Mar/14 3:23 AM;olivergierke;Every link that is a template clearly indicates it is templated (through the property {{templated}}). Hence the client needs to expand them before traversing them. Spring HATEOAS offers a {{UriTemplate}} class that can be used to obtain the parameters of the template and expand them. In the special case of Spring Data REST, we usually use optional template variables, so that a simple expand without providing any parameters should work.

However, I agree that the server side could be more resilient against those URIs used.","08/Mar/14 4:50 AM;jhiemer;Ok, got it. At the moment, is is also possible for me to just remove it on the client side.","11/Mar/14 10:26 AM;olivergierke;See the resolving comment in DATAREST-268.","11/Mar/14 10:41 AM;jhiemer;Perfect, thanks!","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#648|https://github.com/spring-projects/spring-data-rest/issues/648]. ",,,,,,,,,,,,,,,,,,,
POST/Create with Non-CRUD Repository doesn't save (only checks exists()),DATAREST-265,56220,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,fabianbuch,fabianbuch,06/Mar/14 5:15 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,06/Mar/14 8:29 AM,2.0 GA (Codd),,,,2.1 M1 (Dijkstra),,,,Repositories,,,0,,,,,"POST/Create with Non-CRUD Repository doesn't actually save (only checks exists()).

Sample:
{code:title= NonCrudRepository.java|borderStyle=solid}
public interface NonCrudRepository extends Repository<CreditCard, Long> {

    CreditCard findByCreditCardNumber(String creditCardNumber);
    CreditCard save(CreditCard creditCard);
    Iterable<CreditCard> save(Iterable<CreditCard> entities);
    CreditCard findOne(Long id);
    boolean exists(Long id);
}
{code}

I turned on hibernate sql debug logging and observed that it seems to call exists() since it does an SQL SELECT statement, but not the INSERT and final SELECT statement.

I couldn't figure out a unit / integration test yet, but if necessary can try to cook something.",,,,,,,,,,,DATACMNS-464,,,,,,,,,,,DATAJPA-498,,,,,,,,,,2014-03-06 05:36:09.368,42563,issuemaster(issuemaster),,"0|i07cxb:",42966,42265,,,44 - Codd GA,,,,,,,,,,,"06/Mar/14 5:36 AM;thomasd;It would be very helpful if you could provide a small sample project :)","06/Mar/14 5:39 AM;olivergierke;What do you get as a result for the request? Does the response contain a {{Location}} header? If so, does a {{GET}} to the header value succeed?

A tiny test project would be awesome. Maybe something based on the Spring Data REST starter with Boot? That should require a single domain class and repo only then.","06/Mar/14 7:34 AM;olivergierke;I got it reproduced. Currently, if you declare the CRUD methods individually you need to annotate them with {{@Transactional}} manually. I've filed DATACMNS-464 to fix this.","06/Mar/14 8:29 AM;olivergierke;This should be fixed transitively in Spring Data Commons. Feel free to grab the latest Spring Data REST 2.1. Run Maven with {{-U}} to grab the latest dependencies.","06/Mar/14 8:35 AM;fabianbuch;I reproduced it in a sample project:

https://dl.dropboxusercontent.com/u/22022555/spring-datarest-265.tar.gz

build/run:
{code}
mvn clean package
java -jar target/spring-datarest-265-0.0.1-SNAPSHOT.jar
{code}

via rest-shell:
{code}
http://localhost:8080:> post creditCards --data ""{id:1, creditCardNumber:'foo'}""

> POST http://localhost:8080/creditCards

< 201 CREATED
< Server: Apache-Coyote/1.1
< Location: http://localhost:8080/creditCards/1
< Content-Length: 0
< Date: Thu, 06 Mar 2014 16:13:32 GMT
< 

http://localhost:8080:> get creditCards/1
> GET http://localhost:8080/creditCards/1

< 404 NOT_FOUND
< Server: Apache-Coyote/1.1
< Content-Length: 0
< Date: Thu, 06 Mar 2014 16:32:59 GMT
< 

{code}

Hibernate is logging:

{code}
Hibernate: select creditcard0_.id as id1_0_0_, creditcard0_.credit_card_number as credit_c2_0_0_ from credit_card creditcard0_ where creditcard0_.id=?
{code}

If CreditCardRepository is changed to extend CrudRepository instead Hibernate logs the following:

{code}
Hibernate: select creditcard0_.id as id1_0_0_, creditcard0_.credit_card_number as credit_c2_0_0_ from credit_card creditcard0_ where creditcard0_.id=?
Hibernate: insert into credit_card (credit_card_number, id) values (?, ?)
{code}
","06/Mar/14 8:47 AM;fabianbuch;After updating to latest master snapshot of spring-data-commons I have a followup bug that prevents spring boot from starting. Log:

https://gist.github.com/fabianbuch/9393923

Can be reproduced with above sample project.","06/Mar/14 8:54 AM;olivergierke;This works with a minor tweak: remove the Spring Data Commons dependency declaration and just add a {{properties}} section and add a property {{spring-data-jpa.version}} set to 1.6.0.BUILD-SNAPSHOT. I could then issue a {{POST}} request sucessfully, followed by a {{GET}}. Alternatively, drop the version upgrade completely and annotate {{save(…)}} with {{@Transactional}}.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#646|https://github.com/spring-projects/spring-data-rest/issues/646]. ",,,,,,,,,,,,,,,,
RepositoryRelProvider is not registered,DATAREST-261,56091,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,27/Feb/14 5:15 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,27/Feb/14 5:55 AM,2.0 GA (Codd),,,,2.0.1 (Codd SR1),2.1 M1 (Dijkstra),,,Repositories,,,0,dijkstra,,,,"Currently there's bean registered for the {{RepositoryRelProvider}} implementation that returns rels based on the mapping information.

This causes components using a {{RelProvider}} to calculate rels (in contrast to ones that directly use the {{ResourceMapping}} (such as the root controller). This causes different rels being rendered depending on which API a component uses.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:40.996,42434,issuemaster(issuemaster),,"0|i004db:",710,42136,,,44 - Codd GA,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#644|https://github.com/spring-projects/spring-data-rest/issues/644]. ",,,,,,,,,,,,,,,,,,,,,,,
org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module does not properly handle JPA @Transient annotation during serialization yeilding a NPE,DATAREST-254,55882,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,bgaisford,bgaisford,24/Feb/14 6:29 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,24/Feb/14 11:34 PM,2.0 GA (Codd),,,,2.0.1 (Codd SR1),2.1 M1 (Dijkstra),,,Repositories,,,0,dijkstra,,,,"Create and Entity as per below:

@Entity
@Table(name = ""category"")
public class Category implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    protected Long id;

    @Column(name = ""description"")
    protected String description;
    
    @Column(name=""last_change_dtm"")
    private Date lastChangeDate;

    @Transient
    private Long key;

    ...
}

Method org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module.updateBuilder(SerializationConfig config, BeanDescription beanDesc, BeanSerializerBuilder builder) with throw a NullPointerException when trying to serialize the key property of Category bean.  Within the for loop, @Transient properties will result in a null persistentProperty and the subsequent if() statement will throw a NPE.  This did not occur in Spring Data Rest 2.0.0.RC1.

","OS X Mavericks, Oracle JDK 1.7.0_51, Apache Tomcat 7.0.47, Spring Data Rest 2.0.0.RELEASE, Jackson Data Bind 2.3.1, Spring Framework 3.2.7.RELEASE, Hibernate JPA 2.0 API",,,,,,,,,,,,,,,,DATAREST-253,,,,,,,,,,,,,,,2014-02-24 22:27:07.788,42358,issuemaster(issuemaster),,"0|i0048f:",688,42060,,,44 - Codd GA,,,,,,,,,,,"24/Feb/14 6:33 PM;bgaisford;Forgot to mention, expose the Category bean as a CrudRepository and attempt to fetch categories.

public interface CategoryRepository extends CrudRepository<Category, Long> {
}","24/Feb/14 6:48 PM;bgaisford;Stack trace:

Hibernate: select category0_.id as id1_0_, category0_.description as descript2_0_, category0_.last_change_dtm as last_cha3_0_ from category category0_
Feb 24, 2014 4:44:56 PM org.apache.catalina.core.StandardWrapperValve invoke
16:44:56.024 ERROR o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failed to invoke @ExceptionHandler method: public org.springframework.http.ResponseEntity<org.springframework.data.rest.webmvc.support.ExceptionMessage> org.springframework.data.rest.webmvc.AbstractRepositoryRestController.handleNotReadable(org.springframework.http.converter.HttpMessageNotReadableException)
SEVERE: Servlet.service() for servlet [dispatcher] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: (was java.lang.NullPointerException) (through reference chain: org.springframework.hateoas.Resources[""content""]->java.util.UnmodifiableCollection[0]->org.springframework.hateoas.Resource[""content""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: (was java.lang.NullPointerException) (through reference chain: org.springframework.hateoas.Resources[""content""]->java.util.UnmodifiableCollection[0]->org.springframework.hateoas.Resource[""content""])] with root cause
java.lang.IllegalStateException: No suitable resolver for argument [0] [type=org.springframework.http.converter.HttpMessageNotReadableException]
java.lang.NullPointerException
HandlerMethod details: 
	at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$AssociationOmittingSerializerModifier.updateBuilder(PersistentEntityJackson2Module.java:251)
Controller [org.springframework.data.rest.webmvc.RepositoryEntityController]
	at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructBeanSerializer(BeanSerializerFactory.java:433)
Method [public org.springframework.http.ResponseEntity<org.springframework.data.rest.webmvc.support.ExceptionMessage> org.springframework.data.rest.webmvc.AbstractRepositoryRestController.handleNotReadable(org.springframework.http.converter.HttpMessageNotReadableException)]
	at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanSerializer(BeanSerializerFactory.java:272)

	at com.fasterxml.jackson.databind.ser.BeanSerializerFactory._createSerializer2(BeanSerializerFactory.java:217)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:174) ~[spring-web-3.2.7.RELEASE.jar:3.2.7.RELEASE]
	at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer(BeanSerializerFactory.java:152)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:123) ~[spring-web-3.2.7.RELEASE.jar:3.2.7.RELEASE]
	at com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(SerializerProvider.java:1077)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) ~[spring-webmvc-3.2.7.RELEASE.jar:3.2.7.RELEASE]
	at com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(SerializerProvider.java:1037)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:321) ~[spring-webmvc-3.2.7.RELEASE.jar:3.2.7.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:60) [spring-webmvc-3.2.7.RELEASE.jar:3.2.7.RELEASE]
	at com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(SerializerProvider.java:445)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:136) [spring-webmvc-3.2.7.RELEASE.jar:3.2.7.RELEASE]
	at com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter._findAndAddDynamic(UnwrappingBeanPropertyWriter.java:186)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1148) [spring-webmvc-3.2.7.RELEASE.jar:3.2.7.RELEASE]
	at com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter.serializeAsField(UnwrappingBeanPropertyWriter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:985) [spring-webmvc-3.2.7.RELEASE.jar:3.2.7.RELEASE]
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:632)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:939) [spring-webmvc-3.2.7.RELEASE.jar:3.2.7.RELEASE]
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:152)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) [spring-webmvc-3.2.7.RELEASE.jar:3.2.7.RELEASE]
	at com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeValue(SerializerProvider.java:865)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:953) [spring-webmvc-3.2.7.RELEASE.jar:3.2.7.RELEASE]
	at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$PersistentEntityResourceSerializer.serialize(PersistentEntityJackson2Module.java:198)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:844) [spring-webmvc-3.2.7.RELEASE.jar:3.2.7.RELEASE]
	at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$PersistentEntityResourceSerializer.serialize(PersistentEntityJackson2Module.java:135)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) [servlet-api.jar:na]
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:117)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:829) [spring-webmvc-3.2.7.RELEASE.jar:3.2.7.RELEASE]
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:23)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) [servlet-api.jar:na]
	at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serialize(AsArraySerializerBase.java:183)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) [catalina.jar:7.0.47]
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:541)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [catalina.jar:7.0.47]
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:632)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222) [catalina.jar:7.0.47]
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:152)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123) [catalina.jar:7.0.47]
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:114)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) [catalina.jar:7.0.47]
	at com.fasterxml.jackson.databind.ObjectMapper.writeValue(ObjectMapper.java:1837)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171) [catalina.jar:7.0.47]
	at org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.writeInternal(MappingJackson2HttpMessageConverter.java:204)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100) [catalina.jar:7.0.47]
	at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:179)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953) [catalina.jar:7.0.47]
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:148)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) [catalina.jar:7.0.47]
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:90)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408) [catalina.jar:7.0.47]
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:189)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041) [tomcat-coyote.jar:7.0.47]
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:69)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:603) [tomcat-coyote.jar:7.0.47]
	at org.springframework.data.rest.webmvc.ResourceProcessorHandlerMethodReturnValueHandler.handleReturnValue(ResourceProcessorHandlerMethodReturnValueHandler.java:172)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310) [tomcat-coyote.jar:7.0.47]
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:69)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_51]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:122)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_51]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745)
	at java.lang.Thread.run(Thread.java:744) [na:1.7.0_51]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:953)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:844)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:829)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:603)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)","24/Feb/14 10:27 PM;olivergierke;The root cause for this is DATAREST-253 and what you see eventually is the exception failing to be handled.

I'll keep this one around for the fox for the latter.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#637|https://github.com/spring-projects/spring-data-rest/issues/637]. ",,,,,,,,,,,,,,,,,,,,
AssociationOmittingSerializerModifier suffers from potential NullPointerException,DATAREST-253,55875,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,24/Feb/14 10:55 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,24/Feb/14 11:34 PM,2.0 GA (Codd),,,,2.0.1 (Codd SR1),2.1 M1 (Dijkstra),,,,,,0,dijkstra,,,,{{AssociationOmittingSerializerModifier}} traverses the properties Jackson detected and checks whether they're associations. For properties not backed by a field at all (i.e. getters that represent a calculated business value) the {{PersistentProperty}} will be {{null}} and the subsequent if-clauses will cause a {{NullPointerException}}.,,,,,,,,,,,,,,,,,,,,,,DATAREST-254,,,,,,,,,,2020-12-31 10:29:40.07,42351,issuemaster(issuemaster),,"0|i0048n:",689,42053,,,44 - Codd GA,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#636|https://github.com/spring-projects/spring-data-rest/issues/636]. ",,,,,,,,,,,,,,,,,,,,,,,
Embedded associations do not get rendered,DATAREST-250,55794,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,faisalferoz,faisalferoz,20/Feb/14 4:26 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,24/Feb/14 12:12 AM,2.0 RC1 (Codd),,,,2.0 GA (Codd),,,,,,,0,,,,,"{code:java}
class Product {
  String name;
  String manufacturer;
  List<ProductAttribtue> attributes = new ArrayList<>();
}
{code}

if Product repository is present (managed) and there is no repository for ProductAttribute then the exported JSON content only shows product but no attributes:
{code:javascript}
{
""_links"":{
""self"":{
""href"":""http://localhost:8080/products/1""
}
},
""name"":""Test Product"",
""manufacturer"":""HP"",
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-02-20 06:43:27.803,42271,issuemaster(issuemaster),,"0|i07adr:",42554,41973,,,43 - Babbage SR3,,,,,,,,,,,"20/Feb/14 6:43 AM;olivergierke;Any chance you check the latest snapshots? We did quite some overhaul to the serialization and deserialization process, so that this issue should be fixed actually.","20/Feb/14 7:12 AM;faisalferoz;Yea just tried with latest snapshot version as well. Facing same issue in snapshot version as well.","21/Feb/14 2:57 AM;olivergierke;Gotcha, the (erroneous) exclusion from the serialization had made it from the old implementation into the new one. Tightened the test case and fixed the exclusion rules. Should be working in the current snapshots.","21/Feb/14 7:11 AM;faisalferoz;This is still broken. I get the following exception now:
{code:xml}
java.lang.IllegalStateException: No suitable resolver for argument [0] [type=org.springframework.http.converter.HttpMessageNotReadableException]
HandlerMethod details: 
Controller [org.springframework.data.rest.webmvc.RepositoryEntityController]
Method [public org.springframework.http.ResponseEntity<org.springframework.data.rest.webmvc.support.ExceptionMessage> org.springframework.data.rest.webmvc.AbstractRepositoryRestController.handleNotReadable(org.springframework.http.converter.HttpMessageNotReadableException)]

	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:169)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:124)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:340)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:60)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:138)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:75)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1164)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1005)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:876)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:852)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilter(WebRequestTraceFilter.java:114)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextFilterConfiguration$1.doFilterInternal(EndpointWebMvcAutoConfiguration.java:128)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at com.etilize.sde.core.web.filter.SimpleCORSFilter.doFilter(SimpleCORSFilter.java:61)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration$MetricsFilter.doFilterInternal(MetricFilterAutoConfiguration.java:84)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:680)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:603)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1721)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1679)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)

2014-02-21 20:11:03.697 ERROR 4042 --- [nio-8080-exec-1] o.s.b.actuate.web.BasicErrorController   : org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: (was java.lang.NullPointerException) (through reference chain: org.springframework.hateoas.PagedResources[""_embedded""]->java.util.UnmodifiableMap[""products""]->java.util.ArrayList[0]->org.springframework.hateoas.Resource[""content""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: (was java.lang.NullPointerException) (through reference chain: org.springframework.hateoas.PagedResources[""_embedded""]->java.util.UnmodifiableMap[""products""]->java.util.ArrayList[0]->org.springframework.hateoas.Resource[""content""])
{code}","21/Feb/14 8:46 AM;olivergierke;Any chance you provide a test case to reproduce that?","23/Feb/14 7:14 AM;faisalferoz;Right now spring-data-rest:BUILD-SNAPSHOT is broken, adding this version in the code doesn't even let the application boot.

Right now I have put in the RC1 version as dependency, you can change that in pom.xml file by setting the property: spring.data.rest.verion

Here is the test code: https://github.com/faisalferoz/DATAREST-250","23/Feb/14 7:42 AM;olivergierke;Well, it clearly is not, as the [build status|https://build.spring.io/browse/SPRINGDATAREST-DATAWEB] suggests.

Your sample also works, with a few minor modifications:

1. Explicitly use {{@EnableJpaRepositories}} on your configuration class. This is a know issue with Spring Boot 1.0 RC3 and the latest Spring Data snapshots due to an API change. The fix for that is here and will be applied once we go GA with the Codd release train.
2. Fix your Jackson mapping setup. {{Product}} knows {{ProductAttribute}} which in turn knows {{Product}}. This will cause a marshaling cycle and lead to a {{StackOverFlowError}}. Adding {{@JsonIgnore}} to {{ProductAttribute.getProduct()}} solved this.
3. Fix your JSON path expression. It needs to be {{$.productAttributes[*]}}, not {{$.productAttribues[*]}}.

That fixed, the test goes green.","23/Feb/14 11:59 PM;faisalferoz;Thanks - works fine now with the latest BUILD-SNAPHOT of spring-data-rest.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#633|https://github.com/spring-projects/spring-data-rest/issues/633]. ",,,,,,,,,,,,,,,
NPE when calling count Queries in SD MongoDB Repositories,DATAREST-247,55710,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,jhiemer,jhiemer,17/Feb/14 3:29 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,11/Mar/14 11:37 AM,2.0 M1 (Codd),2.0 RC1 (Codd),,,2.0.1 (Codd SR1),2.1 M1 (Dijkstra),,,Repositories,,,0,dijkstra,,,,"I created the following query:

{code:java}
@Query(value = ""{'requestId': ?0}"", count = true)
public Long countByRequestId(@Param(""id"") String id);
{code}

Trying to access this query via SD REST, results in a NPE. This NPE is thrown in the AbstractRepositoryRestController. The throwing method is:

{code:java}
@SuppressWarnings({ ""unchecked"" })
	protected Resources resultToResources(Object result) {

		if (result instanceof Page) {
			Page<Object> page = (Page<Object>) result;
			return entitiesToResources(page, assembler);
		} else if (result instanceof Iterable) {
			return entitiesToResources((Iterable<Object>) result);
		} else if (null == result) {
			return new Resources(EMPTY_RESOURCE_LIST);
		} else {
			Resource<Object> resource = perAssembler.toResource(result);
			return new Resources(Collections.singletonList(resource));
		}
	}
{code}

As the query returns Long the method steps into:

{code:java}
Resource<Object> resource = perAssembler.toResource(result);
{code}

which results in a Null instance for entity in:

{code:java}
PersistentEntity<?, ?> entity = repositories.getPersistentEntity(instance.getClass());
{code}

and then leads to the NPE.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:39.528,42187,issuemaster(issuemaster),,"0|i07b8f:",42692,41889,,,44 - Codd GA,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#630|https://github.com/spring-projects/spring-data-rest/issues/630]. ",,,,,,,,,,,,,,,,,,,,,,,
ValidatingRepositoryEventListener should use Repositories more lenient,DATAREST-246,55638,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,12/Feb/14 6:57 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,12/Feb/14 7:43 AM,2.0 RC1 (Codd),,,,2.0 GA (Codd),,,,,,,0,,,,,"{{ValidatingRepositoryEventListener}} uses field injection to access a {{Repositories}} instance and does a by-type lookup of components in {{afterPropertiesSet(…)}} which can cause a circular reference on initialization.

We should rather use an {{ObjectFactory<Repositories>}} from within the listener so that the container can give us a proxy that will eventually return the {{Repositories}} instance but doesn't have to instantiate {{Repositories}} eagerly.",,,,,,,,,,,,,,,,,DATACMNS-432,,,,,,,,,,,,,,,2020-12-31 10:29:39.27,42114,issuemaster(issuemaster),,"0|i07a9z:",42537,41816,,,43 - Babbage SR3,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#629|https://github.com/spring-projects/spring-data-rest/issues/629]. ",,,,,,,,,,,,,,,,,,,,,,,
links hrefs messed with pagination parameters,DATAREST-245,55576,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Works as Designed,olivergierke,springuser007,springuser007,10/Feb/14 9:34 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,12/Mar/14 3:53 AM,2.0 RC1 (Codd),,,,,,,,,,,0,,,,,"Since upgrading to RC1 I see links rendered are messed up. Only resource listing links are affected.

{code}
{
    ""_links"": {
        ""machines"": {
            ""href"": ""http://localhost:8080/dc-ref/machines{?page,size,sort}"",
            ""templated"": true
        },
        ""countries"": {
            ""href"": ""http://localhost:8080/dc-ref/countries{?page,size,sort}"",
            ""templated"": true
        },
        ""cities"": {
            ""href"": ""http://localhost:8080/dc-ref/cities{?page,size,sort}"",
            ""templated"": true
        }
    }
}
{code}","SDR 2.0.RC1 Tomcat 7.x
-----------------------------
spring-data-commons-1.7.0.RC1.jar
spring-data-mongodb-1.4.0.RC1.jar
spring-data-rest-core-2.0.0.RC1.jar
spring-data-rest-webmvc-2.0.0.RC1.jar
spring-hateoas-0.9.0.RELEASE.jar
spring-plugin-core-1.0.0.RELEASE.jar
mongo-java-driver-2.11.3.jar
aopalliance-1.0.jar
cglib-nodep-2.2.2.jar
evo-inflector-1.0.1.jar
joda-time-2.1.jar
hibernate-validator-4.3.0.Final.jar
jboss-logging-3.1.0.CR2.jar
validation-api-1.0.0.GA.jar
spring-tx-3.2.7.RELEASE.jar
spring-web-3.2.7.RELEASE.jar
spring-webmvc-3.2.7.RELEASE.jar
spring-aop-3.2.7.RELEASE.jar
spring-beans-3.2.7.RELEASE.jar
spring-context-3.2.7.RELEASE.jar
spring-core-3.2.7.RELEASE.jar
spring-expression-3.2.7.RELEASE.jar
jcl-over-slf4j-1.7.5.jar
logback-classic-1.0.11.jar
logback-core-1.0.11.jar
slf4j-api-1.7.5.jar
jackson-annotations-2.3.0.jar
jackson-core-2.3.0.jar
jackson-databind-2.3.0.jar
jackson-datatype-joda-2.3.0.jar",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-02-10 09:54:09.962,42052,issuemaster(issuemaster),,"0|i07amv:",42595,41754,,,,,,,,,,,,,,"10/Feb/14 9:54 AM;olivergierke;What exactly is messed up here. Were exposing URI templates for resources that take parameters. This change was introduced for DATAREST-229 to indicate the paramters a resource takes to clients. This is following [RFC6570|http://tools.ietf.org/html/rfc6570]. The template nature of the hrefs is documented using the {{templated}} attribute as defined by the [HAL specification|http://tools.ietf.org/html/draft-kelly-json-hal-06#section-5.2].","10/Feb/14 10:25 AM;springuser007;I didn't noticed this change. After reading RFC I think this change is well appreciated. You may close the ticket.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#628|https://github.com/spring-projects/spring-data-rest/issues/628]. ",,,,,,,,,,,,,,,,,,,,,
SDR Schema follows json-schema?,DATAREST-244,55548,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Duplicate,olivergierke,springuser007,springuser007,07/Feb/14 3:57 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,06/Feb/15 12:22 AM,2.1 RC1 (Dijkstra),,,,,,,,,,,1,,,,,The schema (/schema) output of SDR follows the specification (http://json-schema.org/documentation.html )? If so what version?,,,,,,,,,,,,,,,,DATAREST-354,,,,,,,,,,,,,,,,2015-02-06 00:22:42.687,42025,issuemaster(issuemaster),,"0|i07ai7:",42574,41727,,,,,,,,,,,,,,"04/Mar/14 6:38 AM;springuser007;Any comments/updates on this request? This is a significant feature for our use case.","06/Feb/15 12:22 AM;olivergierke;Let's continue the discussion in DATAREST-354.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#627|https://github.com/spring-projects/spring-data-rest/issues/627]. ",,,,,,,,,,,,,,,,,,,,,
Spring Data REST 2.0.0.RC1 artifacts missing in the milestone repository,DATAREST-241,55469,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Works as Designed,olivergierke,arekczarnik,arekczarnik,04/Feb/14 1:03 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,04/Feb/14 2:31 AM,2.0 RC1 (Codd),,,,,,,,,,,0,,,,,"Hi *,

the ""offical"" repository of spring data 2.0.0.RC1 still emtpy.

http://repo.spring.io/libs-milestone/org/springframework/data/spring-data-rest/2.0.0.RC1/ 

is any reason for that ?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-02-04 02:31:01.011,41946,issuemaster(issuemaster),,"0|i079vr:",42473,41648,,,,,,,,,,,,,,"04/Feb/14 2:31 AM;olivergierke;Yes. The reason that is, is that we don't ship a {{spring-data-rest}} artifact anymore to avoid the impression that this is the artifact you have to pull in to your project to work with it (which it never was).

I already updated the [website|http://projects.spring.io/spring-data-rest/] on that and now also fixed the link in the announcement, which I suspect was puzzling you. Thanks for the report!","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#624|https://github.com/spring-projects/spring-data-rest/issues/624]. ",,,,,,,,,,,,,,,,,,,,,,
Accessing a One-To-Many relationship causes NullPointerException,DATAREST-240,55432,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Works as Designed,olivergierke,mwilmes,mwilmes,31/Jan/14 7:56 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,24/Feb/14 4:39 AM,2.0 RC1 (Codd),,,,,,,,,,,0,,,,,"After upgrade from 2.0.SNAPSHOT (20.12.2013) to 2.0.RC1 SDR fails on trying to follow 1:n relationships.

Let's have this entity here. The aircraft has 1 Bcs entity but 4 Bcap entities:

{code}
{
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/api/aircrafts/2""
    },
    ""bcsRel"" : {
      ""href"" : ""http://localhost:8080/api/aircrafts/2/bcsRel""
    },
    ""bcapRels"" : {
      ""href"" : ""http://localhost:8080/api/aircrafts/2/bcapRels""
    },
    ""aircraftType"" : {
      ""href"" : ""http://localhost:8080/api/aircrafts/2/aircraftType""
    }
  },
  ""seatPlan"" : null,
  ""lastSyncDate"" : null,
  ""type"" : ""Aircraft"",
  ""dateLastModified"" : null
  ""lastKnownPosLongitude"" : 0,
  ""numberOfSeatsTotal"" : 0,
  ""model"" : null,
  ""serial"" : null,
  ""author"" : null,
  ""icao24"" : null,
  ""serialNumber"" : 0,
  ""lastKnownPosLatitude"" : 0,
  ""registration"" : ""AB-CDE"",
  ""cmdbid"" : ""NONE"",
  ""name"" : ""AB-CDE"",
  ""uuid"" : ""cde67ed5-9b66-4edb-adf6-67f0f7d76bbc"",
  ""notes"" : null
}
{code}

Following the BcsRel link with GET is just fine but as you try to follow the BcapRels you get HTTP 500 with the following exception thrown:

{code}
2014-01-31 16:50:16.265:WARN:oejs.ServletHandler:/api/aircrafts/2/bcapRels
java.lang.NullPointerException
	at org.springframework.data.rest.webmvc.ResourceProcessorHandlerMethodReturnValueHandler.handleReturnValue(ResourceProcessorHandlerMethodReturnValueHandler.java:161)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:71)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:122)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:749)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:690)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:945)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:876)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:852)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:735)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:848)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:669)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1448)
	at net.bull.javamelody.MonitoringFilter.doFilter(MonitoringFilter.java:163)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
	at com.github.dandelion.datatables.core.web.filter.DatatablesFilter.doFilter(DatatablesFilter.java:73)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1428)
	at net.bull.javamelody.MonitoringFilter.doFilter(MonitoringFilter.java:206)
	at net.bull.javamelody.MonitoringFilter.doFilter(MonitoringFilter.java:179)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:201)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:183)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
	at com.github.dandelion.datatables.extras.servlet2.filter.DatatablesFilter.doFilter(DatatablesFilter.java:71)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:455)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:557)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)
	at org.eclipse.jetty.server.handler.ContextHandler.__doHandle(ContextHandler.java:1075)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:384)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1009)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
	at org.eclipse.jetty.server.Server.handle(Server.java:368)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:488)
	at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:932)
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:994)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:640)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
	at java.lang.Thread.run(Thread.java:744)
{code}

Definitions in the Aircraft POJO:

{code}
	@Fetch
	@RelatedToVia(type=""CONTAINS_BCAP"")
	private Set<AircraftBcapRelationship> bcapRels;
	
	@Fetch
	@RelatedToVia(type=""CONTAINS_BCS"")
	private AircraftBcsRelationship bcsRel;
{code}

The relationship entities:

{code}
@RelationshipEntity
public class AircraftBcsRelationship extends AbstractRelationship {
	
	@StartNode
	private Aircraft aircraft;
	
	@Fetch
	@EndNode
	private Bcs bcs;
{code}

{code}
@RelationshipEntity
public class AircraftBcapRelationship extends AbstractRelationship {
	
	@StartNode
	private Aircraft aircraft;
	
	@Fetch
	@EndNode
	private Bcap bcap;
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-02-03 05:23:18.24,41909,issuemaster(issuemaster),,"0|i079pb:",42444,41611,,,,,,,,,,,,,,"03/Feb/14 5:11 AM;mwilmes;Seems like this is the same NPE problem as described in DATAREST-198 except that it seems not solved with RC1 and seems not appearing in 2.0.SNAPSHOT (20.12.2013) or earlier.","03/Feb/14 5:23 AM;olivergierke;[~mwilmes] provided the following dependency graph:

{noformat}

[INFO] +- org.springframework.data:spring-data-commons:jar:1.7.0.RC1:compile 
[INFO] | +- (org.springframework:spring-core:jar:3.2.7.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | +- (org.springframework:spring-beans:jar:3.2.7.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | +- (org.slf4j:slf4j-api:jar:1.7.1:compile - omitted for conflict with 1.7.5) 
[INFO] | \- (org.slf4j:jcl-over-slf4j:jar:1.7.1:runtime - omitted for conflict with 1.6.1) 
[INFO] +- org.springframework.data:spring-data-rest-webmvc:jar:2.0.0.RC1:compile 
[INFO] | +- org.springframework.data:spring-data-rest-core:jar:2.0.0.RC1:compile 
[INFO] | | +- (org.springframework:spring-tx:jar:3.2.7.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | | +- org.springframework.hateoas:spring-hateoas:jar:0.9.0.RELEASE:compile 
[INFO] | | | +- (org.springframework:spring-aop:jar:3.2.7.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | | | +- (org.springframework:spring-beans:jar:3.2.7.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | | | +- (org.springframework:spring-context:jar:3.2.7.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | | | +- (org.springframework:spring-core:jar:3.2.7.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | | | +- (org.springframework:spring-web:jar:3.2.7.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | | | +- (org.springframework:spring-webmvc:jar:3.2.7.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | | | +- org.objenesis:objenesis:jar:1.3:compile 
[INFO] | | | \- (org.slf4j:slf4j-api:jar:1.7.5:compile - omitted for duplicate) 
[INFO] | | +- (org.springframework.data:spring-data-commons:jar:1.7.0.RC1:compile - omitted for duplicate) 
[INFO] | | +- org.springframework.plugin:spring-plugin-core:jar:1.0.0.RELEASE:compile 
[INFO] | | | +- (org.springframework:spring-beans:jar:3.2.7.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | | | +- (org.springframework:spring-context:jar:3.2.7.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | | | +- (org.springframework:spring-aop:jar:3.2.7.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | | | \- (org.slf4j:slf4j-api:jar:1.7.5:compile - omitted for duplicate) 
[INFO] | | +- org.atteo:evo-inflector:jar:1.0.1:compile 
[INFO] | | +- (org.slf4j:slf4j-api:jar:1.7.1:compile - omitted for conflict with 1.7.5) 
[INFO] | | \- (org.slf4j:jcl-over-slf4j:jar:1.7.1:runtime - omitted for conflict with 1.6.1) 
[INFO] | +- (org.springframework:spring-webmvc:jar:3.2.7.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | +- (com.fasterxml.jackson.core:jackson-databind:jar:2.3.0:compile - omitted for duplicate) 
[INFO] | +- (org.slf4j:slf4j-api:jar:1.7.1:compile - omitted for conflict with 1.7.5) 
[INFO] | \- (org.slf4j:jcl-over-slf4j:jar:1.7.1:runtime - omitted for conflict with 1.6.1) 
[INFO] +- org.springframework.data:spring-data-neo4j:jar:2.3.3.RELEASE:compile 
[INFO] | +- (org.springframework:spring-tx:jar:3.1.4.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | +- (org.springframework:spring-context:jar:3.1.4.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | +- (org.springframework:spring-beans:jar:3.1.4.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | +- org.springframework:spring-aspects:jar:3.1.4.RELEASE:compile 
[INFO] | | +- (org.springframework:spring-beans:jar:3.1.4.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | | +- (org.springframework:spring-context:jar:3.1.4.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | | \- org.springframework:spring-context-support:jar:3.1.4.RELEASE:compile 
[INFO] | | +- (org.springframework:spring-beans:jar:3.1.4.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | | +- (org.springframework:spring-context:jar:3.1.4.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
[INFO] | | \- (org.springframework:spring-core:jar:3.1.4.RELEASE:compile - omitted for conflict with 4.0.1.RELEASE) 
{noformat}","03/Feb/14 5:47 AM;olivergierke;It indeed feels very related to DATAREST-198. However, the test case introduced in [this commit|https://github.com/spring-projects/spring-data-rest/commit/b3a03ea8326b4bca4f0655bcf4f64784d4a7f594] previously failed due to a change in {{GenericTypeResolver}} in Spring 4. This was mitigated by DATACMNS-422 which was released in Spring Data Commons 1.7 RC1.

Your dependency dump has a few suspicious areas but none of them seem to be related to the issue here:

- Make sure you use Spring Data Neo4j 3.0.0.RC1 instead of 2.3.3 (could be this is pulling in the older version of Spring Data Commons but your dependency report doesn't show that)
- The Slf4j dependencies probably should be of consistent version (you pull 1.7.5 and 1.6.1)

Any chance you provide a slimmed down test case, showing the request to fail on the just released versions?","04/Feb/14 8:00 AM;mwilmes;No bug. Solved. DATAREST-130 changed the handling of NULL values with PUT (which is actually a good thing). However our application had registered a custom ApplicationEventListener for similar purpose and that was now causing NPEs.","24/Feb/14 4:34 AM;faisalferoz;I was getting the same issue. Works fine in the latest BUILD-SNAPSHOT of spring-data-rest.","24/Feb/14 4:39 AM;olivergierke;Great to hear, Faisal! :)","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#623|https://github.com/spring-projects/spring-data-rest/issues/623]. ",,,,,,,,,,,,,,,,,
"2.0.RC1 breaks root controller (""/""). HAL-browser and the likes fail.",DATAREST-239,55430,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Works as Designed,olivergierke,mwilmes,mwilmes,31/Jan/14 7:37 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,23/Feb/14 9:05 AM,2.0 RC1 (Codd),,,,,,,,,,,3,,,,,"After upgrade from 2.0.SNAPSHOT (20.12.2013) to 2.0.RC1 the root controller (""/"") or ""starting"" point of the API is broken and fails with HTTP 500. Expected behaviour is a list of all exposed rest endpoints. Client application that start at the root level of the API fail (e.g. http://github.com/mikekelly/hal-browser). The following exception is thrown:

{code}
2014-01-31 16:38:27.111:WARN:oejs.ServletHandler:/api/
java.lang.NoSuchMethodError: org.springframework.data.repository.core.RepositoryMetadata.isPagingRepository()Z
	at org.springframework.data.rest.core.mapping.RepositoryCollectionResourceMapping.isPagingResource(RepositoryCollectionResourceMapping.java:173)
	at org.springframework.data.rest.core.mapping.RepositoryAwareResourceInformation.isPagingResource(RepositoryAwareResourceInformation.java:151)
	at org.springframework.data.rest.webmvc.support.RepositoryEntityLinks.linkToCollectionResource(RepositoryEntityLinks.java:109)
	at org.springframework.hateoas.core.DelegatingEntityLinks.linkToCollectionResource(DelegatingEntityLinks.java:69)
	at org.springframework.data.rest.webmvc.RepositoryController.listRepositories(RepositoryController.java:66)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:214)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:749)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:690)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:945)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:876)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:852)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:735)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:848)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:669)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1448)
	at net.bull.javamelody.MonitoringFilter.doFilter(MonitoringFilter.java:163)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
	at com.github.dandelion.datatables.core.web.filter.DatatablesFilter.doFilter(DatatablesFilter.java:73)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1428)
	at net.bull.javamelody.MonitoringFilter.doFilter(MonitoringFilter.java:206)
	at net.bull.javamelody.MonitoringFilter.doFilter(MonitoringFilter.java:179)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:201)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:183)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
	at com.github.dandelion.datatables.extras.servlet2.filter.DatatablesFilter.doFilter(DatatablesFilter.java:71)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:455)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:557)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)
	at org.eclipse.jetty.server.handler.ContextHandler.__doHandle(ContextHandler.java:1075)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:384)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1009)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
	at org.eclipse.jetty.server.Server.handle(Server.java:368)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:488)
	at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:932)
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:994)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:640)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
	at java.lang.Thread.run(Thread.java:744)
{code}","[INFO] +- org.springframework.data:spring-data-neo4j:jar:2.3.3.RELEASE:compile
[INFO] |  +- org.springframework:spring-aspects:jar:3.1.4.RELEASE:compile
[INFO] |  |  \- org.springframework:spring-context-support:jar:3.1.4.RELEASE:compile
[INFO] |  +- org.neo4j:neo4j-cypher-dsl:jar:1.9:compile
[INFO] |  \- org.neo4j:neo4j:jar:1.9.3:compile
[INFO] +- org.springframework.data:spring-data-rest-webmvc:jar:2.0.0.RC1:compile
[INFO] |  \- org.springframework.data:spring-data-rest-core:jar:2.0.0.RC1:compile
[INFO] |     +- org.springframework.hateoas:spring-hateoas:jar:0.9.0.RELEASE:compile
[INFO] |     |  \- org.objenesis:objenesis:jar:1.3:compile
[INFO] |     +- org.springframework.plugin:spring-plugin-core:jar:1.0.0.RELEASE:compile
[INFO] |     \- org.atteo:evo-inflector:jar:1.0.1:compile
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-02-12 09:29:36.666,41907,issuemaster(issuemaster),,"0|i079ov:",42442,41609,,,,,,,,,,,,,,"12/Feb/14 9:29 AM;digitaljoel;I got around this by updating my explicit dependency on spring-data-commons to 1.7.0.RC1","13/Feb/14 12:59 AM;mwilmes;Yes, that's what I also did now. SDCommons dependency was held down by Neo4j to milestone release whereas SDR needs RC1. After explicit declaring RC1 dependency this issue is solved and SDN 2.3.3 still works flawless.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#622|https://github.com/spring-projects/spring-data-rest/issues/622]. ",,,,,,,,,,,,,,,,,,,,,
PUT on entity with self links causes changes to be overwritten with old values,DATAREST-238,55396,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,gregturn,tfnico,tfnico,30/Jan/14 6:00 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,13/Feb/14 3:24 AM,2.0 M1 (Codd),,,,2.0 GA (Codd),,,,Content negotiation,,,0,,,,,"When PUTting the following JSON (a ""Workload"" entity):
{noformat}
{
  ""version"" : 1,
  ""weight"" : 123,
  ""handlingMinutes"" : 2,
  ""articleCount"" : 3,
  ""address"" : {
    ""line1"" : null,
    ""line2"" : null,
    ""line3"" : null,
    ""postCode"" : ""53123"",
    ""city"" : ""Bonn          "",
    ""countryCode"" : null,
    ""street"" : ""Bonner Bonnweg"",
    ""houseNumber"" : ""125""
  },
  ""links"" : [ {
    ""rel"" : ""self"",
    ""href"" : ""http://127.0.0.1:8000/api/workloadDao/1060""
  }, {
    ""rel"" : ""area"",
    ""href"" : ""http://127.0.0.1:8000/api/workloadDao/1060/area""
  }, {
    ""rel"" : ""product"",
    ""href"" : ""http://127.0.0.1:8000/api/workloadDao/1060/product""
  } ]
}
{noformat}

.. the incoming JSON is converted all fine and well, until it runs into the links/rel/self/href thing, and hits this line: [1]

This causes the converted Workload entity from the PUT call to be overwritten with the old values. End-effect: A PUT looks like it is successful, but no changes are stored.

[1] https://github.com/spring-projects/spring-data-rest/blob/2.0.0.M1/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/json/PersistentEntityJackson2Module.java#L135
","OS X, JDK 1.7, PostgreSQL with JPA/EclipseLink
spring-version: 3.2.6.RELEASE
spring-data-jpa-version:1.3.4.RELEASE
spring-data-rest-version: 2.0.0.M1
eclipselink-version: 2.5.1",,,,,,,,,,,DATAREST-143,,,,,,,,,,,,,,,,,,,,2014-01-31 10:27:52.408,41873,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/130,"0|i004u7:",791,41575,https://gist.github.com/tfnico/37d24e841e63af2397ee,,43 - Babbage SR3,,,,,,,,,,,"31/Jan/14 10:27 AM;nickweedon;Its interesting that this happens. I was reworking the code in that area (in a private fork of SDR) and I couldn't make sense of the code I saw. I figured that this bug that you see would be the result. 

I am just in the process of adding unit tests for a fix that will address this issue (as well as allowing Jackson annotations to be 100% compatible with SDR). 

Once i submit the pull request, it might take some time for the fix to be reviewed though since I know that the SDR developers are pretty swamped with features and issues at the moment.

Assuming we are not both somehow mistaken, its good to know I wasn't going crazy by thinking that the existing code was a bit broken in this area :)","03/Feb/14 9:26 AM;gregturn;I've tracked down the issue. Essentially, I had to cut out that deserializer. Deserializing a JSON object should simply ignore the _links given that they are read only data and the default deserializers can do it with an adjustment to the configuration.","03/Feb/14 9:48 AM;gregturn;Fix for this issue","03/Feb/14 5:43 PM;nickweedon;I actually already have a fix for this, only my fix actually does not ignore the _links section, instead, the linked associations are included in the deserialized object. 

The self link is a special case and the ID is extracted from the self link and used as the id field of the object (an exception is thrown if an ID is already provided). This is consistent with the GET behavior since the self link can be used as the ID in this case.

The way that my deserializer works is as follows:
1. Create a token buffer
2. Recursively parse the incoming request using JsonParser 
3. Add all non '_links' tokens to the token buffer.
4. Convert _links entries into json token format (using existing code to locate the correct repository and call findOne) and add to the token buffer as json tokens.
5. Take the token buffer and deserialize this as a regular JSON object. This allows all Jackson annotations in the domain class to still be honored.

This recursive parser works with link arrays and _links sections within inlined objects.

For the serializer side, I have also performed changes (i won't go into detail here) to allow the Jackson annotations in the domain class to be honored when serializing. 

I should hopefully have it submitted today, I am just finishing off some unit tests.
","04/Feb/14 4:57 AM;nickweedon;Here is the fix i mentioned (https://github.com/spring-projects/spring-data-rest/pull/133).
Note that this uses the 'draft-kelly-json-hal-06' IETF draft Hal style (the style that appears to be used in GETs in the latest SDR release).
","04/Feb/14 5:04 AM;tfnico;@Nick Do you want me to build/test on that PR?","04/Feb/14 5:12 AM;nickweedon;You certainly can be but beware that it has not yet been reviewed by the SDR developers and so it may not make it into a release. 

I am basically just putting forward a proposed 'fix'. 

As long as you are potentially prepared to repatch with these changes then go for it. Otherwise I would wait until it gets reviewed.","04/Feb/14 8:31 AM;gregturn;Thanks @Nick for your effort.

The fix I have attached in a link above in a separate PR basically ignores the _links attribute when doing any sort of an update. That allows the update to focus purely on the data structure. This also has the beneficial side effect that it doesn't matter if its called _links, links, _foobar, or whatever. Any attributes that we add on when rendering the JSON that are additive are essentially ignored when you turn around and push it back to update/replace the attribute. And since we can glean id numbers and or property name based on URIs, we don't really need to fetch such URI components from the _links section.

If there are other parts of PR 133 that needs to be evaluated, can you comment on their respective JIRA issues so we don't lose track of that?","04/Feb/14 9:44 AM;nickweedon;Oliver has kindly explained to me the reasons behind moving away from processing the _links sections, particularly in the area of updating existing relations. Understanding this now, i can see why you ignore the _links section.

I have gone through the Jira issues and commented on those that i believe my fix is applicable to. You can now of course ignore my comments on Jira issues that relate to _links processing.

The focus of my change was supposed to be focused on allowing JSON serialization and deserialzation to work without ignoring Jackson annotations on the domain class. I kind of got a bit side tracked on the _links functionality when I saw some existing behaviour there. My fix does still address Jackson annotations however. I believe that the fix you have made will also allow Jackson annotations to work since the entire domain object will now be processed by the default jackson deserializer. 

I would recommend against ignoring all unknown data fields however since silent failure can have dire consequences, particularly when dealing with data. Consider the case where a REST client is updated with a new data field but the REST server has not been updated. In such a case data will be lost if this new field is ignored and it is better to reject such a request with a http error. Ignoring known decorative fields such as a _links 'self' field is safe because the intent of the update is still understood. By ignoring all fields on the other hand, there is an opportunity for data corruption to occur.   


","04/Feb/14 1:48 PM;gregturn;@nick

I took your advice. Check PR 130 and see how I replaced ignoring ALL unknowns with a handler to only ignore _links.","04/Feb/14 6:59 PM;nickweedon;That looks good. Looks like a nice clean fix for the issue at hand. 

Thinking forward on this issue (and what I am about to say really belongs in a different but related ticket), i am wondering why the _links field was previously being ignored instead of allowing an error to occur? Is that for reasons of backwards compatibility or some Hal client perhaps?
I would think that if anything other than a 'self' link is provided then the result would probably not be what the REST client expected. Maybe a 'developer friendly' exception should be raised in such a case, explaining that Hal fields are not support in POSTs/PUTs?

Anyhow, like I said, these thoughts probably belong in another ticket. I think your fix addresses the issue well.","12/Feb/14 7:45 AM;olivergierke;The PR generally looks good to me. I'd vote to simply ignore all unknown properties for now as a dedicated ignoring has to be media type specific ({{_links}} might be a perfectly valid property in non-HAL representations), which we currently cannot take into account.

Also, in a REST model, *the server* drives the interaction and defines which data it will accept. Hence the client being ""newer"" than the server is a pretty uncommon (if not disallowed) scenario.","13/Feb/14 1:44 AM;nickweedon;Looking at the old code again, it actually looks like the code was in fact previously ignoring all fields already. The funny thing is that the checks that are done to see if the property name is ""links"" or ""rel"" are completely redundant since the field is ignored if there is no persistent property of this name. In fact the only time that the if(""links"".equals) would even execute would be in the case where you actually have a persistent property named links??? I think that this broken code tricked me into thinking that it was only ignoring these fields.

Anyhow, that aside, given that this was the previous behavior, I agree that it is better to maintain this behavior since changing it does not relate to this ticket. I therefore apologize for the bum steer (Australian expression :] ).

For any final/releasable version however, my advice still holds. Although you mention that the client being ""newer"" than the server is pretty uncommon, in my experience this has happened quite frequently. The situation often rears its ugly head when you have a server product that acts as a client to another server, particularly in large enterprise systems that span multiple time zones and that are therefore often governed by different groups of people. In such a setting it is quite frequent that one group will upgrade to a newer version of the product before another group and in a totally chaotic and haphazard manner :) It is also quite frequent in the case of rolling upgrades when dealing with high availability (i.e. 24/7) servers where the servers are exchanging information between one another (such as when replicating data through REST due to the servers using heterogeneous data storage, for instance one being integrated into Active Directory via LDAP and the other using an Oracle database).

There are also various permutations of this problem involving new or removed fields emerging in new client or server versions of a product.

When dealing with data corruption, particularly when the victim is a large international company such as HSBC or Deutsche Bank for instance (i.e. one that can bend you over with a large gang of lawyers), telling them that it is a disallowed scenario doesn't really help anyone. Data corruption is the worst kind of bug and it should be avoided at all costs, even if the situation is uncommon.

Sorry for the large sermon but I just wanted to elaborate on some of the kind of scenarios where this can occur.
","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#621|https://github.com/spring-projects/spring-data-rest/issues/621]. ",,,,,,,,,,
No pagingination metadata in response when executing a query method,DATAREST-225,55217,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Works as Designed,olivergierke,jhiemer,jhiemer,20/Jan/14 1:58 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,20/Jan/14 4:42 AM,2.0 M1 (Codd),,,,,,,,Repositories,,,0,,,,,"When I try to load entities via {{http://localhost:8080/web/countries/search/findByContinentCode?code=EU}}. The response should have a paging section in the response, due to the fact that the repository implements {{Pageable}} and has {{Pageable}} in the query configuration:

{code:java}
List<Country> findByContinentCode(@Param(""code"") String continentCode, Pageable pageable);
{code}

And my default page-size is 15, which would not fit into one single response. 
Output:

{code:javascript}
{
    ""links"": [ ],
    ""content"": [
        {
            ""links"": [
                {
                    ""rel"": ""self"",
                    ""href"": ""http://localhost:8080/web/countries/AX""
                }
            ],
            ""continentCode"": ""EU"",
            ""name"": ""Åland Islands"",
            ""iso3"": ""ALA"",
            ""number"": 248,
            ""fullName"": ""Åland Islands""
        },
        .....
        {
            ""links"": [
                {
                    ""rel"": ""self"",
                    ""href"": ""http://localhost:8080/web/countries/VA""
                }
            ],
            ""continentCode"": ""EU"",
            ""name"": ""Holy See (Vatican City State)"",
            ""iso3"": ""VAT"",
            ""number"": 336,
            ""fullName"": ""Holy See (Vatican City State)""
        }
    ]
}
{code}",All.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-01-20 02:20:27.066,41697,issuemaster(issuemaster),,"0|i078tj:",42301,41399,,,,,,,,,,,,,,"20/Jan/14 2:20 AM;olivergierke;This works as expected. By deciding to use {{List}} as the return type for your query method, you explicitly decide not to calculate any pagination information in the first place. Thus, on the controller level, there's no way to add any pagination meta-data to the response.

Change your repository method to return a {{Page}} and you should see the expected results.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#610|https://github.com/spring-projects/spring-data-rest/issues/610]. ",,,,,,,,,,,,,,,,,,,,,,
Path.matches(…) should escape reference before trying to match it,DATAREST-222,55185,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,17/Jan/14 4:18 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,24/Jan/14 8:42 AM,2.0 M1 (Codd),,,,2.0 RC1 (Codd),,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:36.449,41665,issuemaster(issuemaster),,"0|i005sn:",949,41367,,,42 - 2014 Kickoff,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#591|https://github.com/spring-projects/spring-data-rest/issues/591]. ",,,,,,,,,,,,,,,,,,,,,,,
Crud or PagingAndSorting based repository entites still listed when findAll method is 'exported = false',DATAREST-217,52649,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,nickweedon,nickweedon,12/Jan/14 10:33 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,14/Feb/14 1:39 AM,2.0 M1 (Codd),,,,2.0 GA (Codd),,,,,,,0,,,,,"When a {{@RestResource(exported = false)}} annotation is placed against the appropriate (highest level of functionality) {{findAll(…)}} method, all entities are still shown in the REST JSON response.

Example:
{code:java}
@Override
@RestResource(exported = false)
Page<Person> findAll(Pageable pageable);
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-01-12 23:30:45.753,39129,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/125,"0|i07a6n:",42522,38831,,,43 - Babbage SR3,,,,,,,,,,,"12/Jan/14 11:04 PM;nickweedon;Fixed in https://github.com/spring-projects/spring-data-rest/pull/123

Fixed issue where all entities were still being shown when the 'findAll' method is explicitly not exported. The RepositoryEntityController#listEntities now checks to see if the method is exposed and returns an empty object array if it is not. This is a more appropriate place for this behavior than the ReflectionRepositoryInvoker since this is a REST presentation issue.","12/Jan/14 11:30 PM;olivergierke;I like that part of the pull request and it totally makes sense to already check that stuff in the controller. Care to extract the changes into a new pull request and add some test cases to it? Wouldn't mind to move that stuff into a more focused change myself as well. Just let me know :).","13/Jan/14 7:57 PM;nickweedon;Hi Oliver, this change is now in a separate pull request: 
https://github.com/spring-projects/spring-data-rest/pull/125

The pull request includes both the fix implementation and the test case.","15/Jan/14 2:02 AM;nickweedon;Now updated the pull request commit to conform to the spring data contribution guidelines.","26/Jan/14 11:28 PM;nickweedon;Rebased to current upstream master HEAD and re-ran unit tests","14/Feb/14 1:39 AM;olivergierke;That should be resolved now. I've done some significant refactoring to the way the supported HTTP methods for resources are detected, see the commit comment for details.

We now return {{405 Method Not Allowed}} if {{findAll(…)}} is not exported.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#602|https://github.com/spring-projects/spring-data-rest/issues/602]. ",,,,,,,,,,,,,,,,,
AOP proxying does not work for findOne(ID) method,DATAREST-216,52648,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,nickweedon,nickweedon,12/Jan/14 10:22 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,13/Feb/14 1:31 AM,2.0 M1 (Codd),2.0 RC1 (Codd),,,2.0 GA (Codd),,,,,,,0,,,,,"When attempting to apply AOP proxying to an overriden findOne(ID) method, the proxied method is not called.

Example:
{code:borderStyle=solid}
@Override
@PreAuthorize(""hasAuthority('ROLE_ADMIN')"")
PurchaseOrder findOne(PurchaseOrderPK pk);
{code}

The problem is due to the base class 'findOne(Serializable id)' method being called instead of the more specific, covariant version.

Although the obvious solution is to simply override the 'findOne(Serializable id)' method and place an annotation on in it instead, this does not completely solve the issue. There are cases where it is desirable to overload the more specific version such as when one is using a spEL expression in an annotation and referring to a composite key, for example:

{code:borderStyle=solid}
@Override
@PreAuthorize(""#pk.getUserId() == authentication.id"")
PurchaseOrder findOne(@Param(""pk"") PurchaseOrderPK pk);
{code}

The issue is specific to CrudRepository and PagingAndSortingRepository derived repositories.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-01-12 23:11:25.158,39128,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/126,"0|i07a6f:",42521,38830,,,43 - Babbage SR3,,,,,,,,,,,"12/Jan/14 11:03 PM;nickweedon;Fixed in - https://github.com/spring-projects/spring-data-rest/pull/123

Removed CrudRepositoryInvoker#invokeFindOne(Serializable id) method override as this will cause the findOne(Serializable id) method to be called instead of any existing, more specific methods. This in turn bypasses any AOP proxying of the more specific method.","12/Jan/14 11:11 PM;olivergierke;Is there any chance you provide a simple test case for this. There are a few aspects, that keep me puzzled:

The method we choose for {{findOne(…)}} operations *is* the most specific one (see the according [test case|https://github.com/spring-projects/spring-data-commons/blob/master/src/test/java/org/springframework/data/repository/core/support/DefaultCrudMethodsUnitTests.java#L107] in Spring Data Commons).

{quote}
… the obvious solution is to simply override the 'findOne(Serializable id)' method and place an annotation on in it instead, …
{quote}

This is not so obvious to me, as it wouldn't compile.","12/Jan/14 11:36 PM;nickweedon;Good point, I will look at adding a unit test for this.

My bad on the point of the serializable method. the 'serializable' findOne method would compile but it would not override the method as intended. I had seen this method signature via inspecting the repository methods through reflection. I had not realized that it is actually a product of generics 'erasure'.
In any event, my point was merely that this is not the correct path to a solution (you have obviously now made this point further evident :D ).

In the meantime (before i add a unit test), if you look at CrudRepositoryInvoker (before my modification) you will see that it is directly calling findOne(Serializable) on the crud repository. If you look at the available methods of this object (by using reflection) you can see that there are actually two findOne methods. One has the signature findOne(Serializable) and the other findOne(PurchaseOrderPK) (for instance). If the findOne(Serializable) method is called then the AOP proxy method is bypassed (in my case, i had placed a Spring security '@PreAuthorization' annotation on the findOne(PurchaseOrderPK) method).

The ReflectionRepositoryInvoker class actually calls the correct method as the correct lookup is performed in spring-data-commons 'DefaultCrudMethods' class. The method override in CrudRepositoryInvoker breaks this behavior.
","14/Jan/14 12:56 AM;nickweedon;Below is the new pull request, including only the fix and unit test for this specific issue:
https://github.com/spring-projects/spring-data-rest/pull/126

The unit test demonstrates the issue and it will fail without the fix that is also provided in the pull request.","14/Jan/14 1:07 AM;nickweedon;Let me know if there is anything more that is required. 

I think that this is an important fix as it is the only thing preventing spring data rest from being able to be properly used with authorization (e.g. only allow a user to see his own data by checking the user_id portion of a composite key).

I am therefore very keen to have this fix accepted.","15/Jan/14 2:01 AM;nickweedon;Now updated the pull request commit to conform to the spring data contribution guidelines.","26/Jan/14 11:26 PM;nickweedon;Rebased to current upstream master HEAD and re-ran unit tests","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#601|https://github.com/spring-projects/spring-data-rest/issues/601]. ",,,,,,,,,,,,,,,,
Make old presentation available for smooth migration to HAL,DATAREST-213,52500,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,jhiemer,jhiemer,27/Dec/13 6:36 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,29/Dec/13 11:34 AM,2.0 M1 (Codd),,,,2.0 RC1 (Codd),,,,,,,0,,,,,"For people using SD Rest a bit longer, the migration towards HAL could take some time. So I think there a many people, which would really appreciate the opportunity of a smooth migration by default enabling both, the old and the new representation.

That would help, to be able to get the bugfixes regarding SDF 4.0 and for example the previously filed sorting bug.",All.,,,,,,,,,,,,,,,,DATAREST-203,,,,,,,,,,,,,,,2013-12-28 06:21:20.076,38980,issuemaster(issuemaster),,"0|i06qvb:",39391,38682,,,Codd M1,,,,,,,,,,,"28/Dec/13 6:21 AM;olivergierke;I've just pushed a fix to put this in place. In the {{configureRepositoryRestConfiguration(…)}} callback, call {{setDefaultMediaType(…)}} to set it to {{MediaType.APPLICATION_JSON}}. This will cause the legacy {{HttpMessageConverter}} be registered *before* the HAL one so that you now only get HAL if you explicitly ask for {{application/hal+json}}.","28/Dec/13 7:22 AM;jhiemer;Perfect, works as expected, now I got some time to make a branch for the migration towards HAL.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#598|https://github.com/spring-projects/spring-data-rest/issues/598]. ",,,,,,,,,,,,,,,,,,,,,
ApplicationContext fails to load with HAL enabled snapshot,DATAREST-210,52475,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,mwilmes,mwilmes,20/Dec/13 7:35 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,20/Dec/13 11:00 AM,,,,,2.0 RC1 (Codd),,,,,,,0,,,,,"After upgrade to the newest HAL enabled snapshot (2013-12-20) the application context fails to load despite all dependencies present (Spring 3.2.6, Jackson 2.3.0, Spring-Hateoas-0.9.0).

{code}
java.lang.IllegalStateException: Failed to load ApplicationContext
...
Caused by: java.lang.NullPointerException
	at org.springframework.hateoas.config.HypermediaSupportBeanDefinitionRegistrar.registerBeanDefinitions(HypermediaSupportBeanDefinitionRegistrar.java:99)
	at org.springframework.context.annotation.ConfigurationClassParser.processImport(ConfigurationClassParser.java:396)
{code}

{code}
+- org.springframework.data:spring-data-rest-webmvc:jar:2.0.0.BUILD-SNAPSHOT:compile
[INFO] |  +- com.fasterxml.jackson.datatype:jackson-datatype-joda:jar:2.3.0:compile
[INFO] |  \- org.springframework.data:spring-data-rest-core:jar:2.0.0.BUILD-SNAPSHOT:compile
[INFO] |     +- cglib:cglib-nodep:jar:2.2.2:runtime
[INFO] |     +- org.springframework.hateoas:spring-hateoas:jar:0.9.0.BUILD-SNAPSHOT:compile
[INFO] |     |  \- org.objenesis:objenesis:jar:1.3:compile
[INFO] |     +- org.springframework.plugin:spring-plugin-core:jar:0.8.0.RELEASE:compile
[INFO] |     \- org.atteo:evo-inflector:jar:1.0.1:compile
{code}

I do inherit from RepositoryRestMvcConfiguration. It is unclear on whether this contributes to the issue.

{code}
@Configuration
public class BcRepositoryRestMvcConfiguration extends RepositoryRestMvcConfiguration {

        @Bean
        public ResourceProcessor<RepositoryLinksResource> rootLinksResourceProcessor() {
...
{code}",,,,,,,,,,,,,,,,,SPR-11251,,,,,,,,,,,,,,,2013-12-20 11:00:11.626,38955,issuemaster(issuemaster),,"0|i06sen:",39640,38657,https://github.com/spring-projects/spring-hateoas/issues/130,,,,,,,,,,,,,"20/Dec/13 11:00 AM;olivergierke;I just pushed a fix with a temporary workaround until the issue in Spring Framework is fixed. We now use a delegate configuration class to prevent the annotation evaluated against the wrong class in inheritance scenarios. So this should work fine against Spring 3.2.x *and* 4.0 now.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#594|https://github.com/spring-projects/spring-data-rest/issues/594]. ",,,,,,,,,,,,,,,,,,,,,,
Hard Dependency on Jackson-Hibernate,DATAREST-209,52442,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,daschl,daschl,18/Dec/13 2:26 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,29/Dec/13 11:41 AM,,,,,2.0 RC1 (Codd),,,,,,,0,,,,,"The library has a hard dependency on the jackson hibernate module, which is not good in environment where you do not want hibernate in the path (like using mongodb or couchbase).

As a workaround, excluding it is possible and the app still works:

{code:xml}
<dependency>
  <groupId>org.springframework.data</groupId>
  <artifactId>spring-data-rest-webmvc</artifactId>
  <version>2.0.0.M1</version>
  <exclusions>
    <exclusion>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-hibernate4</artifactId>
    </exclusion>
  </exclusions>
</dependency>
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:35.012,38922,issuemaster(issuemaster),,"0|i06qvj:",39392,38624,,,Codd M1,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#592|https://github.com/spring-projects/spring-data-rest/issues/592]. ",,,,,,,,,,,,,,,,,,,,,,,
Collection References not working with SF 4.0 due to generics changes,DATAREST-204,52359,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,jhiemer,jhiemer,13/Dec/13 5:35 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,18/Jan/14 9:02 AM,2.0 M1 (Codd),,,,,,,,,,,1,4.0,spring,,,"When calling an object relation like {{provider/3487T/services}}. The call fails with an NPE in {{ResourceProcessorHandlerMethodReturnValueHandler}}. The stacktrace is a follows: 

{noformat}
java.lang.NullPointerException
	org.springframework.data.rest.webmvc.ResourceProcessorHandlerMethodReturnValueHandler.handleReturnValue(ResourceProcessorHandlerMethodReturnValueHandler.java:161)
	org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:71)
	org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:122)
	org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:748)
	org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:689)
	org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83)
	org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:945)
	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:876)
	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:931)
	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:822)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:621)
	org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:807)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:728)
	com.thetransactioncompany.cors.CORSFilter.doFilter(Unknown Source)
	com.thetransactioncompany.cors.CORSFilter.doFilter(Unknown Source)
	org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal(OpenEntityManagerInViewFilter.java:177)
	org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108)
	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118)
	org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84)
	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113)
	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113)
	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54)
	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	de.cloudscale.security.filter.BaseAuthenticationTokenProcessingFilter.doFilter(BaseAuthenticationTokenProcessingFilter.java:86)
	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:183)
	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105)
	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87)
	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)
	org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192)
	org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160)
	org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344)
	org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261)
{noformat}

Error occurs in the following lines:

{code:java}
if (!elementTargetType.getType().equals(elementTypeInformation.getType())) {
  elementTargetType = elementTypeInformation;
}
{code}

as {{elementTargetType}} is {{null}}.
","Spring Framework 4.0
SD Rest 2.0M1
SD JPA 1.5M1
SD Commons 1.7M1",,,,,,,,,,,,,,,DATAREST-198,,,,,,DATAREST-181,,,,,,,,,,2020-12-31 10:29:34.432,38839,issuemaster(issuemaster),,"0|i005j3:",906,38541,,,Codd M1,42 - 2014 Kickoff,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#586|https://github.com/spring-projects/spring-data-rest/issues/586]. ",,,,,,,,,,,,,,,,,,,,,,,
Embedded associations do not get rendered,DATAREST-200,52176,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,04/Dec/13 12:38 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,04/Dec/13 10:53 PM,2.0 M1 (Codd),,,,2.0 RC1 (Codd),,,,,,,0,,,,,"{code:java}
class Order {

  Set<LineItems> lineItems;
}
{code}

If {{Order}} is repository managed but {{LineItems}} is not, the line items do not get rendered at all.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-01-13 12:29:24.697,38655,issuemaster(issuemaster),,"0|i06po7:",39197,38357,,,Codd M1,,,,,,,,,,,"13/Jan/14 12:29 PM;gregturn;Closed out redundant pull request https://github.com/spring-projects/spring-data-rest/pull/111.","13/Jan/14 12:30 PM;gregturn;Closed out this PR since it was already accomplished.","03/Feb/14 10:05 PM;nickweedon;I think this issue should be re-opened.

It seems that this issue still occurs on the master branch.
The only reason that the unit test passes is because there is a bug in 'assertHasJsonPathValue' where it always returns true.

The problem is that assertHasJsonPathValue method only checks to see that JsonPath.read returns an object. It does not check to see if the returned object is of type JSONArray and with a size of zero.","20/Feb/14 4:15 AM;faisalferoz;Yes this issue should be reopened - it occurs on 2.0.0.RC1 as well.","20/Feb/14 4:27 AM;faisalferoz;I have created DATAREST-250 to handle the issue.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#582|https://github.com/spring-projects/spring-data-rest/issues/582]. ",,,,,,,,,,,,,,,,,,
Collection/Object conversion broken in PersistentEntityJackson2Module,DATAREST-199,52174,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,jhiemer,jhiemer,04/Dec/13 11:52 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,04/Dec/13 10:53 PM,2.0 M1 (Codd),,,,2.0 RC1 (Codd),,,,,,,0,mapping,object,,,"I am trying to post to localhost:8080/credentials/
{
   ""customer"":{
      ""rel"":""self"",
      ""href"":""http://localhost:8080/web/customers/60""
   },
   ""credentialProperties"":[
      {
         ""name"":""Access Key"",
         ""value"":""123456""
      },
      {
         ""name"":""Secrect Access Key"",
         ""value"":""12344567""
      }
   ],
   ""name"":""12344567"",
   ""service"":{
      ""rel"":""self"",
      ""href"":""http://localhost:8080/web/services/50""
   },
   ""vendorType"":""1234567""
}

The according object looks like that:

@Entity
public class Credential extends AbstractEntity {
	
	private String name;
	
	private boolean disabled;
	
	private String disablingReason;
	
	private String vendorType;
	
	@ManyToOne
	@JoinColumn(name = ""customer_id"")
	private Customer customer;
		
	@JoinColumn(name = ""service_id"")
	private Service service;
	
	@OneToMany(mappedBy = ""credential"", fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	private Set<CredentialProperty> credentialProperties;
 
	@OneToOne(cascade = CascadeType.ALL)
    @PrimaryKeyJoinColumn
	private CredentialSettings credentialSettings;

And the Exception is as follows:
java.lang.IllegalArgumentException: argument type mismatch
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_45]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_45]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_45]
	at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_45]
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:191) ~[spring-core-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.data.mapping.model.BeanWrapper.setProperty(BeanWrapper.java:97) ~[spring-data-commons-1.7.0.M1.jar:na]
	at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$ResourceDeserializer.deserialize(PersistentEntityJackson2Module.java:241) ~[PersistentEntityJackson2Module$ResourceDeserializer.class:na]
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:2888) ~[jackson-databind-2.2.2.jar:2.2.2]
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2094) ~[jackson-databind-2.2.2.jar:2.2.2]
	at org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.readJavaType(MappingJackson2HttpMessageConverter.java:178) ~[spring-web-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.readInternal(MappingJackson2HttpMessageConverter.java:166) ~[spring-web-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.http.converter.AbstractHttpMessageConverter.read(AbstractHttpMessageConverter.java:153) ~[spring-web-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.data.rest.webmvc.PersistentEntityResourceHandlerMethodArgumentResolver.resolveArgument(PersistentEntityResourceHandlerMethodArgumentResolver.java:48) ~[spring-data-rest-webmvc-2.0.0.BUILD-SNAPSHOT.jar:na]
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77) ~[spring-web-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162) ~[spring-web-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:123) ~[spring-web-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) ~[spring-webmvc-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745) ~[spring-webmvc-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686) ~[spring-webmvc-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80) ~[spring-webmvc-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925) ~[spring-webmvc-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) ~[spring-webmvc-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936) [spring-webmvc-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:838) [spring-webmvc-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:647) [servlet-api.jar:na]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812) [spring-webmvc-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) [servlet-api.jar:na]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) [catalina.jar:7.0.39.B]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [catalina.jar:7.0.39.B]
	at com.thetransactioncompany.cors.CORSFilter.doFilter(Unknown Source) [cors-filter-1.5.jar:na]
	at com.thetransactioncompany.cors.CORSFilter.doFilter(Unknown Source) [cors-filter-1.5.jar:na]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) [catalina.jar:7.0.39.B]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [catalina.jar:7.0.39.B]
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal(OpenEntityManagerInViewFilter.java:180) [spring-orm-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) [catalina.jar:7.0.39.B]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [catalina.jar:7.0.39.B]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at de.cloudscale.security.filter.BaseAuthenticationTokenProcessingFilter.doFilter(BaseAuthenticationTokenProcessingFilter.java:86) [BaseAuthenticationTokenProcessingFilter.class:na]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:183) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:343) [spring-web-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:260) [spring-web-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) [catalina.jar:7.0.39.B]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [catalina.jar:7.0.39.B]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222) [catalina.jar:7.0.39.B]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123) [catalina.jar:7.0.39.B]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) [catalina.jar:7.0.39.B]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171) [catalina.jar:7.0.39.B]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99) [catalina.jar:7.0.39.B]
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:947) [catalina.jar:7.0.39.B]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) [catalina.jar:7.0.39.B]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408) [catalina.jar:7.0.39.B]
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1009) [tomcat-coyote.jar:7.0.39.B]
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589) [tomcat-coyote.jar:7.0.39.B]
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:312) [tomcat-coyote.jar:7.0.39.B]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_45]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_45]
	at java.lang.Thread.run(Thread.java:744) [na:1.7.0_45]

I guess the reason for that is as follows:

@SuppressWarnings(""unchecked"")
	private <S> S getPotentiallyConvertedValue(Object source, Class<S> targetType) {

		boolean conversionServiceAvailable = conversionService != null;
		boolean conversionNeeded = source == null || !targetType.isAssignableFrom(source.getClass());

		if (conversionServiceAvailable && conversionNeeded) {
			return conversionService.convert(source, targetType);
		}

		return (S) source;
	}

In BeanWrapper.java the NPE for conversion service is thrown. Maybe it is not autowired?",All.,,,,,,,,,,,,,,,DATAREST-188,,,,,,,,,,,,,,,,2013-12-04 22:53:11.317,38653,issuemaster(issuemaster),,"0|i06pof:",39198,38355,,,Codd M1,,,,,,,,,,,"04/Dec/13 10:53 PM;olivergierke;I couldn't really reproduce the issue, because I found it impossible to run into a case where the source collection actually is a different on from the target type (source: {{ArrayList}}, target: {{Set}}). The deserializer actually created the right collection type in the first place for me.

However, I've fixed the missing {{ConversionService}} and streamlined the collection creation process a bit. Added som test case. Feel free to play with the latest snapshots.","19/Dec/13 7:20 AM;mwilmes;I ran into the same issue working against Neo4j backed objects with Set<...> attributes. Can confirm it's fixed using

<spring.version>3.2.5.RELEASE</spring.version>
<spring-data-neo4j.version>2.3.3.RELEASE</spring-data-neo4j.version>
<spring-data-rest.version>2.0.0.BUILD-SNAPSHOT</spring-data-rest.version>
<spring-data-commons.version>1.7.0.M1</spring-data-commons.version>

Looking forward to having SDR in the release train at some point so that inter-dependencies match up easier between SD, SDR + SDN/.. .","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#581|https://github.com/spring-projects/spring-data-rest/issues/581]. ",,,,,,,,,,,,,,,,,,,,,
NullPointerException when accessing OneToMany Relationship,DATAREST-198,52156,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,andresdiegolanda@gmail.com,andresdiegolanda@gmail.com,04/Dec/13 6:20 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,20/Jan/14 3:22 AM,2.0 M1 (Codd),,,,2.0 RC1 (Codd),,,,,,,1,,,,,"I have a OneToMany relationship, when I try to access the elements of the collection using the link I get the following Exception: 

{noformat}
java.lang.NullPointerException
	at org.springframework.data.rest.webmvc.ResourceProcessorHandlerMethodReturnValueHandler.handleReturnValue(ResourceProcessorHandlerMethodReturnValueHandler.java:161)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:71)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:122)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:748)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:689)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:947)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:878)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:946)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:837)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:822)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:947)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1009)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:312)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)
{noformat}","jdk 1.7.0_45, Tomcat 7.0.39, Oracle 11.2.0.2",,,,,,,,,,DATACMNS-422,DATAREST-204,,,,,,,,,,DATAREST-181,,,,"28/Dec/13 2:39 PM;andresdiegolanda@gmail.com;Author.java;https://jira.spring.io/secure/attachment/21565/Author.java","28/Dec/13 2:39 PM;andresdiegolanda@gmail.com;AuthorRepository.java;https://jira.spring.io/secure/attachment/21567/AuthorRepository.java","28/Dec/13 2:39 PM;andresdiegolanda@gmail.com;Book.java;https://jira.spring.io/secure/attachment/21566/Book.java","28/Dec/13 2:39 PM;andresdiegolanda@gmail.com;BookRepository.java;https://jira.spring.io/secure/attachment/21568/BookRepository.java",,,2013-12-28 07:17:16.001,38636,issuemaster(issuemaster),,"0|i005jj:",908,38338,,,Codd M1,42 - 2014 Kickoff,,,,,,,,,,"28/Dec/13 7:17 AM;olivergierke;Any chance you provide the sample domain class and repository interface? I had a hard time trying to reproduce this.","28/Dec/13 2:39 PM;andresdiegolanda@gmail.com;I've attached the files you've asked for. Tell me if you need anything else.","29/Dec/13 11:07 AM;olivergierke;I've incorporated the code into our test base and added a test case to show that one can follow the references and see the expected results. Can you confirm, that you still see this issue with the latest snapshots? The issue might have been fixed accidentally after the M1 release.

If so, feel free to play around with the code added in [this commit|https://github.com/spring-projects/spring-data-rest/commit/b3a03ea8326b4bca4f0655bcf4f64784d4a7f594] and see if you can get it to break.","30/Dec/13 1:58 AM;andresdiegolanda@gmail.com;Yes, I still see the issue with the latest snapshots. ","30/Dec/13 2:20 PM;bcerny;I can also confirm that issue still exists in the latest 2.0 snapshot. I'm experiencing this issue on both sides of a relationship (OneToMany and ManyToOne).","01/Jan/14 11:48 AM;ptahchiev;I'm using 2.0.0.M1 and this issue still occurs. For me it breaks when for instance a category has a list of products and they are mapped as:

{code}
    @ManyToMany(fetch = FetchType.LAZY, targetEntity = ProductModel.class, cascade = { CascadeType.PERSIST, CascadeType.MERGE })
    @JoinTable(name = ""category_products"", joinColumns = @JoinColumn(name = ""category_id""), inverseJoinColumns = @JoinColumn(name = ""product_id""))
    private Collection<ProductModel> products;
{code}

If the collection is empty the result is correct, but if the collection is not I get: 
{code}
java.lang.NullPointerException
	at org.springframework.data.rest.webmvc.ResourceProcessorHandlerMethodReturnValueHandler.handleReturnValue(ResourceProcessorHandlerMethodReturnValueHandler.java:161)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:71)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:122)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:748)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:689)
{code}","18/Jan/14 4:46 AM;jhiemer;Peter are you using Spring Framework 4.0.+?","18/Jan/14 7:43 AM;bcerny;I am getting the same exception and using Spring Framework 4.0+.","18/Jan/14 9:09 AM;olivergierke;That's useful information. I can sort of reproduce the issue on Spring 4.0.0.RELEASE, despite the fact that the test cases sometimes execute correctly and sometimes fail. So I assume some invalid caching going on in {{GenericTypeResolver}}. I'll dig down further into this and will see what we can do.","18/Jan/14 11:08 AM;bcerny;Glad that helps. It always fails for me and has never worked sporadically. I am also using lazy fetching. Never tried it with eager though because my queries would take to long to run.","20/Jan/14 3:22 AM;olivergierke;I think the sporadic test successes resulted from me juggling Spring versions in the IDE. I've added some mitigating code in Spring Data Commons {{TypeDiscoverer}} so the current snapshots should work fine.","22/Jan/14 2:57 AM;olivergierke;It might not be obvious, but to see that ticket fixed you've got to use Spring Data Commons 1.7 snapshots until we have shipped the RC release.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#580|https://github.com/spring-projects/spring-data-rest/issues/580]. ",,,,,,,,,,,
@RestResource(exported=false) throws java.lang.IllegalArgumentException: Not an managed type: class java.lang.Object,DATAREST-197,52020,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Critical,Works as Designed,olivergierke,ptahchiev,ptahchiev,24/Nov/13 12:32 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,12/Mar/14 4:07 AM,2.0 M1 (Codd),,,,,,,,,,,0,,,,,"Hi guys,

according to comments on DATAREST-72 and DATAREST-196 I attach a sample project that reproduces the problem.
Once again, I have a base repository called BaseEntityRepository<T, PK extends Serializable> and it is marked as (exported=false), but I get this error:
{code}
Caused by: 
java.lang.IllegalArgumentException: Not an managed type: class java.lang.Object
	at org.hibernate.jpa.internal.metamodel.MetamodelImpl.managedType(MetamodelImpl.java:221)
	at org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.<init>(JpaMetamodelEntityInformation.java:67)
	at org.springframework.data.jpa.repository.support.JpaEntityInformationSupport.getMetadata(JpaEntityInformationSupport.java:65)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getEntityInformation(JpaRepositoryFactory.java:146)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getEntityInformation(JpaRepositoryFactory.java:39)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getEntityInformation(RepositoryFactoryBeanSupport.java:122)
	at org.springframework.data.repository.support.Repositories.getRepoInfoFor(Repositories.java:180)
	at org.springframework.data.repository.support.Repositories.getRepositoryInformationFor(Repositories.java:129)
	at org.springframework.data.rest.core.mapping.ResourceMappings.populateCache(ResourceMappings.java:98)
	at org.springframework.data.rest.core.mapping.ResourceMappings.<init>(ResourceMappings.java:79)
	at org.springframework.data.rest.core.mapping.ResourceMappings.<init>(ResourceMappings.java:60)
	at org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.resourceMappings(RepositoryRestMvcConfiguration.java:345)
	at com.test.config.RestConfig$$EnhancerByCGLIB$$ddea48b8.CGLIB$resourceMappings$35(<generated>)
	at com.test.config.RestConfig$$EnhancerByCGLIB$$ddea48b8$$FastClassByCGLIB$$317e1769.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:286)
	at com.test.config.RestConfig$$EnhancerByCGLIB$$ddea48b8.resourceMappings(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:160)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1025)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance
{code}

To reproduce, please unzip the zip file, then cd test, mvn clean install, then cd mvc and run mvn jetty:run.. the application will not start because of the exception I have described.",,,,,,,,,,,,,,,,,,,,,,,,,,"24/Nov/13 12:32 PM;ptahchiev;test.zip;https://jira.spring.io/secure/attachment/21508/test.zip",,,,,,2013-11-24 12:52:52.791,38503,issuemaster(issuemaster),,"0|i06q33:",39264,38205,,,,,,,,,,,,,,"24/Nov/13 12:52 PM;olivergierke;You cannot expose a generic repository. In fact, your {{BaseEntityRepository}} is not even supported as a general Spring Data Repository. It could be used as a base repository for concrete ones (e.g. {{FooRepository extends BaseEntityRepository<Foo, Long>}}). To avoid the {{BaseEntityRepository}} from being considered a concrete repository, annotate it with {{@NoRepositoryBean}}.

Going forward, please add a failing test case or add instructions of how to actually run the sample code. We favor test cases that are very reduced.","27/Nov/13 1:38 AM;ptahchiev;Hi Oliver,

sorry for my late reply but the JIRA didn't send me an email :( .. The BaseEntityRepository gets picked up even if it has no concrete implementation (FooRepository extends BaseEntityRepository<Foo, Long>), but now that I added @NoRepositoryBean annotation it all works good. Sorry about this - I didn't know about this annotation, I thought the only way from preventing a repository to be exported is through exported = false. You can close this issue - the @NoRepositoryBean works fine for me.","03/Dec/13 12:05 AM;ptahchiev;Feedback is in previous comment.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#579|https://github.com/spring-projects/spring-data-rest/issues/579]. ",,,,,,,,,,,,,,,,,,,,
No way to exclude repository from being exported.,DATAREST-196,51073,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Duplicate,olivergierke,ptahchiev,ptahchiev,25/Sep/13 11:34 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,24/Nov/13 10:29 AM,,,,,,,,,,,,1,,,,,"Hi guys,

you can read about my problem here:

http://forum.spring.io/forum/data-rest/722865-differences-between-spring-data-1-1-m1-and-2-0-0-build-snapshot


But to summarize I use spring-data-rest, which internally calls spring-data-commons to load my repositories for export. My problem is that spring-data-commons loads ALL my repositories. And I have a common base repository which looks like this:
{code}
public interface BaseEntityRepository<T, PK extends Serializable> extends Repository<T, PK> {

    /**
     * Retrieves an entity by its UID.
     * 
     * @param uid
     * @return
     */
    T findByUidEquals(@Param(""uid"") final String uid);
}
{code}
and as you can see T is of type java.lang.Object so Spring-data-rest complains that it is not a mapped hibernate type. Fair enough, I tried to specify it not to be exported, using: 

{code}
@RestResource(exported = false)
{code}

but this had no effect. So my question is: how can I exclude my base repository from being exported as rest?

Thank you.",all,,,,,,,,,,,,,,,DATAREST-72,,,,,,,,,,,,,,,,2020-12-31 10:29:33.524,38502,issuemaster(issuemaster),,"0|i06q2v:",39263,38204,,,,,,,,,,,,,,"24/Nov/13 12:33 PM;ptahchiev;As you suggested I have created a new issue with a sample project to reproduce it. Please refer to DATAREST-197","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#578|https://github.com/spring-projects/spring-data-rest/issues/578]. ",,,,,,,,,,,,,,,,,,,,,,
Limiting page size,DATAREST-195,52010,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,springuser007,springuser007,22/Nov/13 3:06 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,24/Jan/14 9:39 AM,,,,,2.0 RC1 (Codd),,,,,,,0,,,,,"Currently SDR allows to set the page ""size"" parameter without limiting it. From an unscrupulous user making requests with large ""size"" parameter could bring down the app. It would be nice to limit ""size"" parameter at global level as well as individual resource level.",,,,,,,,,,,,,,,,,DATACMNS-408,DATACMNS-335,,,,,,,,,,,,,,2013-11-24 10:35:11.727,38492,issuemaster(issuemaster),,"0|i005if:",903,38194,,,Codd M1,42 - 2014 Kickoff,,,,,,,,,,"24/Nov/13 10:35 AM;olivergierke;By default the maximum page size is set to 2000 (through the default setting in {{PageableHandlerMethodArgumentResolver}}. To customize this, override the {{pageableResolver()}} method in {{RepositoryRestMvcConfiguration}} and configure {{setMaxPageSize(…)}} according to your needs.","02/Dec/13 12:52 PM;springuser007;Thank  you. Suggested solution works well by silently ignoring the page size setting of the request if the number is more than the max size we set on the resolver. Would it be appropriate to throw some error message rather than silently ignoring the page size?","05/Dec/13 12:53 AM;olivergierke;Does it really make sense to throw an exception over gracefully falling back to something reasonable? We can of course add a flag to rather trigger the former behavior but I think people prefer the server to do ""the right thing"" than to force the client to resubmit the request. 

Assume you write a client submitting an unreasonable large page size. You now receive an error, saying: ""May allowed page size is X"". What do you usually do? Re-trigger the request with exactly that size. That's why we currently fall back to the configured max page size.","05/Dec/13 1:57 PM;springuser007;For my use-case your solution works. I leave rest to community","24/Jan/14 9:39 AM;olivergierke;Will be fixed transitively by the fixes in the linked tickets.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#523|https://github.com/spring-projects/spring-data-rest/issues/523]. ",,,,,,,,,,,,,,,,,,
Lifecycle exception with latest build,DATAREST-190,51949,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Works as Designed,olivergierke,springuser007,springuser007,19/Nov/13 7:45 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,12/Mar/14 5:28 AM,2.0 M1 (Codd),,,,,,,,,,,0,,,,,".Updated SD Rest 2.x libraries this morning. While compile went well, application failed to start. Test in Tomcat and WASCE

{code}
Nov 19, 2013 10:39:28 AM org.apache.catalina.core.StandardContext listenerStart
SEVERE: Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener
java.lang.IllegalAccessError: tried to access method org.springframework.context.annotation.AnnotationConfigUtils.processCommonDefinitionAnnotations(Lorg/springframework/beans/factory/annotation/AnnotatedBeanDefinition;)V from class org.springframework.data.repository.config.RepositoryComponentProvider
	at org.springframework.data.repository.config.RepositoryComponentProvider.findCandidateComponents(RepositoryComponentProvider.java:121)
	at org.springframework.data.repository.config.RepositoryConfigurationSourceSupport.getCandidates(RepositoryConfigurationSourceSupport.java:69)
	at org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport.getRepositoryConfigurations(RepositoryConfigurationExtensionSupport.java:54)
	at org.springframework.data.repository.config.RepositoryBeanDefinitionRegistrarSupport.registerBeanDefinitions(RepositoryBeanDefinitionRegistrarSupport.java:99)
	at org.springframework.context.annotation.ConfigurationClassParser.processImport(ConfigurationClassParser.java:396)
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:207)
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:165)
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:140)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:282)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:223)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:630)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:461)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:389)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:294)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:112)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4887)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5381)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
Nov 19, 2013 10:39:28 AM org.apache.catalina.core.StandardContext startInternal
SEVERE: Error listenerStart
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-11-20 03:31:01.229,38430,issuemaster(issuemaster),,"0|i06prj:",39212,38132,,,,,,,,,,,,,,"20/Nov/13 3:31 AM;olivergierke;The latest Spring Data Commons build requires Spring 3.2.5. The method the exception is complaining about is public in this release.","20/Nov/13 8:33 AM;springuser007;I thought I updated spring version. My mistake! Updated now and works well.

Note: I don't see the maven files are updated in http://repo.springsource.org/libs-snapshot/","21/Nov/13 1:45 AM;olivergierke;Which files are you referring to?","21/Nov/13 7:01 AM;springuser007;Listing a few ....
http://repo.springsource.org/libs-snapshot/org/springframework/data/spring-data-rest-core/2.0.0.BUILD-SNAPSHOT/spring-data-rest-core-2.0.0.BUILD-20131109.012027-10.pom
http://repo.springsource.org/libs-snapshot/org/springframework/data/spring-data-rest-core/ivy-2.0.0.BUILD-SNAPSHOT.xml


I see new build today and .pom files updated with spring 3.2.5 :)","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#575|https://github.com/spring-projects/spring-data-rest/issues/575]. ",,,,,,,,,,,,,,,,,,,
Spring data rest wrongly handles jpa collection attributes,DATAREST-188,51927,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,marfago,marfago,18/Nov/13 10:52 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,05/Dec/13 6:17 AM,,,,,2.0 RC1 (Codd),,,,,,,0,,,,,"Given an entity with a collection attribute

{noformat}
@Entity
public class MyEntity {
......
	@ElementCollection(fetch=FetchType.EAGER)
	private Set<String> myAttribute;
.......
{noformat}

when you try to create a new instance with spring data rest, it throws an exception

{noformat}
01:01:03.453 [qtp1456083854-24] ERROR o.s.d.r.w.AbstractRepositoryRestController - argument type mismatch
java.lang.IllegalArgumentException: argument type mismatch
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_40]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_40]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_40]
        at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_40]
        at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:191) ~[spring-core-3.2.5.RELEASE.jar:3.2.5.RELEASE]
        at org.springframework.data.mapping.model.BeanWrapper.setProperty(BeanWrapper.java:97) ~[spring-data-commons-1.7.0.BUILD-SNAPSHOT.jar:na]
        at org.springframework.data.rest.webmvc.json.PersistentEntityJackson2Module$ResourceDeserializer.deserialize(PersistentEntityJackson2Module.java:226) ~[
spring-data-rest-webmvc-2.0.0.BUILD-SNAPSHOT.jar:na]
        at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:2888) ~[jackson-databind-2.2.2.jar:2.2.2]
        at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2094) ~[jackson-databind-2.2.2.jar:2.2.2]
        at org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.readJavaType(MappingJackson2HttpMessageConverter.java:178) ~[spring-web-3
.2.5.RELEASE.jar:3.2.5.RELEASE]
        at org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.readInternal(MappingJackson2HttpMessageConverter.java:166) ~[spring-web-3
.2.5.RELEASE.jar:3.2.5.RELEASE]
        at org.springframework.http.converter.AbstractHttpMessageConverter.read(AbstractHttpMessageConverter.java:153) ~[spring-web-3.2.5.RELEASE.jar:3.2.5.RELE
ASE]
        at org.springframework.data.rest.webmvc.PersistentEntityResourceHandlerMethodArgumentResolver.resolveArgument(PersistentEntityResourceHandlerMethodArgum
entResolver.java:48) ~[spring-data-rest-webmvc-2.0.0.BUILD-SNAPSHOT.jar:na]
        at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77) ~[sprin
g-web-3.2.5.RELEASE.jar:3.2.5.RELEASE]
        at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162) ~[spring-web-3.2.5.RELEASE.jar
:3.2.5.RELEASE]
        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:123) ~[spring-web-3.2.5.RELEASE.jar:3.2.5.
RELEASE]
        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) ~[spring-
webmvc-3.2.5.RELEASE.jar:3.2.5.RELEASE]
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745) ~[spring
-webmvc-3.2.5.RELEASE.jar:3.2.5.RELEASE]
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686) ~[spring-web
{noformat}

I think the problem is with _PersistentEntityJackson2Module#deserialize_ where the collections are handled

{noformat}
if (Collection.class.isAssignableFrom(ctype)) {
	c = new ArrayList<Object>();
} else if (Set.class.isAssignableFrom(ctype)) {
	c = new HashSet<Object>();
}
{noformat} and it should be 
{noformat}
if (Set.class.isAssignableFrom(ctype)) {
	c = new HashSet<Object>();
} else if (Collection.class.isAssignableFrom(ctype)) {
	c = new ArrayList<Object>();
}
{noformat} or the first branch should consider _List.class_ instead of _Collection.class_",,,,,,,,,,,,DATAREST-199,,,,,,,,,,,,,,,,,,,,2013-12-05 06:17:55.474,38408,issuemaster(issuemaster),,"0|i006rj:",1109,38110,,,Codd M1,,,,,,,,,,,"05/Dec/13 6:17 AM;olivergierke;This should be fixed by the fix for DATAREST-199. Would you mind giving the snapshots a try?","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#573|https://github.com/spring-projects/spring-data-rest/issues/573]. ",,,,,,,,,,,,,,,,,,,,,,
org.neo4j.graphdb.NotInTransactionException on DELETE,DATAREST-184,51746,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Blocker,Fixed,olivergierke,mwilmes,mwilmes,08/Nov/13 1:27 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,14/Nov/13 2:01 AM,,,,,2.0 M1 (Codd),,,,,,,0,,,,,"After upgrade of SpringDataNeo4j to 2.3.2.RELEASE and SpringDataRest 2.0.0.SNAPSHOT DELETE requests fail with NotInTransaction exception triggered by Neo4j. The underlying CRUDRepository delete methods however are still functional so it seems it's only SDR triggered deletes that fail. 



{code}
org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.dao.InvalidDataAccessApiUsageException: nested exception is org.neo4j.graphdb.NotInTransactionException
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:948)
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:860)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:694)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:66)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:770)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:168)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:136)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:134)
	at com.lhsystems.bc.bamboo.rest.tests.RestAssetTests.testRestApiAircraftRoundTrip(RestAssetTests.java:87)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: org.springframework.dao.InvalidDataAccessApiUsageException: nested exception is org.neo4j.graphdb.NotInTransactionException
	at org.springframework.data.neo4j.support.Neo4jExceptionTranslator.translateExceptionIfPossible(Neo4jExceptionTranslator.java:51)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:58)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:163)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204)
	at $Proxy56.delete(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:198)
	at $Proxy58.delete(Unknown Source)
	at org.springframework.data.rest.core.invoke.CrudRepositoryInvoker.invokeDelete(CrudRepositoryInvoker.java:102)
	at org.springframework.data.rest.webmvc.RepositoryEntityController.deleteEntity(RepositoryEntityController.java:274)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:219)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936)
	... 38 more
Caused by: org.neo4j.graphdb.NotInTransactionException
	at org.neo4j.kernel.impl.index.IndexConnectionBroker.acquireResourceConnection(IndexConnectionBroker.java:49)
	at org.neo4j.index.impl.lucene.LuceneIndex.getConnection(LuceneIndex.java:85)
	at org.neo4j.index.impl.lucene.LuceneIndex.remove(LuceneIndex.java:196)
	at org.springframework.data.neo4j.support.typerepresentation.AbstractIndexingTypeRepresentationStrategy.remove(AbstractIndexingTypeRepresentationStrategy.java:94)
	at org.springframework.data.neo4j.support.typerepresentation.AbstractIndexingTypeRepresentationStrategy.preEntityRemoval(AbstractIndexingTypeRepresentationStrategy.java:89)
	at org.springframework.data.neo4j.support.mapping.EntityRemover.removeNode(EntityRemover.java:49)
	at org.springframework.data.neo4j.support.mapping.EntityRemover.removeNodeEntity(EntityRemover.java:45)
	at org.springframework.data.neo4j.support.mapping.EntityRemover.remove(EntityRemover.java:85)
	at org.springframework.data.neo4j.support.Neo4jTemplate.delete(Neo4jTemplate.java:224)
	at org.springframework.data.neo4j.repository.AbstractGraphRepository.delete(AbstractGraphRepository.java:328)
	at org.springframework.data.neo4j.repository.AbstractGraphRepository.delete(AbstractGraphRepository.java:333)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:344)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:329)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:96)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:260)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:94)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:155)
	... 63 more

{code}

CREATE, POST, PUT requests are not affected.","SDR 2.0.0.BUILD-20131001.162718-9
SDN 2.3.2.RELEASE
Neo4j 1.9.3",,,,,,,,,,DATAGRAPH-409,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:32.123,38229,issuemaster(issuemaster),,"0|i06onz:",39034,37931,,,The Road to Codd M1,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#569|https://github.com/spring-projects/spring-data-rest/issues/569]. ",,,,,,,,,,,,,,,,,,,,,,,
Update (Http PUT) operation should not create new entity,DATAREST-180,51594,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Duplicate,olivergierke,springuser007,springuser007,30/Oct/13 7:15 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,10/Jul/19 12:59 PM,2.0 M1 (Codd),,,,,,,,,,,2,,,,,Currently updating an entity (PUT) that doesn't exist would end up in creating a new entity (POST). This is not always a desired. May be there could be a setting that allows update fail when the entity doesn't exist?,,,,,,,,,,,,,,,,,DATAREST-948,,,,,,,,,,,,,,,2015-05-27 02:37:49.657,38080,issuemaster(issuemaster),,"0|i06o33:",38940,37782,,,,,,,,,,,,,,"27/May/15 2:37 AM;CalamarBicefalo;It does not looks as something desirable since hitting http://host/my-resource/unexisting-id should return 404 from a RESTful point of view.

It has several dramatic implications first of all, the client is allowed to specify IDs, which is something that probably you can't allow (imagine unique IDs across collections are needed).

Additionally, a PATCH with the same approach returns a 500 in my tests, which again is at least not-consistent.

Some tests next:


{code:java}
    @Test
    public void fullUpdateUnexistingResourceShouldReturn404() throws Exception {
        mvc.perform(
                put(""/form-definitions/bullshit"")
                        .content(""{\""name\"":\""updated!!\""}"")
                        .contentType(org.springframework.http.MediaType.APPLICATION_JSON))

                .andExpect(status().isNotFound())
        ;
    }
{code}


{code:java}
    @Test
    public void partialUpdateUnexistingResourceShouldReturn404() throws Exception {
        mvc.perform(
                patch(""/form-definitions/bullshit"")
                        .content(""{\""name\"":\""updated!!\""}"")
                        .contentType(org.springframework.http.MediaType.APPLICATION_JSON))

                .andExpect(status().isNotFound())
        ;
    }
{code}

","10/Jul/19 12:51 PM;buckett;I think this got resolved through DATAREST-948 and this can probably be closed.","10/Jul/19 12:59 PM;olivergierke;As indicated by [~buckett], resolving due to DATAREST-948 fixed already.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#565|https://github.com/spring-projects/spring-data-rest/issues/565]. ",,,,,,,,,,,,,,,,,,,,
Duplicate classes in Spring Data REST 2.0.0.BUILD-SNAPSHOT,DATAREST-172,51204,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Works as Designed,olivergierke,ww4,ww4,04/Oct/13 12:09 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,08/Oct/13 3:26 AM,,,,,,,,,,,,0,,,,,"Between the core and repository subprojects, there are lots of duplicate classes that are just in different packages. I don't know if it's in migration or what, but the problem is that it's easy to pick the wrong annotation class (e.g. the wrong @RestResource) and then have a configuration that doesn't work, and not know what's going on.

I just commented out the org.springframework.data:spring-data-rest-repository dependency and things seem to be working well with just org.springframework.data:spring-data-rest-core.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-10-07 02:14:45.556,37694,issuemaster(issuemaster),,"0|i007d3:",1209,37396,,,SpringOne Aftermath,The Road to Codd M1,,,,,,,,,,"07/Oct/13 2:14 AM;olivergierke;This is an inconsistency caused by Maven not realizing we have merged the {{core}} and {{repository}} modules into a {{core}} module. This results in the {{repository}} modules still being around in 2.0.0.BUILD-SNAPSHOT and thus being pulled in in an outdated state if you refer to them directly.

I've just purged the 2.0.0.BUILD-SNAPSHOT JARs for {{spring-data-rest-repository}}, so that you should get an error if you try to refer to them. Going forward, the best approach is to only refer to {{spring-data-rest-webmvc}} as this will pull in the necessary dependencies automatically.","07/Oct/13 9:43 AM;ww4;Sounds good. I removed both -core and -repository, and things seem to be OK.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#557|https://github.com/spring-projects/spring-data-rest/issues/557]. ",,,,,,,,,,,,,,,,,,,,,
Jackson module does not get registered ,DATAREST-171,51195,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Works as Designed,olivergierke,larim,larim,04/Oct/13 4:54 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,03/Dec/14 10:36 PM,2.0 M1 (Codd),,,,,,,,,,,1,,,,,"No matter how i expose my Jackson module bean (either as an annotated bean or declared in application xml configuration file) *its method setupModule() never gets called and by the way my custom serializer is never called*.

One can reproduce this by the simplet example given in the reference documentation here http://docs.spring.io/spring-data/rest/docs/2.0.0.BUILD-SNAPSHOT/reference/html/representations-chapter.html#d4e162",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-12-30 05:24:55.807,37685,issuemaster(issuemaster),,"0|i06me7:",38666,37387,,,,,,,,,,,,,,"30/Dec/13 5:24 AM;olivergierke;Any chance you can try the latest snapshots? With the move to HAL we changed a few things in the base serializer we use so that we make sure we invoke the appropriate Jackson serializers for *properties* of the resources exposed.

Note, that we currently don't support taking over the serialization of the base resource itself as we need to apply the custom reference-to-link translation.","03/Dec/14 10:36 PM;cstrobl;Closed due to inactivity (please feel free to leave a comment and/or reopen the issue).","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#556|https://github.com/spring-projects/spring-data-rest/issues/556]. ",,,,,,,,,,,,,,,,,,,,,
Property-link throws Null-pointer exception when property is lazy-loaded,DATAREST-169,51121,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,ptahchiev,ptahchiev,28/Sep/13 3:08 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,01/Oct/13 8:54 AM,,,,,2.0 M1 (Codd),,,,,,,0,,,,,"Hi guys,

I'm testing the 2.0-SNAPSHOT version and it all works great, except for one scenario. I open one of my jpa entities with the following URL:

{code}
http://localhost:8111/rest/category/845065653710592
{code}

and it's all displayed good. Then I decide to follow one of the links there: 

{code}
http://localhost:8111/rest/category/845065653710592/picture
{code}

and it throws a null-point exception:

{code}
2013-09-29 01:07:30.076:WARN:oejs.ServletHandler:/rest/category/845065653710592/picture
java.lang.NullPointerException
	at org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler.getSelfLinkFor(PersistentEntityResourceAssembler.java:68)
	at org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler.toResource(PersistentEntityResourceAssembler.java:59)
	at org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController$1.apply(RepositoryPropertyReferenceController.java:138)
	at org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController$1.apply(RepositoryPropertyReferenceController.java:107)
	at org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.doWithReferencedProperty(RepositoryPropertyReferenceController.java:460)
	at org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.followPropertyReference(RepositoryPropertyReferenceController.java:145)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:219)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:827)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:735)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:848)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:669)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1448)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
{code}

The reason is because in PersistentEntityResourceAssembler:68 we see the following: 

{code}
Object id = wrapper.getProperty(entity.getIdProperty());
{code}

and in my case entity is NULL. Why is it null? Because a couple of lines before that you get the class of the entity like this:

{code}
PersistentEntity<?, ?> entity = repositories.getPersistentEntity(instance.getClass());
{code}

and since the instance is lazy loaded, so instance.getClass() returns the proxy class:
{code}
class com.xxxxxxxxx.media.MediaModel_$$_javassist_33
{code}

and this is not a valid entity so repositories object returns null.",all,,,,,,,,,,DATACMNS-376,,,,,,,,,,,,,,,,,,,,,2013-10-01 07:17:28.181,37612,issuemaster(issuemaster),,"0|i06ll3:",38535,37314,,,SpringOne Aftermath,,,,,,,,,,,"01/Oct/13 7:17 AM;olivergierke;I've created DATACMNS-376 and am about to commit a fix for it as I write this. I'd still like to add a test case to Spring Data REST to guard against regressions here. Am I right in the assumption, that {{Picture}} is an embedded object in {{Category}} or is it one that's linked to?","01/Oct/13 7:28 AM;ptahchiev;Hi Oliver,
and thanks for your quick response. Yes, you are absolutely right, picture is a property on the category, mapped like the following below:
{code}
    @ManyToOne(fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE })
    @JoinColumn(name = ""picture"", nullable = true, referencedColumnName = ""pk"")
    private MediaModel picture;

{code}","01/Oct/13 8:37 AM;olivergierke;I am not quite sure why but I fail to be able to trigger the proxy class generation. Even if I explictly annotate my test domain objects with {{@ManyToOne(fetch = FetchType.LAZY)}} I get plain objects of the target class, no proxy classes involved.","01/Oct/13 8:54 AM;olivergierke;I've pushed the test case nonetheless and upgraded the dependencies to current snapshots. You should be able to get rid off the problem by pulling in an SD Commons in 1.7.0.BUILD-SNAPSHOT as there were effectively no changes necessary in Spring Data REST.","01/Oct/13 11:40 AM;ptahchiev;I can confirm it works perfectly. Thanks a lot :)","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#554|https://github.com/spring-projects/spring-data-rest/issues/554]. ",,,,,,,,,,,,,,,,,,
Master branch build is broken,DATAREST-168,51099,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,ww4,ww4,26/Sep/13 5:57 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,14/Oct/13 12:22 AM,,,,,2.0 M1 (Codd),,,,,,,0,,,,,"The build is broken:

{code}
BELC02JH1CJDKQ4:spring-data-rest wwheeler$ ./gradlew clean jar
The TaskContainer.add() method has been deprecated and is scheduled to be removed in Gradle 2.0. Please use the create() method instead.
:clean
:spring-data-rest-core:clean
:spring-data-rest-example:clean UP-TO-DATE
:spring-data-rest-tck:clean UP-TO-DATE
:spring-data-rest-webmvc:clean
:compileJava UP-TO-DATE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:jar
:spring-data-rest-core:compileJava
:spring-data-rest-core:processResources UP-TO-DATE
:spring-data-rest-core:classes
:spring-data-rest-core:jar
:spring-data-rest-webmvc:compileJava
:spring-data-rest-webmvc:processResources UP-TO-DATE
:spring-data-rest-webmvc:classes
:spring-data-rest-webmvc:jar
:spring-data-rest-example:compileJava

FAILURE: Build failed with an exception.

* What went wrong:
Could not resolve all dependencies for configuration ':spring-data-rest-example:compile'.
> Could not resolve org.neo4j:neo4j:1.9.3.
  Required by:
      org.springframework.data:spring-data-rest-example:2.0.0.BUILD-SNAPSHOT > org.springframework.data:spring-data-neo4j:2.3.0.BUILD-SNAPSHOT
   > Could not GET 'http://repo.springsource.org/libs-snapshot/org/neo4j/neo4j/1.9.3/neo4j-1.9.3.pom'. Received status code 401 from server: Unauthorized
> Could not resolve org.neo4j:neo4j-cypher:1.9.3.
  Required by:
      org.springframework.data:spring-data-rest-example:2.0.0.BUILD-SNAPSHOT > org.springframework.data:spring-data-neo4j:2.3.0.BUILD-SNAPSHOT
   > Could not GET 'http://repo.springsource.org/libs-snapshot/org/neo4j/neo4j-cypher/1.9.3/neo4j-cypher-1.9.3.pom'. Received status code 401 from server: Unauthorized

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.

BUILD FAILED

Total time: 21.231 secs
BELC02JH1CJDKQ4:spring-data-rest wwheeler$ 
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-09-27 02:12:01.409,37590,issuemaster(issuemaster),,"0|i007hb:",1228,37292,,,The Road to Codd M1,,,,,,,,,,,"27/Sep/13 2:12 AM;olivergierke;Would you mind re-trying? I ran the build locally and it went fine. This should have triggered the dependecies to make it into the repo (actually I would've expected the CI job to already to that :/).","09/Oct/13 3:16 PM;ww4;Works, thanks.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#512|https://github.com/spring-projects/spring-data-rest/issues/512]. ",,,,,,,,,,,,,,,,,,,,,
One-to-one relations in embedded Mongo Documents do not get rendered...,DATAREST-163,51029,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Critical,Fixed,olivergierke,jhiemer,jhiemer,23/Sep/13 11:12 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,14/Nov/13 2:02 AM,2.0 M1 (Codd),,,,2.0 M1 (Codd),,,,,,,0,error,mongo,,,"In documents with subdocuments being a one-to-one relation ship, SD REST is neither able to render them correctly, nor to accept them in a POST/PUT. ",All in the version 2 milestones.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:29.712,37521,issuemaster(issuemaster),,"0|i06oo7:",39035,37223,,,The Road to Codd M1,,,,,,,,,,,"03/Nov/13 2:47 AM;jhiemer;Any update on this? It is an issue that is really uncomfortable. ","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#549|https://github.com/spring-projects/spring-data-rest/issues/549]. ",,,,,,,,,,,,,,,,,,,,,,
PUT vs PATCH with JPA,DATAREST-150,50579,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,gregturn,thomasd,thomasd,27/Aug/13 1:33 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,11/Mar/14 3:04 AM,,,,,2.0.1 (Codd SR1),2.1 M1 (Dijkstra),,,,,,1,dijkstra,,,,"Github Author: mangvlad
Github Last-Updated: 2013-04-26T07:56:16Z
This issue was automatically imported from github

When using PUT method, removing any field appears to be interpreted as ""no change"".
This seems to be close to the expected behavior of PATCH method, not PUT.

Example:

Step 1 GET /objects/o1  { ""f1"":""v1"", ""f2"":""v2""}
Step 2 PUT /objects/o1  { ""f1"":""v1""}
Step 3 GET /objects/o1  { ""f1"":""v1"", ""f2"":""v2""}

(it seems that the result should be { ""f1"":""v1""})",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-02-04 20:22:39.885,37072,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/134,"0|i07d8v:",43018,36774,https://api.github.com/repos/SpringSource/spring-data-rest/issues/64,,44 - Codd GA,,,,,,,,,,,"04/Feb/14 8:22 PM;gregturn;PUT updates the entire record. Partially supplying the fields would cause those NOT supplied to be set to null.

{code}
PUT /objects/o1
{ ""f1"":""v1""}
{code}

should produce:
{code}
{""f1"":""v1"", ""f2"":null}
{code}

To do partial updates, you in fact need to use PATCH, which we have support for and the latest version of master appears to properly handle PUT vs. PATCH properly. (Or at least I have a couple PRs being reviewed that will make that happen).","05/Feb/14 2:36 PM;gregturn;I wrote a test case to confirm this behavior, but I don't want to submit a pull request until we finish the next sprint.","11/Mar/14 3:04 AM;olivergierke;Thanks for the PR, Greg! I merged it into master and backported to the bugfix branch.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#538|https://github.com/spring-projects/spring-data-rest/issues/538]. ",,,,,,,,,,,,,,,,,,,,
Improvment suggestion: Better support for read only repositories,DATAREST-144,50573,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,thomasd,thomasd,27/Aug/13 1:33 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,11/Mar/14 10:34 AM,,,,,2.0 GA (Codd),,,,,,,0,,,,,"Github Author: bjconlan
Github Last-Updated: 2013-03-06T20:26:32Z
This issue was automatically imported from github

Although it is possible to disable the CUD parts of the CRUDRepsoitory by adding @exported(false) to overloaded methods of the CRUDRepository i think it would be nicer to see either:

The Introduction to a read only repository in the spring-data-commons ie:
{code}java
@NoRepositoryBean
public interface ReadOnlyRepository<T, ID extends Serializable> extends Repository<T, ID> {
	T findOne(ID id);
	List<T> findAll();
	List<T> findAll(Sort sort);
	Page<T> findAll(Pageable pageable);
}
{code}

Which can be used as the decoration point when using spring-data-rest-webmvc instead of CRUDRepository (although I imagine a CRUDRepository would inherit from such a class)

or

Have the spring-data-rest-webmvc decorate any Repository based interface and follow some sort of expected method signatures for providing the appropriate Get/Put/Post/Patch/Delete REST operations.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-03-11 10:34:30.169,37066,issuemaster(issuemaster),,"0|i06jjr:",38205,36768,https://api.github.com/repos/SpringSource/spring-data-rest/issues/79,,,,,,,,,,,,,"11/Mar/14 10:34 AM;olivergierke;Support for non-{{CrudRepository}} repositories has been added with 2.0 already.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#532|https://github.com/spring-projects/spring-data-rest/issues/532]. ",,,,,,,,,,,,,,,,,,,,,,
PUT of entity with links fails..,DATAREST-143,50572,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Duplicate,gregturn,thomasd,thomasd,27/Aug/13 1:33 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,14/Feb/14 4:26 AM,,,,,2.0 GA (Codd),,,,,,,0,,,,,"Github Author: jhiemer
Github Last-Updated: 2013-03-22T20:05:51Z
This issue was automatically imported from github

Hi Jon,
when I am doing a put to the self link with embedded links I get an error. This means I need to remove all links before putting an element. I think this should not be the desired behaviour. Or?

Sample:

{code}
{
   ""description"":""adasdadsasdads"",
   ""name"":""Customer Corp"",
   ""links"":[
      {
         ""rel"":""self"",
         ""href"":""http://localhost:8080/web/api/customer/1""
      },
      {
         ""rel"":""customer.customer.users"",
         ""href"":""http://localhost:8080/web/api/customer/1/users""
      },
      {
         ""rel"":""customer.customer.credentials"",
         ""href"":""http://localhost:8080/web/api/customer/1/credentials""
      },
      {
         ""rel"":""customer.customer.addresses"",
         ""href"":""http://localhost:8080/web/api/customer/1/addresses""
      },
      {
         ""rel"":""customer.customer.sector"",
         ""href"":""http://localhost:8080/web/api/customer/1/sector""
      }
   ]
}
{code}

The response is:

{code}javascript
{
  ""cause"" : null,
  ""message"" : ""Property 'links' not found for entity de.model.customer.Customer""
}
{code}

Perhaps one additional note: the same happens, when using embedded entities like you described here: http://stackoverflow.com/questions/12879975/spring-data-rest-uri-vs-entity-id. Of course the POST fails, if I remove the links as the exporter is not able to find the customer in the database.",,,,,,,,,,,,,,,,DATAREST-238,,,,,,,,,,,,,,,,2014-02-04 05:14:27.87,37065,issuemaster(issuemaster),,"0|i07a7j:",42526,36767,https://api.github.com/repos/SpringSource/spring-data-rest/issues/80,,43 - Babbage SR3,,,,,,,,,,,"04/Feb/14 5:14 AM;nickweedon;Here is a fix i have made for this (https://github.com/spring-projects/spring-data-rest/pull/133).
Note that this uses the 'draft-kelly-json-hal-06' IETF draft Hal style (the style that appears to be used in GETs in the latest SDR release).","05/Feb/14 8:28 AM;gregturn;The attached ticket reports the same issue which now has a fix.","06/Feb/14 8:56 AM;gregturn;This ticket is linked as a duplicate, so when the other one is closed, this can be closed as well. I believe @Nick's PR should be deemed irrelevant to this specific ticket.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#531|https://github.com/spring-projects/spring-data-rest/issues/531]. ",,,,,,,,,,,,,,,,,,,,
Lost paging after upgrading to 1.1.0.M1,DATAREST-135,50564,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,thomasd,thomasd,27/Aug/13 1:33 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,01/Oct/13 9:52 AM,,,,,2.0 M1 (Codd),,,,,,,1,,,,,"Github Author: swapsapar
Github Last-Updated: 2013-04-12T07:01:24Z
This issue was automatically imported from github

I have forked one of the examples of spring data rest to demonstrate/reproduce the issue I'm reporting.
Steps to reproduce
* clone repository at https://github.com/swapsapar/Spring-data-rest-sample
* run ""mvn clean jetty:run"" to launch server
* browse to http://localhost:8080/PersonWeb/people and notice the paged result
* optionally add 20+ people records by POSTing to people via curl ""curl http://localhost:8080/PersonWeb/people -X POST -H content-type:application/json -d '{""name"":""bob""}'""
* again notice the paged response  http://localhost:8080/PersonWeb/people with additional links e.g. ""people.next""
* lets make code changes to reproduce the bug. just run ""git cherry-pick 0dad5fc676b4de31cd476d7163f7a7520f41b684""
* Now again launch server by ""mvn clean jetty:run""
* this time we have already added 30 records for People during server startup.
* Notice the response at http://localhost:8080/PersonWeb/people 
* Instead of returning only 20 entries, all the 30+ entries are returned.
* Missing links for paging ""people.next""
* Query as seen in console is missing ""limit ?"" format.
So something is causing the pagination to not work after upgrade.
I noticed in debugger that CrudRepository.findAll() is called instead of PagingAndSortingRepository.findAll(Pageable pageable)
Cherry-pick change that caused the bug
https://github.com/swapsapar/Spring-data-rest-sample/commit/0dad5fc676b4de31cd476d7163f7a7520f41b684",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-09-15 17:40:48.81,37057,issuemaster(issuemaster),,"0|i06llz:",38539,36759,https://api.github.com/repos/SpringSource/spring-data-rest/issues/90,,SpringOne Aftermath,,,,,,,,,,,"15/Sep/13 5:40 PM;ww4;1) This seems to warrant a priority higher than ""minor"". Now there are endpoints that return the entire contents of large tables.

2) The ""totalElements"" and ""totalPages"" fields in the ""page"" block have disappeared.

","18/Sep/13 4:06 PM;ww4;I did a little investigation into this, and I got something working locally that gives me the page metadata in the responses. I'm not especially confident in what I did though, so I want to run it by you here first before I submit a pull request.

So in org.springframework.data.rest.webmvc.RepositoryEntityController there are methods listEntities() and listEntitiesCompact(). When the repo request has paging parameters, these methods return a PageableResources containing a Pageable. The problem is that Pageable is for specifying a page (i.e., it's a request-side thing), and this is basically the page number and page size. In the response we want full page metadata (element count on the page, total number of elements, total number of pages, etc.), like what Page and PageImpl have.

I modified the org.springframework.data.rest.repository.PageableResources constructor to take a Page<T> instead of a Pageable, and I modified listEntities() and listEntitiesCompact() to return a PageableResources containing a PageImpl instead of containing a Pageable. To get the totalElements (one of the other args in the PageableResources constructor), I just did a repoMethodInvoker.count() call.

Haven't tested it that much, but it seems to produce the expected page metadata result.

The main doubt I have is that the PageImpl constructor takes a List<T> content parameter, and the PageableResources constructor *also* takes a content parameter (albeit an Iterator). It looks like PageImpl uses its copy to know the number of elements on the page. So if it's correct that the PageableResources should contain the PageImpl, then probably we would need a @JsonIgnore on the content.

Anyway let me know if this is on the right track. If so I'm happy to submit a pull request.

Thanks. Willie
","18/Sep/13 5:31 PM;ww4;Just to give you a sense for the end result, here's the query URI:

http://localhost:2112/api/v1a/machines?page=1&limit=5

and here's the response:

\\

{code}
{
  ""links"" : [ {
    ""rel"" : ""machineRepo.search"",
    ""href"" : ""http://localhost:2112/api/v1a/machines/search""
  }],
  ""content"" : [ ...snip... ],
  ""page"" : {
    ""sort"" : null,
    ""number"" : 1,
    ""size"" : 10,
    ""totalPages"" : 11,
    ""totalElements"" : 108,
    ""firstPage"" : false,
    ""lastPage"" : false
  }
}
{code}

\\

I need to look into why firstPage returns false here (lastPage works when I request page 11), but overall it looks like it's working.
","19/Sep/13 1:32 AM;olivergierke;Before spending more time on 1.1 M1, you might wanna checkout the current 2.0 snapshots, which we will have an M1 release of very soon. We did some intensive internal refactorings on that and it's likely things have improved on that front already.","19/Sep/13 1:33 AM;ww4;OK, thanks Oliver. I'll give it a look.","19/Sep/13 9:39 AM;ww4;I looked at the code. This is indeed an area that received a lot of refactoring. Where formerly SDR was serializing the Pageable, it now assembles a Spring HATEOAS PageMetadata that has the desired fields.

Will 1.1.0.RELEASE be abandoned in favor of 2.x? I ask because I see DATAREST-135 as making SDR 1.1.0.M1 unusable, and I'm interpreting your response to mean that you're investing your efforts in 2.x. (I started moving some projects off of 1.0.0.RELEASE in favor of 1.1.x, but obviously don't want to do that if 1.1.x has no future.)
","01/Oct/13 9:51 AM;olivergierke;Okay, here's what I got to: I've checked the provided app working as expected once I got it's missing dependencies fixed, imports corrected (we moved some classes into different packages) etc.

With current 2.0.0.BUILD-SNAPSHOT this works as expected. However, note, that we're now exposing the pages with 0 index by default and also use the plain {{prev}}/{{next}} rels. I'll close this as fixed against 2.0 M1 which will be part of the Codd release train.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#520|https://github.com/spring-projects/spring-data-rest/issues/520]. ",,,,,,,,,,,,,,,,
Optional parameters for find method,DATAREST-133,50562,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Won't Fix,olivergierke,thomasd,thomasd,27/Aug/13 1:33 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,03/Nov/16 8:58 AM,,,,,,,,,,,,5,,,,,"Github Author: joelkuiper
Github Last-Updated: 2013-04-27T19:36:51Z
This issue was automatically imported from github

It might be somewhere in the documentation but I couldn't find it. 
Say I have a query method 
<code>
findByXAndYAndZ(@Param(""u"") String x, @Param(""v"") String y,@Param(""w"") String z);
</code>

When omitting any of the params the method complains about missing parameters, however I'd like some of those options to be optional. I could write something along the lines of 
<code>
findByX
findByXAndY
findByXAndYAndZ
</code>
However it does not seem to be possible to expose them under the same path/rel.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2016-11-03 08:58:01.493,37055,issuemaster(issuemaster),,"0|i06jhr:",38196,36757,https://api.github.com/repos/SpringSource/spring-data-rest/issues/93,,,,,,,,,,,,,"03/Nov/16 8:58 AM;olivergierke;We already have support for dynamic querying through Querydsl and the support for {{Optional}} on query methods already works but with different semantics than suggested.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#518|https://github.com/spring-projects/spring-data-rest/issues/518]. ",,,,,,,,,,,,,,,,,,,,,,
Updating value to NULL using Spring Data REST and PUT Method,DATAREST-130,50559,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Complete,gregturn,thomasd,thomasd,27/Aug/13 1:33 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,13/Jan/14 9:51 AM,,,,,2.0 RC1 (Codd),,,,,,,1,,,,,"Github Author: probsts
Github Last-Updated: 2013-06-07T13:10:40Z
This issue was automatically imported from github

We are using a Spring Data REST CRUD repository (1.0.0.RELEASE).  On a PUT, it seems there is no way to set a property to null.  If you send a null property (see JSON below), it is ignored.

{
""address1"": null
}

I've tracked the code down to the following lines in spring-data-rest-webmvc RepositoryRestController.java.  This code does not differentiate whether the client has explicitly sent a property with a null value (in which case, you want to set the property to null) as opposed to the client not sending the property at all (in which case, it should be ignored).

if(null != (incomingVal = attrMeta.get(incoming))) {
  attrMeta.set(incomingVal, entity);
}

How would someone update a property to null?  It seems like this is a real need.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-09-17 00:14:32.289,37052,issuemaster(issuemaster),,"0|i005q7:",938,36754,https://api.github.com/repos/SpringSource/spring-data-rest/issues/98,,42 - 2014 Kickoff,,,,,,,,,,,"17/Sep/13 12:14 AM;ww4;Seeing the same behavior with 1.0.0.RELEASE, 1.1.0.M1, and the current 2.0.0.BUILD-SNAPSHOT.

Agree with Thomas that this is a real need. Are we doing it incorrectly? :-)
","25/Sep/13 1:42 AM;ww4;OK, did some digging into 2.0.0.BUILD-SNAPSHOT, based on Thomas' report above.

In 2.0.0.BUILD-SNAPSHOT, the relevant class is org.springframework.data.rest.core.support.DomainObjectMerger. There's a merge method that has the following code (similar to what Thomas found):

{code}
if (null != fromVal && !fromVal.equals(targetWrapper.getProperty(persistentProperty))) {
    targetWrapper.setProperty(persistentProperty, fromVal);
}
{code}

I was able to PUT null values into properties by replacing the above with this:

{code}
if (fromVal == null && !entity.isIdProperty(persistentProperty)) {
    targetWrapper.setProperty(persistentProperty, null);
} else if (fromVal != null && !fromVal.equals(targetWrapper.getProperty(persistentProperty))) {
    targetWrapper.setProperty(persistentProperty, fromVal);
}
{code}

I'm happy to submit a pull request if the desired behavior is for nulls to actually null out the database fields (as opposed to null-as-ignore), but I don't know whether it is.

If it *is* the desired behavior, I think it will be important to make this very clear to users upgrading to 2.0.0, since it has the potential to be destructive. (I'm thinking of a user thinking they're doing a partial update of a persistent entity, only to find out that the missing properties wipe things out in the DB.)

If it's *not* the desired behavior, then it would be helpful indeed to understand the proper way to null properties out.
","25/Sep/13 2:26 PM;ww4;According to REST in Practice (which I know Oliver's a big fan of), PUT is idempotent, and expects the entire resource representation (p. 70). PATCH is for partial updates, though I don't know if it's more for sets of instructions or for the null-as-ignore thing that SDR currently does. At any rate it seems that PUT shouldn't ignore the nulls.

","27/Sep/13 2:21 PM;ww4;I've created a pull request for this issue; please review:

https://github.com/spring-projects/spring-data-rest/pull/121
","09/Jan/14 6:53 PM;gregturn;I added some tests to a local branch I will look at applying when this gets merged.","13/Jan/14 9:51 AM;gregturn;Added test cases and merged to master.","06/Mar/14 1:53 PM;antapos;This issue has not been resolved for associations. The code in method DomainObjectMerger should be changed according as the following code excerpt:

            public void doWithAssociation(Association<? extends PersistentProperty<?>> association) {

                PersistentProperty<?> persistentProperty = association.getInverse();
                Object fromVal = fromWrapper.getProperty(persistentProperty);

                if (nullPolicy == APPLY_NULLS || (fromVal != null && !fromVal.equals(targetWrapper.getProperty(persistentProperty)))) {
                    targetWrapper.setProperty(persistentProperty, fromVal);
                }
            }
","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#515|https://github.com/spring-projects/spring-data-rest/issues/515]. ",,,,,,,,,,,,,,,,
Sources for 1.1.0.M1 build are incorrect,DATAREST-129,50558,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Won't Fix,olivergierke,thomasd,thomasd,27/Aug/13 1:33 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,18/Dec/14 9:06 AM,,,,,,,,,,,,0,,,,,"Github Author: pablocaselas
Github Last-Updated: 2013-05-10T17:14:48Z
This issue was automatically imported from github

I am trying to debug spring data rest but the compiled version is not the same as the source version.
I am using maven to get spring-data-rest.

In the source version there is no method getPersistentEntity in the org.springframework.data.repository.support.Repositories class",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-12-17 14:16:39.236,37051,issuemaster(issuemaster),,"0|i06jh3:",38193,36753,https://api.github.com/repos/SpringSource/spring-data-rest/issues/99,,55 - Evans SR2,,,,,,,,,,,"17/Dec/14 2:16 PM;gregturn;Since Spring Data REST is now on version 2.3, I suggest we close this ticket as WON'T FIX.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#514|https://github.com/spring-projects/spring-data-rest/issues/514]. ",,,,,,,,,,,,,,,,,,,,,,
spring data rest with JPA XML mapping informations,DATAREST-124,50553,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Duplicate,olivergierke,thomasd,thomasd,27/Aug/13 1:32 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,17/May/15 11:46 PM,,,,,,,,,,,,0,,,,,"Github Author: jclagache
Github Last-Updated: 2013-07-10T13:35:19Z
This issue was automatically imported from github

i forked spring-restbucks and put JPA mapping informations in XML.
It worked until I commented the Id attribute in Order.
This throws a NPE without stacktrace. Debugging, i can see that RepositoryRestRequest contains a JpaPersistentEntityImpl with a null idProperty.
Steps to reproduce:
1. git clone https://github.com/jclagache/spring-restbucks.git
2. mvn jetty:run
3. Run REST Shell
4. follow orders
5. get 1",,,,,,,,,,,,,,,,DATAJPA-658,,,,,,,,,,,,,,,,2015-05-17 11:51:21.14,37046,issuemaster(issuemaster),,"0|i06jfz:",38188,36748,https://api.github.com/repos/SpringSource/spring-data-rest/issues/108,,,,,,,,,,,,,"17/May/15 11:51 AM;ckristo;Hi,

I experience the same problem when using XML-only JPA config (via orm.xml). The problem seems to reside in the code that generates the link to an element. It tries to fetch the entity's ID property which is null when using XML-only JPA config because Spring Data JPA's {{JpaPersistentPropertyImpl.isIdProperty()}} just checks for annotations to determine if a JPA property is an ID property or not. ","17/May/15 11:46 PM;olivergierke;Duplicates DATAJPA-658.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#508|https://github.com/spring-projects/spring-data-rest/issues/508]. ",,,,,,,,,,,,,,,,,,,,,
@JsonIgnore and other Jackson annotations are ignored,DATAREST-117,50546,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Complete,olivergierke,thomasd,thomasd,27/Aug/13 1:32 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,04/Jun/15 9:07 AM,,,,,2.0 GA (Codd),,,,,,,2,,,,,"Github Author: speedyg
Github Last-Updated: 2013-08-21T10:01:31Z
This issue was automatically imported from github

In my application and in the example application the @JsonIgnore annotation is ignored.

Reproduce:
Add an @JsonIgnore annotation to the field status in Order.java. The status field should not be serialized.
Call http://localhost:8080/restbucks/orders/1

The status property is (still) exported.

Also tried @JsonIgnoreProperties and @XmlTransient, no effect.

Additionally, i am not able to find another way to exclude a property.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-08-30 03:37:21.173,37039,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/135,"0|i004uf:",792,36741,https://api.github.com/repos/SpringSource/spring-data-rest/issues/117,,43 - Babbage SR3,,,,,,,,,,,"30/Aug/13 3:37 AM;ajamthe;I have the same issue. Any fix / workaround will be appreciated.","29/Oct/13 5:55 AM;gonzaloalvarez;Also, XmlTransient annotation gets ignored. Any workaround?","29/Oct/13 6:10 AM;pcaselas;Same issue here. Have you guys found any workaround?","29/Oct/13 6:14 AM;olivergierke;Have you tried recent 2.0.0.BUILD-SNAPSHOTS?","29/Oct/13 6:17 AM;gonzaloalvarez;Yes, I am working with 2.0.0.BUILD-SNAPSHOT, jackson 2.2.3 and spring 3.2.4.RELEASE, and it doesn't work :(","29/Oct/13 6:21 AM;gonzaloalvarez;I guess it has something to do with method in line 268 in file [PersistentEntityJackson2Module.java|https://github.com/spring-projects/spring-data-rest/blob/master/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/json/PersistentEntityJackson2Module.java], but I'm not really sure. I guess Jackson Object Mapper should be invoked somewhere over there, but it is just a wild guess...","29/Oct/13 8:02 AM;pcaselas;My version is 1.0.0.RELEASE and I'd rather not change it, cause I've made changes of my own to some classes.

Did you guys add support for printing ids on json objects on 2.0?","04/Feb/14 4:24 AM;nickweedon;I have finished writing a fix for this issue that will allow all Jackson annotations to be used for both serialization and deserialization.
See pull request 133 (https://github.com/spring-projects/spring-data-rest/pull/133).","07/Feb/14 7:37 AM;gregturn;For now, let's narrow the scope of this to only deal with JSON. If enough desire for XML shows up, we can address that in future issues.","14/Feb/14 4:31 AM;olivergierke;This seems to have been fixed by DATAREST-238 already.","14/Feb/14 7:16 AM;nickweedon;I thought that DATAREST-238 only had to do with deserialization? I believe this is an issue for serialization as well.
I have some unit tests in the #133 pull request (in the JPA web integration test suite) that might be useful for verifying this ticket.","14/Feb/14 7:55 AM;gregturn;I refashioned the code edits based on Ollie's rewrite of the HTTP handling.","14/Feb/14 7:56 AM;gregturn;This is a refashioned commit based on the latest round of edits to master by Ollie.","14/Feb/14 8:38 AM;nickweedon;I just had a look at pull request #135. I don't think that this addresses the full scope of this ticket. The pull request seems to just emulate the behavior of the Jackon's @JsonIgnore annotation. Note that the ticket title reads '@JsonIgnore *and other Jackson annotations* are ignored'. 

The other problem with this approach is that composite classes will be processed in a way that allows Jackson annotations to be used where as the containing (domain class) class will be processed using the custom serializer which does not honor all Jackson annotations. This creates a kind of inconsistency which is, at least, non-intuitive to the developer.

Did you take a look at how I handled this in pull request 133? The serialization solution i have there allows all Jackson annotations to be used in both composite classes and the containing class.","19/Feb/14 2:43 AM;olivergierke;Feel free to give the latest snapshot a try. We've significantly changed the (de)serialization for DATAREST-248 and effectively delegate to Jackson *except* for association properties that are exported by repositories. We transform those to links (as we did before) and tell Jackson to ignore those on rendering. Everything else is handled by Jackson directly and should thus pick up customizations.","20/Feb/14 6:37 AM;nickweedon;Sounds great, i'll give it a try as soon as I can, which unfortunately won't be for at least another day or two.","20/Feb/14 6:41 AM;olivergierke;No worries, Nick. I just wanted to let you now that we addressed your concerns :).","25/Feb/14 5:55 AM;nickweedon;I had a look at the changes and ran them against my unit tests from pull request 133. I really like the way that you implemented this fix, I think it is much more elegant than my fix. I didn't know about the (de)serialization modifiers, that is a much better way to do it.

I had a NPE exception when i ran my test at first and was about to upload a pull request with a suggested fix but then when I rebased my changes I saw that you already fixed it, just an hour after I fetched from the upstream :)

I did notice however that you only applied the PersistentProperty null check to serialization. My unit tests indicated that this needs to be added to deserialization also, since the PersistentPropery will be null during serialization if @JsonProperty is used (i.e. if a field 'alias' is being supplied) since the name of the JSON field won't match the name the actual class property name.

One other rather obvious thing to note is that there would of course need to be more work done to cover the scenario where the @JsonProperty annotation is applied to an association property or an ID property. I would hope that this is more of an edge case but it is of course still a possible scenario.

I was thinking about how to solve this and I thought that one possible solution might be to build an 'alias' map during construction of the (de)serialization modifiers by scanning the domain classes for @JsonProperty annotations. This map could then be checked at run time in the case that a PersistentProperty cannot be found.

It also briefly occurred to me that a these fields could be added to the PersistentEntity property cache in the org.springframework.data.mapping.context.AbstractMappingContext class. I quickly discarded this shit idea however since I think it would be far too invasive since this class lives in spring data commons. The other bad thing about this shit idea is that this would mean that the class would then have knowledge of Jackson annotations, introducing tight coupling.

You probably have a better idea but I thought I would offer up my suggestions anyhow.

For what it's worth I went ahead and created pull request #136 since I thought that the unit tests in this pull request might still be useful to help with reproducing the issue that occurs during deserialization (related to the use of the @JsonProperty annotation).
","25/Feb/14 6:01 AM;nickweedon;By the way, I just wanted to say thanks for readdressing this issue. I have been battling with a rather inflexible REST client and these changes have allowed me to properly integrate with SDR. It saddened me to think that I might have to abandon SDR and go back to manually marshaling JSON data. Thanks again, really appreciate it :)","25/Feb/14 6:20 AM;gregturn;@Nick I'm glad we put SDR back onto a solid foundation and it's serving your needs. 

If you have test cases that expose problems, feel free to post them possibly as a pull request on Github. You can flag stuff as ""DON'T MERGE"" at the top, and then provide more details. We can chat back and forth, and if it pans out as a real bug, we can then fashion a real JIRA issue and work towards fixing stuff. This let's us use github's ""review"" model handily.

In general, we need test cases to expose these problems, and as you've seen recently, this project is moving heavily towards a test-then-fix direction, compared to where it was perhaps a year ago. Narrow, focused test cases help us knock out issues and your involvement is great at moving things along.

As a side note, I'm working on the first of what may be many getting started guides (http://spring.io/guides) for SDR. I hope we can lower the bar and make it easier for others to start using it as well.","25/Feb/14 6:50 AM;nickweedon;@Greg I just flagged my #136 pull request with ""DON'T MERGE"" but i'm not sure if I have done this correctly. I simply suffixed the title with ""DON'T MERGE"", is this what you mean? I couldn't seem to find any other way to do this. This pull request includes the unit tests that reproduce the problem by the way.

I like the test driven approach. It seems to work particularly well with developer to developer interaction. On that note, this has been an interesting experience for me since my usual means of collaboration include work meetings or chatting to someone over a cubicle divider :)

Thanks for letting me know about the getting started guides too. I'll definitely take a look some time. 

If you like, I'd be happy to contribute to the guide in the area of integrating spring security since I found that I had to do a fair bit of web searching and general tinkering in this area to get this to work with my web application. There is still one area of this subject that I still need to find a solution to however (relates to discussion in DATAREST-236, Sri's problem with the findOne method).","04/Jun/15 9:00 AM;tilalilalou;This was only fixed for @JsonIgnore annotation, not for all Jackson annotations.

For example, in my project I configured Jackson to ignore all property without annotations :
spring.jackson.mapper.auto_detect_getters: false
spring.jackson.mapper.auto_detect_is_getters: false

The problem is that @JsonValue and @JsonProperty are ignored by Data REST, therefore I cannot serialize anything.

I chose to reopen this issue because the title states ""other Jackson annotations"" as well as @JsonIgnore, correct me if that was wrong.
Thanks for reading!","04/Jun/15 9:07 AM;olivergierke;Please don't re-open tickets that have been marked as resolved against an already released version. Feel free to open a new ticket that summarizes what you're still missing.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#499|https://github.com/spring-projects/spring-data-rest/issues/499]. "
@RepositoryEventHandler isn't work,DATAREST-115,50543,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Cannot Reproduce,thomasd,thomasd,thomasd,27/Aug/13 1:11 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,03/Dec/13 6:13 AM,,,,,,,,,,,,2,,,,,"Github Author: excalibur
Github Last-Updated: 2013-08-24T02:42:39Z

UserEventHandler.JAVA
{code}
@RepositoryEventHandler(User.class)
public class UserEventHandler {

    @HandleBeforeSave
    public void handleBeforeSave(User user) {
        System.out.println(""**********handleBeforeSave***********"");
    }

    @HandleAfterDelete
    public void handleAfterDelete(User user) {
        System.out.println(""**********handleAfterDelete***********"");
    }
}
{code}
MyRepositoryRestMvcConfiguration.java
{code}
@Configuration
public class MyRepositoryRestMvcConfiguration extends RepositoryRestMvcConfiguration {
    @Bean
    public MessageSource messageSource() {
        ReloadableResourceBundleMessageSource msgsrc = new ReloadableResourceBundleMessageSource();
        msgsrc.setBasename(""/WEB-INF/classes/ValidationMessages"");
        msgsrc.setFallbackToSystemLocale(false);
        return msgsrc;
    }

    @Bean
    UserEventHandler UserEventHandler() {
        return new UserEventHandler();
    }
}
{code}

How trigger it?need publish custom event in spring context?

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-08-28 06:21:15.677,37036,issuemaster(issuemaster),,"0|i006pb:",1099,36738,https://api.github.com/repos/SpringSource/spring-data-rest/issues/119,,SpringOne Aftermath,The Road to Codd M1,Codd M1,,,,,,,,,"28/Aug/13 6:21 AM;burn;Can't get this to work either... - so is it really a minor bug? ;)","29/Aug/13 1:47 AM;thomasd;Hi Björn,

thanks for your comment :)

we just migrated all github issues automatically to jira - unfortunately most of them were not prioritized. 
Therefore we decided to import them with priority set to ""minor"" and to reconsolidate their priorities afterwards - we are in the middle of that process ;-)

Cheers
Thomas","02/Oct/13 2:09 AM;thomasd;Hi Björn,

which DATA-REST version did you use?
This works in 2.0.0.BUILD-SNAPSHOT, would you mind giving it a try?

Cheers,
Thomas","03/Dec/13 6:13 AM;thomasd;Due to lack of feedback.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#497|https://github.com/spring-projects/spring-data-rest/issues/497]. ",,,,,,,,,,,,,,,,,,,
Could not initialize proxy - no Session,DATAREST-114,50526,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Critical,Fixed,olivergierke,ptahchiev,ptahchiev,26/Aug/13 9:09 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,14/Oct/13 4:29 AM,1.1.0.M1,,,,2.0 M1 (Codd),,,,,,,3,,,,,"Hi guys,

I'm using Spring Data Rest, version 1.1.0.M1 and it doesn't work because I have collections that are loaded lazily from my database, and instead of the real object, a proxy is returned and spring-data-rest throws this exception:
{code}
com.fasterxml.jackson.databind.JsonMappingException: failed to lazily initialize a collection of role: com.xxxx.xxxx.core.model.catalog.ProductModel.name, could not initialize proxy - no Session
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:131)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValue(ObjectMapper.java:1728)
	at com.fasterxml.jackson.core.base.GeneratorBase.writeObject(GeneratorBase.java:258)
	at com.fasterxml.jackson.core.JsonGenerator.writeObjectField(JsonGenerator.java:1110)
	at org.springframework.data.rest.repository.json.PersistentEntityJackson2Module$ResourceSerializer$1.doWithPersistentProperty(PersistentEntityJackson2Module.java:323)
	at org.springframework.data.mapping.model.BasicPersistentEntity.doWithProperties(BasicPersistentEntity.java:241)
	at org.springframework.data.rest.repository.json.PersistentEntityJackson2Module$ResourceSerializer.serialize(PersistentEntityJackson2Module.java:298)
	at org.springframework.data.rest.repository.json.PersistentEntityJackson2Module$ResourceSerializer.serialize(PersistentEntityJackson2Module.java:262)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:120)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValue(ObjectMapper.java:1728)
	at org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.writeInternal(MappingJackson2HttpMessageConverter.java:194)
	at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:179)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:148)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:90)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:189)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:69)
	at org.springframework.data.rest.webmvc.ResourceProcessorHandlerMethodReturnValueHandler.handleReturnValue(ResourceProcessorHandlerMethodReturnValueHandler.java:163)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:69)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:122)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:827)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:735)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:848)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:669)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:457)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:557)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1075)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:384)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1009)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
	at org.eclipse.jetty.server.Server.handle(Server.java:368)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:489)
	at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:942)
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:1004)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:640)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
	at java.lang.Thread.run(Thread.java:722)

{code}

What needs to be done is the spring-data should query for the inside a transaction, and should convert the product to json inside the same transaction. To me it seems like a bug, or at least like a really necessary improvement.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-10-01 09:02:26.165,37020,issuemaster(issuemaster),,"0|i007hj:",1229,36722,,,The Road to Codd M1,,,,,,,,,,,"01/Oct/13 9:02 AM;olivergierke;Do you still see this issue with a current 2.0.0.BUILD-SNAPSHOT? We're registering an {{OpenEntityManagerInViewInterceptor}} actually and that one doesn't seem to show up in your stack trace.","02/Oct/13 1:43 AM;ptahchiev;Hi Oliver,

it works great with 2.0.0.BUILD-SNAPSHOT.

Thanks for your support.","02/Oct/13 1:44 AM;ptahchiev;Hi Oliver,
it works great with 2.0.0.BUILD-SNAPSHOT.
Thanks for your support.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#496|https://github.com/spring-projects/spring-data-rest/issues/496]. ",,,,,,,,,,,,,,,,,,,,
/{repository}/schema fails on binding parameter - RepositoryRestRequest,DATAREST-113,50452,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,springuser007,springuser007,21/Aug/13 8:40 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,07/Oct/13 6:47 AM,,,,,2.0 M1 (Codd),,,,,,,0,,,,,"Invoking /{repository?/schema with ""application/schema+json"" accept header fails because of binding fails to default constructor for ""org.springframework.data.rest.webmvc.RepositoryRestRequest""

Stacktrace:
------------------------------------------------------------------

EVERE: Servlet.service() for servlet [dispatcher] in context with path [/dc] threw exception [Request processing failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.data.rest.webmvc.RepositoryRestRequest]: No default constructor found; nested exception is java.lang.NoSuchMethodException: org.springframework.data.rest.webmvc.RepositoryRestRequest.<init>()] with root cause
java.lang.NoSuchMethodException: org.springframework.data.rest.webmvc.RepositoryRestRequest.<init>()
	at java.lang.Class.getConstructor0(Class.java:2706)
	at java.lang.Class.getDeclaredConstructor(Class.java:1985)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:105)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.createAttribute(ModelAttributeMethodProcessor.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.createAttribute(ServletModelAttributeMethodProcessor.java:81)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:101)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:123)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:827)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)
	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1023)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:312)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-10-01 09:25:58.381,36946,issuemaster(issuemaster),,"0|i06llr:",38538,36648,,,SpringOne Aftermath,,,,,,,,,,,"01/Oct/13 9:25 AM;olivergierke;I've just pushed a test case to master to verify the exception not to pop up. I fixed a few glitches in the schema creation along the way. Would you mind giving the 2.0.0.BUILD-SNAPSHOT a spin and either verify this being fixed for you or still existant?","02/Oct/13 12:07 PM;springuser007;Thanks it works now.

In a different case, this fails when a bean has boolean attribute with name starting with ""is""?

Ex. Below Country class has a property ""isActive"" instead of ""active""

{code}
public class Country {

	//properties
	private String code;
	private String name;
	private boolean isActive;
	
	//getters/setters generated by eclipse

	public String getCode() {
		return code;
	}
	public void setCode(String code) {
		this.code = code;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public boolean isActive() {
		return isActive;
	}
	public void setActive(boolean isActive) {
		this.isActive = isActive;
	}
	
}
{code}


","07/Oct/13 6:47 AM;olivergierke;Please lets concentrate on a single issue per ticket. The code you showed here doesn't adhere to the Java Bean specification as according to it the field name would have to be {{active}} to align with {{isActive}} and {{setActive}}.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#495|https://github.com/spring-projects/spring-data-rest/issues/495]. ",,,,,,,,,,,,,,,,,,,,
@RestResource exported=false ignored on methods,DATAREST-107,50363,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Complete,gregturn,pwebb,pwebb,15/Aug/13 11:57 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,13/Jan/14 12:23 PM,1.1.0.M1,,,,2.0 RC1 (Codd),,,,,,,0,,,,,"The following will currently fail with duplicate mapping errors.

{code:java}
public interface CustomerRepository extends PagingAndSortingRepository<Customer, Long> {

	@RestResource(exported=false)
	List<Customer> findByUserId(Long id);

	Page<Customer> findByUserId(Long id, Pageable pageable);

}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2014-01-10 07:31:15.438,36857,issuemaster(issuemaster),,"0|i005qn:",940,36559,,,42 - 2014 Kickoff,,,,,,,,,,,"16/Aug/13 12:02 AM;pwebb;https://github.com/SpringSource/spring-data-rest/pull/115","10/Jan/14 7:31 AM;gregturn;Wrote some extra tests and pushed them to gregturn/DATAREST-107 which can be merged as part of handling this pull request.","12/Jan/14 5:02 AM;nickweedon;Just thought I would give a heads up that I have wrote a fix for this issue as well as numerous other issues including AOP not working on the findOne method (this is quite a problem if you wish to use Spring method based security with Spring Rest).

The change also increases efficiency by performing all of the reflection based 'CRUD method choosing' logic once per repository (it creates a crud method 'VTable') instead of every CRUD method call. Consequently there is only one concrete RepositoryInvoker class now and the logic is also now more maintainable IMHO.

The implementation still bypasses reflection and calls the methods directly for concrete repository types.

I will finish it off tomorrow night and will upload it (once i work out how this 'pull request' thingy works) then or the following night.","12/Jan/14 11:13 PM;nickweedon;I have create a related bug DATAREST-217 and added a fix for it (on a separate pull request). DATAREST-217 relates to the web controller code not checking to see if the findAll method is exported (as opposed to the annotation not being read).","13/Jan/14 12:23 PM;gregturn;Merged this fix as well as the extra tests.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#490|https://github.com/spring-projects/spring-data-rest/issues/490]. ",,,,,,,,,,,,,,,,,,
Add support for non-CrudRepositories,DATAREST-103,49788,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,olivergierke,olivergierke,olivergierke,17/Jul/13 5:55 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,01/Oct/13 9:53 AM,,,,,2.0 M1 (Codd),,,,,,,1,,,,,"Currently only repositories implementing {{CrudRepository}} can be used with Spring Data REST. Spring Data Commons now also exposes non-{{CrudRepository}} instances.

We should rewrite the repository invocation parts to detect the CRUD methods necessary on the repository and provide a generic API to invoke these methods from clients without having to worry about pagination, id conversion etc.

We also should treat {{CrudRepository}} and {{PagingAndSortingRepository}} as special cases and try to work around the reflection calls generally necessary for custom repositories.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-08-29 18:33:29.199,36290,issuemaster(issuemaster),,"0|i06lm7:",38540,35992,,,SpringOne Aftermath,,,,,,,,,,,"29/Aug/13 6:33 PM;ajamthe;Can this be included in the next release/milestone. It would make my job much simpler if we had this.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#486|https://github.com/spring-projects/spring-data-rest/issues/486]. ",,,,,,,,,,,,,,,,,,,,,,
Build broken,DATAREST-88,48737,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Critical,Fixed,jbrisbin,olivergierke,olivergierke,27/May/13 6:25 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,05/Jun/13 3:53 AM,,,,,2.0 M1 (Codd),,,,,,,0,,,,,"{noformat}
Serendipity:temp olivergierke $ git clone https://github.com/SpringSource/spring-data-rest.git
Cloning into 'spring-data-rest'...
remote: Counting objects: 5298, done.
remote: Compressing objects: 100% (1957/1957), done.
remote: Total 5298 (delta 1272), reused 5228 (delta 1212)
Receiving objects: 100% (5298/5298), 1.04 MiB | 686 KiB/s, done.
Resolving deltas: 100% (1272/1272), done.
Serendipity:temp olivergierke $ cd spring-data-rest/
Serendipity:spring-data-rest @ master olivergierke $ ./gradlew build

FAILURE: Build failed with an exception.

* Where:
Build file '/Users/olivergierke/temp/spring-data-rest/build.gradle' line: 301

* What went wrong:
A problem occurred evaluating root project 'spring-data-rest'.
> Could not find method create() for arguments [referenceHtmlMulti, class HtmlMultiDocbookReferenceTask] on task set.

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.

BUILD FAILED

Total time: 34.348 secs
Serendipity:spring-data-rest @ master olivergierke $ 
{noformat}

Also see the CI job failing at https://build.springsource.org/browse/SPRINGDATA-DATAWEB-217",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:20.628,35252,issuemaster(issuemaster),,"0|i06bxr:",36972,34954,,,,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#472|https://github.com/spring-projects/spring-data-rest/issues/472]. ",,,,,,,,,,,,,,,,,,,,,,,
Controller implementations should not be annotated with @Controller,DATAREST-83,48433,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Fixed,jbrisbin,olivergierke,olivergierke,04/May/13 10:26 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,05/Jun/13 11:55 AM,1.1.0.M1,,,,2.0 M1 (Codd),,,,,,,0,,,,,"The controller implementations are currently annotated with {{@Controller}} which causes issues when you use Spring Data REST in the same application context in which you have Spring MVC activated through {{@EnableWebMvc}}. The latter registers a {{RequestHandlerMapping}} that scans the {{ApplicationContext}} for all beans annotated with {{@Controller}} and will find the SD REST controllers. As the {{RequestHandlerMapping}} has higher precedence than the {{RepositoryRestHandlerMapping}} it will take over the execution of the controllers which causes trouble in case the additional functionality applied in {{RRHM}} is (e.g. baseUri configuration etc.) needed.

Actually the classes don't need to be annotated with {{@Controller}} as they are registered explicitly and the {{RRHM}} explicitly considers these classes anyway.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:20.156,34953,issuemaster(issuemaster),,"0|i06aiv:",36743,34655,,,,,,,,,,,,,,"31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#468|https://github.com/spring-projects/spring-data-rest/issues/468]. ",,,,,,,,,,,,,,,,,,,,,,,
Unrelated entities accessible as if they were related,DATAREST-74,47648,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Cannot Reproduce,olivergierke,jacarma,jacarma,06/Mar/13 4:42 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,11/Mar/14 10:29 AM,,,,,,,,,,,,0,,,,,"Author with id 1 wrote book with id 1.

When I access */books/1/author* the data of author of the book 1 is returned. OK

When I access */books/1/author/2* the data of author with id 2 is returned even the author 2 did not write the book 1. It makes harder to secure the application.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-03-06 09:30:33.236,34233,issuemaster(issuemaster),,"0|i06693:",36051,33935,,,,,,,,,,,,,,"06/Mar/13 9:30 AM;jbrisbin;In testing the latest snapshots I wasn't able to access an entity that wasn't assigned to a parent. Could you provide some more information and maybe an example project that demonstrates this behavior? The relationships are managed via JPA, so if you can access it via REST you should be able to do the same using the Repository instance directly (in a test case, say) and vis versa.","08/Mar/13 2:52 AM;jacarma;You are right, it does not happen in the last version. Close please","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#459|https://github.com/spring-projects/spring-data-rest/issues/459]. ",,,,,,,,,,,,,,,,,,,,,
@RestResource(exported = false) is not considered on repository interfaces,DATAREST-72,47645,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,olivergierke,olivergierke,06/Mar/13 3:57 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,21/Nov/13 1:57 AM,,,,,2.0 M1 (Codd),,,,,,,1,,,,,Run the Spring RESTBucks example with {{mvn jetty:run}}. Browse http://localhost:8080 and see the repositories for credit cards and payments being exposed although the repositories carry the aforementioned annotation.,,,,,,,,,,,,DATAREST-196,,,,,,,,,,,,,,,,,,,,2013-03-06 09:31:15.306,34230,issuemaster(issuemaster),,"0|i0668f:",36048,33932,,,,,,,,,,,,,,"06/Mar/13 9:31 AM;jbrisbin;Fixed in the latest snapshots.","08/Mar/13 8:23 AM;jcasalruiz;Not sure if this requires a new ticket, but seems that @RestResource(exported = false) is not considered at field and method level.

Test:
# git clone https://github.com/olivergierke/spring-restbucks.git
# git checkout sd-rest-next
# Add @RestResource(exported = false) to items at Order.java
# Add @RestResource(exported = false) to findByStatus at OrderRepository.java
# mvn jetty:run
# curl http://localhost:8080/orders/search
# Method fundByStatus appears.
# curl http://localhost:8080/orders/2
# Field Items appear.","08/Mar/13 8:24 AM;jcasalruiz;Details at comments.","08/Mar/13 1:51 PM;jbrisbin;We actually had some discussions about this internally early on. We arm wrestled over it and eventually ended up with the notion that it's not a terribly good idea to use an annotation to turn on and off a property. The idea is that it's not a full Resource in the same sense that a Repository or an Entity is and you have to search both the Field and try and find a Method if you're going to support both field-level and method-level annotations for a property.

If you override the {{configureRepositoryRestConfiguration}} method in the {{RepositoryRestMvcConfiguration}}, you can add a {{ResourceMapping}} for the property of an entity. That's where you can turn things off.


{code:java}
@Override protected void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {
	config.addResourceMappingForDomainType(Person.class)
	      .addResourceMappingFor(""siblings"")
	      .setExported(false);
}
{code}


This is copied from the spring-data-rest-example application (I added the setExported to demonstrate this and validated that it does turn off a property in the rest-shell) included in the spring-data-rest source code.","11/Mar/13 2:04 AM;jcasalruiz;The whole problem that I'm having is about securing my application. {{RestResource}} at field level in addition of {{@JsonIgnore}} just helped without being a really good idea. I'll try your solution.","11/Mar/13 4:22 AM;jcasalruiz;It's the same for repository methods? Seems that now ignores the annotation at repository method level too.","23/Nov/13 6:40 AM;ptahchiev;I don't think this is fixed.

It is closely related to DATACMNS-375, which I still experience, even when using data-rest-core 2.0.0.M1, with data-rest-repository 1.1.0.M1, with data-commons 1.7.0.M1.

Please reopen it.","24/Nov/13 10:28 AM;olivergierke;What exactly makes you think it's not fixed? With the 2.0 M1 release we entirely rewrote the mapping metadata for the resources exposed for repositories. You might wanna check the according [unit test|https://github.com/spring-projects/spring-data-rest/blob/master/spring-data-rest-core/src/test/java/org/springframework/data/rest/core/mapping/RepositoryCollectionResourceMappingUnitTests.java#L48] for the mapping metadata honoring the annotation to not expose it.

I'll move DATACMNS-375 to SD REST as none of the export mechanisms is managed in Spring Data Commons directly. The ticket effectively seems to be a duplicate of this one here.","24/Nov/13 10:31 AM;olivergierke;If you can come up with a reproducible test case, feel free to open another ticket. Simply making the repository package protected also prevents it from being excluded by default.","24/Nov/13 12:33 PM;ptahchiev;As you suggested I have created a new issue with a sample project to reproduce it. Please refer to DATAREST-197","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#457|https://github.com/spring-projects/spring-data-rest/issues/457]. ",,,,,,,,,,,,,
Potential NullPointerExceptions in PersistentEntityLinkBuilder,DATAREST-70,47627,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Complete,jbrisbin,olivergierke,olivergierke,04/Mar/13 11:41 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,05/Mar/13 7:06 AM,,,,,1.1.0.M1,,,,,,,0,,,,,The constructor of {{PersistentEntityLinkBuilder}} looks up a repository mapping through {{getResourceMapping(…)}}. This method can return {{null}} but the returned result mapping is getting called {{getPath()}} on it without guarding against {{null}} values.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-03-05 07:06:54.802,34212,issuemaster(issuemaster),,"0|i0664f:",36030,33914,,,,,,,,,,,,,,"05/Mar/13 7:06 AM;jbrisbin;Should be fixed in https://github.com/SpringSource/spring-data-rest/commit/9ac79514b7d85eb060fa07cd59f0e97ea18d8d8d","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#455|https://github.com/spring-projects/spring-data-rest/issues/455]. ",,,,,,,,,,,,,,,,,,,,,,
Exporters should only be created for those technologies that exist in the classpath,DATAREST-67,47147,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Complete,jbrisbin,jbrisbin,jbrisbin,23/Jan/13 5:12 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,06/Mar/13 12:08 PM,,,,,1.1.0.M1,,,,,,,0,,,,,It should be possible to start an SD REST application that plans on using MongoDB without requiring the JPA components needed by the JPA exporter. There should be a detection mechanism to find this and selectively register the exporter if the appropriate objects and classes exist in the application context.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2020-12-31 10:29:18.237,33731,issuemaster(issuemaster),,"0|i06373:",35556,33433,,,,,,,,,,,,,,"06/Mar/13 12:08 PM;jbrisbin;Latest snapshots include a helper that eliminates a compile-time dependency on JPA and was requiring the JPA jar to be in the classpath even if you were only using the MongoDB support.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#452|https://github.com/spring-projects/spring-data-rest/issues/452]. ",,,,,,,,,,,,,,,,,,,,,,
Inlined complex objects not rendered at all,DATAREST-66,47143,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Complete,jbrisbin,olivergierke,olivergierke,23/Jan/13 1:33 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,06/Mar/13 12:11 PM,,,,,1.1.0.M1,,,,,,,0,,,,,"Steps to reproduce:

1. {{git clone https://github.com/olivergierke/spring-restbucks.git}}
2. {{git checkout sd-rest-next}}
3. {{mvn jetty:run}}
4. {{curl http://localhost:8080/orders}}
5. {{items}} property is {{null}}
6. Shutdown Jetty:
7. {{git checkout master}}
8. {{mvn jetty:run}}
9. {{curl http://localhost:8080/orders}}
10. {{items}} property is populated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-03-06 12:11:00.903,33727,issuemaster(issuemaster),,"0|i06367:",35552,33429,,,,,,,,,,,,,,"06/Mar/13 12:11 PM;jbrisbin;Fixed in latest snapshots.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#415|https://github.com/spring-projects/spring-data-rest/issues/415]. ",,,,,,,,,,,,,,,,,,,,,,
JSONP handling prevents ResourceProcessors from being rendered,DATAREST-65,47142,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Complete,jbrisbin,olivergierke,olivergierke,23/Jan/13 1:30 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,06/Mar/13 12:09 PM,,,,,1.1.0.M1,,,,,,,0,,,,,"Whenever the server renders JSONP eventually, no {{ResourceProcessor}} beans are invoked. Steps to reproduce:

1. {{git clone https://github.com/olivergierke/spring-restbucks.git}}
2. {{git checkout sd-rest-next}}
3. {{mvn jetty:run}}
4. {{curl http://localhost:8080/orders}} -> JSONP is rendered by default
5. Representation only contains the self link
6. {{curl -H ""Accept: application/json"" http://localhost:8080/orders}} -> JSON is rendered
7. Representation contains additional links

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-03-06 12:09:26.349,33726,issuemaster(issuemaster),,"0|i0635z:",35551,33428,,,,,,,,,,,,,,"06/Mar/13 12:09 PM;jbrisbin;Fixed in the latest snapshots.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#451|https://github.com/spring-projects/spring-data-rest/issues/451]. ",,,,,,,,,,,,,,,,,,,,,,
HTTP status code set in the controller not properly propagated into the response on entity creation,DATAREST-64,47141,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Complete,jbrisbin,olivergierke,olivergierke,23/Jan/13 1:19 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,06/Mar/13 12:10 PM,,,,,1.1.0.M1,,,,,,,0,,,,,"{{RepositoryEntityController}} sets the HTTP status code to {{201 Created}}. Nevertheless, the response returned is {{200 OK}}. I am assuming this is due to the fact that the status code is buried in the {{JsonResponse}} return value but cannot be set in the according {{HttpMessageConverter}}. 

I assume this is triggered as {{jsonpCreateNewEntity(…)}} of the {{RepositoryEntityController}} is consuming {{application/json}}, which it probably shouldn't and rather consume {{application/javascript}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-03-06 12:10:08.263,33725,issuemaster(issuemaster),,"0|i0635r:",35550,33427,,,,,,,,,,,,,,"06/Mar/13 12:10 PM;jbrisbin;Fixed in the latest snapshots.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#450|https://github.com/spring-projects/spring-data-rest/issues/450]. ",,,,,,,,,,,,,,,,,,,,,,
JSONP rendered by default,DATAREST-63,47140,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Complete,jbrisbin,olivergierke,olivergierke,23/Jan/13 12:55 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,06/Mar/13 12:11 PM,,,,,1.1.0.M1,,,,,,,0,,,,,If no {{Accept}} header is set JSONP is returned by default.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-01-23 04:43:38.136,33724,issuemaster(issuemaster),,"0|i0635j:",35549,33426,,,,,,,,,,,,,,"23/Jan/13 4:43 AM;jbrisbin;Running the {{spring-data-rest-example}} application included in the {{spring-data-rest}} codebase and issuing a GET to the root like this: {{curl -v -H ""Accept: "" http://localhost:8080/}} gives me back {{application/json}}. This creates a GET with no {{Accept}} header at all.

If an {{Accept}} header is sent that includes a list of acceptable types like what gets sent automatically by a browser (which includes types like {{text/html}}, {{application/javascript}} and the like), I could see an order issue kicking in that javascript was being preferred because it was the only type in the list that could be provided.

At any rate, JSONP should probably only be selected only if {{application/javascript}} is expected *and* the proper query parameter is present.","23/Jan/13 6:11 AM;olivergierke;Steps to reproduce:

1. {{git clone https://github.com/olivergierke/spring-restbucks.git}}
2. {{git checkout sd-rest-next}}
3. {{mvn jetty:run}}
4. {{curl -v http://localhost:8080/orders/1}}

{noformat}
* About to connect() to localhost port 8080 (#0)
*   Trying ::1...
* connected
* Connected to localhost (::1) port 8080 (#0)
> GET /orders/1 HTTP/1.1
> User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5
> Host: localhost:8080
> Accept: */*
> 
< HTTP/1.1 200 OK
< Content-Length: 214
< Content-Type: application/javascript
< Server: Jetty(8.1.8.v20121106)
< 
callback({
  ""orderedDate"" : 1358950027760,
  ""status"" : ""PAYMENT_EXPECTED"",
  ""location"" : ""TAKE_AWAY"",
  ""items"" : null,
  ""links"" : [ {
    ""rel"" : ""self"",
    ""href"" : ""http://localhost:8080/orders/1""
  } ]
* Connection #0 to host localhost left intact
});* Closing connection #0
{noformat}

5. {{curl -v -H ""Accept: "" http://localhost:8080/orders/1}}

{noformat}
* About to connect() to localhost port 8080 (#0)
*   Trying ::1...
* connected
* Connected to localhost (::1) port 8080 (#0)
> GET /orders/1 HTTP/1.1
> User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5
> Host: localhost:8080
> 
< HTTP/1.1 200 OK
< Content-Length: 214
< Content-Type: application/javascript
< Server: Jetty(8.1.8.v20121106)
< 
callback({
  ""orderedDate"" : 1358950027760,
  ""status"" : ""PAYMENT_EXPECTED"",
  ""location"" : ""TAKE_AWAY"",
  ""items"" : null,
  ""links"" : [ {
    ""rel"" : ""self"",
    ""href"" : ""http://localhost:8080/orders/1""
  } ]
* Connection #0 to host localhost left intact
});* Closing connection #0
{noformat}

6. {{curl -v -H ""Accept: application/javascript"" http://localhost:8080/orders/1}}

{noformat}
* About to connect() to localhost port 8080 (#0)
*   Trying ::1...
* connected
* Connected to localhost (::1) port 8080 (#0)
> GET /orders/1 HTTP/1.1
> User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5
> Host: localhost:8080
> Accept: application/json
> 
< HTTP/1.1 200 OK
< Content-Type: application/json
< Transfer-Encoding: chunked
< Server: Jetty(8.1.8.v20121106)
< 
{
  ""orderedDate"" : 1358950027760,
  ""status"" : ""PAYMENT_EXPECTED"",
  ""location"" : ""TAKE_AWAY"",
  ""items"" : null,
  ""links"" : [ {
    ""rel"" : ""self"",
    ""href"" : ""http://localhost:8080/orders/1""
  } ]
* Connection #0 to host localhost left intact
}* Closing connection #0
{noformat}","23/Jan/13 6:19 AM;jbrisbin;Odd that you're seeing a completely different behavior than I am. If you set a breakpoint here [1] what does the {{acceptType}} look like?

[1] - https://github.com/SpringSource/spring-data-rest/blob/master/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/RepositoryRestHandlerMapping.java#L66","23/Jan/13 6:36 AM;olivergierke;The {{RepositoryRestHandlerMapping}} does not get invoked. If you want to play with a test case, have a look at {{PaymentProcessIntegrationTest}} and remove the {{….accept(MediaType.APPLICATION_JSON)}} in {{processExistingOrder(…)}} which I had to add manually to make the test case succeed.","06/Mar/13 12:11 PM;jbrisbin;Removed JSONP support entirely until that functionality is implemented by a Filter.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#449|https://github.com/spring-projects/spring-data-rest/issues/449]. ",,,,,,,,,,,,,,,,,,
NullPointerException in RepositoryEntityController,DATAREST-62,47139,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Complete,jbrisbin,olivergierke,olivergierke,23/Jan/13 12:49 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,06/Mar/13 12:19 PM,,,,,1.1.0.M1,,,,,,,0,,,,,"Steps to reproduce:

1. {{git clone https://github.com/olivergierke/spring-restbucks.git}}
2. {{git checkout sd-rest-next}}
3. {{mvn jetty:run}}
4. Run REST Shell
5. {{discover}}
6. {{follow payment}}
7. {{discover}} -> {{NullPointerException}}

{noformat}
2013-01-23 09:45:39,305 ERROR a.rest.webmvc.RepositoryEntityController: 206 - null
java.lang.NullPointerException: null
	at org.springframework.data.rest.webmvc.RepositoryEntityController.listEntities(RepositoryEntityController.java:91) ~[spring-data-rest-webmvc-1.1.0.BUILD-SNAPSHOT.jar:na]
	at org.springframework.data.rest.webmvc.RepositoryEntityController.listEntitiesCompact(RepositoryEntityController.java:143) ~[spring-data-rest-webmvc-1.1.0.BUILD-SNAPSHOT.jar:na]
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-03-06 12:19:42.215,33723,issuemaster(issuemaster),,"0|i0635b:",35548,33425,,,,,,,,,,,,,,"23/Jan/13 6:13 AM;olivergierke;After some further playing with it, this is probably related to the fact that {{@RestResource(exported = false}} is not considered during the rendering of the home controller. The {{PaymentRepository}} is in fact annotated with that annotation, so it shouldn't be exposed in the first place. Still, accessing a URL for a non-exposed repository shouldn't lead to a {{NullPointerException}} but a {{404 Not Found}}.","06/Mar/13 12:19 PM;jbrisbin;Testing with the latest snapshots, this gives a 404 now instead of an error.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#448|https://github.com/spring-projects/spring-data-rest/issues/448]. ",,,,,,,,,,,,,,,,,,,,,
Error exposing multiple EMF with SD Rest,DATAREST-52,45761,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Cannot Reproduce,,jhiemer,jhiemer,17/Oct/12 2:06 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,08/Jun/16 4:18 PM,1.0.0.RC3,,,,,,,,,,,6,,,,,"When trying expose multiple EMFs with SD Rest, the RepositoryExporterServlet is not able to choose between the different EMFs. Stacktrace is attached. Creating a customJpaRespositoryExporter leads to a conversion problem between Hibernate and JPA, which does not occur, when using one repository with the same EMF.",all,,,,,,,,,,,,,,,,,,,,,,,,,"17/Oct/12 2:06 AM;jhiemer;stacktrace.txt;https://jira.spring.io/secure/attachment/20558/stacktrace.txt",,,,,,2016-06-08 16:18:00.387,32685,issuemaster(issuemaster),,"0|i05wrb:",34513,32385,,,,,,,,,,,,,,"26/Oct/12 7:19 AM;jhiemer;Hi Jon,
any update on this?","07/Nov/13 11:52 AM;jhiemer;This seems to be resolved a long time ago.","08/Jun/16 4:18 PM;olivergierke;Resolving as cannot reproduce as it seems to be fine on current versions.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#439|https://github.com/spring-projects/spring-data-rest/issues/439]. ",,,,,,,,,,,,,,,,,,,,
Unable to add a prefix to the exported repository controller mappings in an existing MVC application,DATAREST-51,45754,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,olivergierke,amachado,amachado,16/Oct/12 6:46 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,20/Jan/15 4:18 AM,1.0.0.RC3,,,,,,,,,,,2,,,,,"In a existing Spring MVC application, I'd like to prefix all my exported repositories with a ""/api/crud"" prefix.

I've overridden the standard REST configuration as:

import br.com.fromtis.fidc.report.rest.controller.CustomJsonSchemaController;
import br.com.fromtis.fidc.report.rest.controller.CustomRepositoryRestController;
import org.springframework.context.annotation.Bean;
import org.springframework.data.rest.webmvc.RepositoryRestMvcConfiguration;

public class CustomRepositoryRestMvcConfiguration extends RepositoryRestMvcConfiguration {

    @Bean
    @Override
    public CustomRepositoryRestController repositoryRestController() throws Exception {
        return new CustomRepositoryRestController();
    }

    @Bean
    @Override
    public CustomJsonSchemaController jsonSchemaController() {
        return new CustomJsonSchemaController();
    }
}

And then created controllers like this:

import org.springframework.data.rest.webmvc.RepositoryRestController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@RequestMapping(value = ""/api/crud"", method = RequestMethod.GET)
public class CustomRepositoryRestController extends RepositoryRestController {
}

and also

import org.springframework.data.rest.webmvc.json.JsonSchemaController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@RequestMapping(value = ""/api/crud"", method = RequestMethod.GET)
public class CustomJsonSchemaController extends JsonSchemaController {
}
I am aware of the ""baseUri"" property in ""RepositoryRestConfig"", but the server URL and port is unknown.

Using the above configuration, I have my repositories exposed.  Then Spring MVC says that there are ambiguous mappings.

java.lang.IllegalStateException: Ambiguous handler methods mapped for HTTP path 'http://localhost:8080/webservices/api/crud/pessoaDao/1': {public org.springframework.http.ResponseEntity org.springframework.data.rest.webmvc.RepositoryRestController.entity(org.springframework.http.server.ServletServerHttpRequest,java.net.URI,java.lang.String,java.lang.String) throws java.io.IOException, public org.springframework.http.ResponseEntity org.springframework.data.rest.webmvc.RepositoryRestController.createOrUpdate(org.springframework.http.server.ServletServerHttpRequest,java.net.URI,java.lang.String,java.lang.String) throws java.io.IOException,java.lang.IllegalAccessException,java.lang.InstantiationException}
    org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:262)
    org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:212)
    org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:1)
    org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:288)
    org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1063)
    org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1048)
    org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:886)
    org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:852)
    org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)
    org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)
    javax.servlet.http.HttpServlet.service(HttpServlet.java:621)
    javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
        ...","Spring MVC 3.1.2, Java 7u7",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2012-10-16 08:09:05.714,32678,issuemaster(issuemaster),,"0|i05wpr:",34506,32378,https://github.com/SpringSource/spring-data-rest/issues/42,,55 - Evans SR2,,,,,,,,,,,"16/Oct/12 8:09 AM;jbrisbin;The problem with this approach is that there's a component that checks the first segment of the URL for an exported Repository by that name. The RepositoryRestHandlerMapping.lookupHandlerMethod() method would need to be overridden and the repository name check tweaked for this to work. What's happening now is that this component is passing on the dispatching to somebody else because it doesn't find a Repository exported with the name ""api"".","17/Dec/14 2:55 PM;gregturn;The proper way to change the baseURI is as follows:

{code}
import java.net.URI;

import org.springframework.context.annotation.Configuration;
import org.springframework.data.rest.core.config.RepositoryRestConfiguration;
import org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration;

/**
 * This subclass of {@link org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration}
 * is used to replace the baseUri of the hypermedia service.
 */
@Configuration
public class CustomizedRestMvcConfiguration extends RepositoryRestMvcConfiguration {

	@Override
	public RepositoryRestConfiguration config() {
		RepositoryRestConfiguration config = super.config();
		config.setBaseUri(URI.create(""/api""));
		return config;
	}
}
{code}

With this code in place, you can then import it into your configuration using:
{code}
@Import(CustomizedRestMvcConfiguration.class)
{code}

Given that this is not a bug, suggest closing this ticket out.","20/Jan/15 4:18 AM;olivergierke;Going forward, prefer using {{setBasePath(…)}} as {{setBaseUri(…)}} will be deprecated with 2.3.0. Also if you're using Spring Boot the custom configuration class is not strictly necessary. Simply configure {{spring.data.rest.basePath}} property in {{application.properties}}.

Resolving as fixed but not assigning a version as I am not really able to track down the first fixed version anymore.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#438|https://github.com/spring-projects/spring-data-rest/issues/438]. ",,,,,,,,,,,,,,,,,,,,
Properties with null values are always omitted from the JSON,DATAREST-50,45567,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Fixed,gregturn,greg@madeofmeat.org,greg@madeofmeat.org,26/Sep/12 5:49 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,12/Feb/14 7:13 AM,1.0.0.RC3,,,,2.0 GA (Codd),,,,,,,0,,,,,"When I export a repository using {{RepositoryRestMvcConfiguration}} the JSON representation I get back from the exported resources omits any property whose value is null.

What I want:

{code:javascript}
{
  ""links"": ...snip...,
  ""content"": [
    {
      ""links"": ...snip...,
      ""content"": [
        ""someProperty"": ""non null value"",
        ""someOtherProperty"": null
      ]
    }
  ]
}
{code}

What I actually get:

{code:javascript}
{
  ""links"": ...snip...,
  ""content"": [
    {
      ""links"": ...snip...,
      ""content"": [
        ""someProperty"": ""non null value"",
      ]
    }
  ]
}
{code}

I think this is because properties with null values are always omitted when converting from an object to a resource. See {{EntityToResourceConverter}}'s {{convert}} method, which contains this snippet:

{code:java}
if(null != (val = attrMeta.getValue().get(source))) {
  entityDto.put(name, val);
}
{code}

This behavior may sometimes be desirable but it seems incorrect for the framework to assume that it is _always_ desirable.

It would be great if there was a way to specify the desired handling of null property values. A configuration option (somewhere) seems ideal; a hook method to override would also work.

I _could_ replace the entire {{EntityToResourceConverter}} with a custom converter but this is a lot of framework code to branch just to remove one if statement.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2013-04-18 21:21:35.15,32488,issuemaster(issuemaster),https://github.com/spring-projects/spring-data-rest/pull/132,"0|i004tr:",789,32188,,,43 - Babbage SR3,,,,,,,,,,,"18/Apr/13 9:21 PM;rrokka;Add this bean It will work

	<bean
		class=""org.springframework.beans.factory.config.MethodInvokingFactoryBean"">
		<property name=""targetObject"" ref=""jacksonSerializationConfig"" />
		<property name=""targetMethod"" value=""setSerializationInclusion"" />
		<property name=""arguments"">
			<list>
				<value type=""org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion"">NON_NULL</value>
			</list>
		</property>
Thanks,
R Ramarajan.India

	</bean>","03/Feb/14 5:33 PM;gregturn;Test case to demonstrate this issue is moot","03/Feb/14 5:33 PM;gregturn;This issue no longer exists. But I coded a pull request that is one additional test case proving nulls work fine in JSON payloads of properties.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#437|https://github.com/spring-projects/spring-data-rest/issues/437]. ",,,,,,,,,,,,,,,,,,,,
Since latest build relations Failed to convert from type de.model.environment.Provider_$$_javassist_6 to type org.springframework.hateoas.Resource,DATAREST-49,45425,Bug,Closed,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Blocker,Fixed,olivergierke,jhiemer,jhiemer,14/Sep/12 3:21 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,29/Dec/13 12:35 PM,1.0.0.RC3,,,,2.0 M1 (Codd),,,,,,,0,,,,,Since the latest update I get an exception for some one-to-many relationships. The error log is attached. Trying to debug I could not find any relevant information. :(,all,,,,,,,,,,,,,,,,,,,,,,,,,"14/Sep/12 3:21 AM;jhiemer;log.txt;https://jira.spring.io/secure/attachment/20493/log.txt",,,,,,2012-09-14 07:09:55.604,32346,issuemaster(issuemaster),,"0|i05upb:",34180,32046,,,,,,,,,,,,,,"14/Sep/12 5:40 AM;jhiemer;Okay, some further information. The classes failing are extending a BaseEntity with @MappedSuperClass for @Id.","14/Sep/12 7:09 AM;jbrisbin;This NPE seems to indicate that the ID is null. It's failing here:

{code}
URI selfUri = buildUri(baseUri, repositoryMetadata.name(), id.toString());
{code}

Is it possible for you to isolate a set of entities that reproduces this behavior? I'll work on this myself, but if you can quickly cut-and-paste a minimal project together in a few minutes that would be very helpful.","14/Sep/12 7:17 AM;jbrisbin;Just tested this situation with no proxy (e.g. straightforward @Entity extends @MappedSuperclass scenario and it seems to work okay. I suspect this has to do with getting the value of the ID from the proxy (or *not* getting it, actually). The problem may be in the line prior to this (43 of EntityToResourceConverter) and how it tries to get the ID from the entity.","14/Sep/12 7:19 AM;jbrisbin;What are you using that would cause it to generate that proxy? I saw javaassist in there but I wasn't sure what was going on exactly.","14/Sep/12 8:59 AM;jhiemer;I am using Hibernate/JPA with the common Spring Data JPA from Oliver. That's all. After removing the @MappedSuperClass it works as it has done before. I think it is a lazy-loading problem. It is failing in lines 1118 and following:

 if(conversionService.canConvert(propVal.getClass(), Resource.class)) {
          r = conversionService.convert(propVal, Resource.class);
        }","15/Sep/12 12:24 AM;jhiemer;My EntityType looks like this:

@Id
@Column(name = ""\""Id\"""")
@Type(type = ""pg-uuid"")
private UUID id = UUID.randomUUID();

Perhaps a problem with the @Type annotation?","01/Oct/13 8:57 AM;olivergierke;Is this still valid for 2.0.0.BUILD-SNAPSHOT?","15/Oct/13 3:04 AM;jhiemer;No that works now. ","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#436|https://github.com/spring-projects/spring-data-rest/issues/436]. ",,,,,,,,,,,,,,,
Executing /search/findEntityById?id=823892389 with x-spring-data-compact+json does not return any value.,DATAREST-48,45407,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Complete,jbrisbin,jhiemer,jhiemer,13/Sep/12 5:17 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,13/Sep/12 12:00 PM,1.0.0.RC2,,,,1.0.0.RC3,,,,,,,0,,,,,"When I try to execute a search with the following URL: 
http://localhorst:8080/rest/entity/search/findEntityById?id=823892389 setting Accept : application/x-spring-data-compact+json the result is:
{
  ""links"" : [ ],
  ""content"" : [ ]
}

Doing the exactly same request with 
Accept : application/json returns
{
  ""links"" : [ ],
  ""content"" : [ {
    ""links"" : [  {
      ""rel"" : ""self"",
      ""href"" : ""http://localhost:8080/rest/entity/453234243""
    },  ],
    ""enabled"" : false,
    ....
  } ]
}

In the previous build it worked. ",all,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2012-09-13 06:27:25.109,32328,issuemaster(issuemaster),,"0|i05ulj:",34163,32028,,,,,,,,,,,,,,"13/Sep/12 6:27 AM;jbrisbin;New snapshots available with a fix for this bug.

Thanks a bunch for letting me know!","13/Sep/12 12:00 PM;jbrisbin;Should be fixed in the latest RC.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#435|https://github.com/spring-projects/spring-data-rest/issues/435]. ",,,,,,,,,,,,,,,,,,,,,
"POST fails, when links : null",DATAREST-47,45333,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Blocker,Complete,jbrisbin,jhiemer,jhiemer,07/Sep/12 3:54 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,13/Sep/12 12:00 PM,1.0.0.RC2,,,,1.0.0.RC3,,,,,,,0,rest,update,,,"Since the last update fixing the update problem with links, there is a new error. Doing a POST with empty links results in a:

org.springframework.http.converter.HttpMessageNotReadableException: Property 'links' is not of array type. Either eliminate this property from the document or make it an array.

Adding the links like this: 
entity.setLinks(new ArrayList<LinkType>());
and it works, without any issues. 

From my point of view it should also work with Links : null.",all,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2012-09-11 06:34:21.915,32256,issuemaster(issuemaster),,"0|i05u5r:",34092,31956,,,,,,,,,,,,,,"11/Sep/12 6:34 AM;jbrisbin;New snapshots are available that will also ignore null values in the ""links"" property.","12/Sep/12 12:57 AM;jhiemer;Yep, works again. Thanks!","13/Sep/12 12:00 PM;jbrisbin;Should be fixed in the latest RC.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#434|https://github.com/spring-projects/spring-data-rest/issues/434]. ",,,,,,,,,,,,,,,,,,,,
POST with Accept: application/x-spring-data-compact+json returns Content-Type: application/json,DATAREST-46,45249,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Critical,Fixed,olivergierke,jhiemer,jhiemer,01/Sep/12 12:41 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,07/Apr/15 8:09 AM,1.0.0.RC2,,,,,,,,,,,0,,,,,"When trying to create an object via POST and setting the Accept Header to application/x-spring-data-compact+json returns Content-Type: application/json instead. 
Problem here is, that the returned datatype is not parseable by Jackson Mapper if returnBody=true is set.",all,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2012-09-05 06:25:28.69,32171,issuemaster(issuemaster),,"0|hzzzx5:zi",34007,31871,,,55 - Evans SR2,56 - Fowler RC1,56 - Fowler GA,57 - Fowler Aftermath,,,,,,,,"02/Sep/12 10:03 AM;jhiemer;The problem is located in these lines: https://gist.github.com/3601503 (1819 and following...)

MediaType acceptType = config.getDefaultMediaType();

Better would be something like:

if (request.getHeaders().getAccept() != null) {
  MediaType acceptType = request.getHeaders().getAccept();
} else {
  MediaType acceptType = config.getDefaultMediaType();
}

What do you think?","05/Sep/12 6:25 AM;jbrisbin;application/x-spring-data-compact+json content will only be returned on queries and listing entities. If returnBody=true, then the entity is returned inline as it would on a GET. It wouldn't be accurate to return a Content-Type of compact if that's what's requested but not return the compact type JSON. If anything, it should be a Not Acceptable response. It's not doing that now because, to catch the case of the wildcard Accept (or no Accept), I'm defaulting to the JSON converter and an application/json content-type. But maybe it should be: if wildcard or no accept type, default to JSON, otherwise send a 406.","05/Sep/12 6:34 AM;jhiemer;From my point of view it makes not to much sense returning a 406 in case of request with Accept-Type : application/x-spring-data-compact+json as it makes things nontransparent. Why should Accept-Type : application/x-spring-data-compact+json be available in the other cases, but exactly not in this one? Stretching it further to other implementations like XML support. Would you also return JSON or 406 in this case? I am not sure if this is a valid path to go...","05/Sep/12 6:46 AM;jbrisbin;The compact type is only used when listing entities, to keep from inlining the properties of the entity. it doesn't make sense to return a compact type when displaying a single entity. The returnBody=true is a convenience so one doesn't have to turn right around and do a GET on the newly-created resource. Doing a GET with ""Accept: application/x-spring-data-compact+json"" on a single entity will also return just application/json.

Currently, JSON is the only supported representation. If/When XML support is added, quite a few things will necessarily have to change to accommodate that. But we certainly won't return JSON if XML is expected. But in this case, we only support JSON (or nothing), so it's easy to default to that.","05/Sep/12 6:54 AM;jhiemer;Ok, I see your point. In my case, using the x-spring-data-compact+json it is rather bad, because I would need this additional request, but if you insist on it as the preferred way, I need to accept that.","17/Dec/14 2:46 PM;gregturn;This issue is overcome by events. Creating new entities via POST with Accept:application/x-spring-data-compact+json no longer results in a response body, but instead a Location header to the new entity. Suggest closing the ticket as WON'T FIX.","07/Apr/15 8:09 AM;olivergierke;This should be fixed through a fix for another ticket, feel free to re-open if you still see an issue with this.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#433|https://github.com/spring-projects/spring-data-rest/issues/433]. ",,,,,,,,,,,,,,,,
No IDs in href of objects displayed,DATAREST-45,45238,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Blocker,Complete,jbrisbin,jhiemer,jhiemer,31/Aug/12 7:11 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,05/Sep/12 6:09 AM,1.0.0.RC2,,,,1.0.0.RC3,,,,,,,0,,,,,Browsing to: http://localhost:8080/rest/sla results in the gist.,all,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2012-08-31 07:36:48.061,32160,issuemaster(issuemaster),,"0|i05tkf:",33996,31860,https://gist.github.com/3549377,,,,,,,,,,,,,"31/Aug/12 7:36 AM;jbrisbin;Yikes! :( This is a bug caused by the recent changes integrating Spring HATEOAS. I'm working on a fix as we speak. Sorry about that!","31/Aug/12 7:54 AM;jhiemer;Works again. Can be closed, thanks! :-)","05/Sep/12 6:09 AM;jbrisbin;Fixed bug introduced by integrating with Spring HATEOAS.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#432|https://github.com/spring-projects/spring-data-rest/issues/432]. ",,,,,,,,,,,,,,,,,,,,
Issue on Entity without @Version attribute when using Eclipselink as provider,DATAREST-44,45231,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Complete,jbrisbin,krapp,krapp,31/Aug/12 12:31 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,13/Sep/12 12:01 PM,1.0.0.RC2,,,,1.0.0.RC3,,,,,,,1,,,,,"If using EclipseLink as persistence provider, the exporter fails with this error:
""java.lang.IllegalArgumentException: No @Version attribute exists on the identifiable type""

I have isolated the error at line 35 of JpaEntityMetadata class, seems that the metod entityType.getVersion(Long.class) fails in eclipselink if no @Version is defined.

In attachment the log file","Tomcat 7
Java 6
EclipseLink 2.4.0",,,,,,,,,,,,,,,,,,,,,,,,,"31/Aug/12 12:31 AM;krapp;bug.log;https://jira.spring.io/secure/attachment/20401/bug.log","31/Aug/12 12:40 AM;krapp;sample.zip;https://jira.spring.io/secure/attachment/20402/sample.zip",,,,,2012-09-13 12:01:50.136,32153,issuemaster(issuemaster),,"0|i05tiv:",33989,31853,,,,,,,,,,,,,,"31/Aug/12 12:40 AM;krapp;Sample project","13/Sep/12 12:01 PM;jbrisbin;Should be fixed in the latest RC.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#431|https://github.com/spring-projects/spring-data-rest/issues/431]. ",,,,,,,,,,,,,,,,,,,,,
Updating relationships for one-to-one is not implemented,DATAREST-42,45190,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Works as Designed,jbrisbin,jhiemer,jhiemer,28/Aug/12 10:26 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,05/Sep/12 6:11 AM,1.0.0.RC2,,,,,,,,,,,0,list,maps,relationships,updating,"When trying to update a one-to-one relationship it fails with an error. The reason is, that ResponseEntity<?> handle(Object linkedEntity) does not handle single objects and only list/maps.",Latest snapshot with Hibernate/JPA,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2012-08-31 08:17:28.341,32112,issuemaster(issuemaster),,"0|i05t9r:",33948,31812,https://gist.github.com/3507073,,,,,,,,,,,,,"31/Aug/12 8:10 AM;jhiemer;Any update, why this functionality has been removed?","31/Aug/12 8:17 AM;jbrisbin;Line 1227 in RepositoryRestController handles setting an attribute on the entity using a PUT. It's in the ""else"" section of the handler if an attribute is not a Collection, Set, or Map.

POST, however, is not supported for 1-to-1.","02/Sep/12 2:01 AM;jhiemer;That's right. Put works, issue can be closed. Thanks!","05/Sep/12 6:11 AM;jbrisbin;Only PUT is supported for 1-to-1 relationships.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#429|https://github.com/spring-projects/spring-data-rest/issues/429]. ",,,,,,,,,,,,,,,,,,,
No update on objects,DATAREST-41,45189,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Critical,Complete,jbrisbin,jhiemer,jhiemer,28/Aug/12 10:16 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,05/Sep/12 6:07 AM,1.0.0.RC2,,,,1.0.0.RC3,,,,,,,0,,,,,"When I try to update an object, the only think happening is a select of the persisted object in the database. The put object itself does not get updated.

The SELECT statement occurs, during the execution of readIncoming(request, incomingMediaType, domainType).","Latest Snapshot, with Hibernate/JPA ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2012-08-31 07:50:50.021,32111,issuemaster(issuemaster),,"0|i05t9j:",33947,31811,https://gist.github.com/3507042,,,,,,,,,,,,,"31/Aug/12 7:12 AM;jhiemer;After getting the latest snapshot the error changed to:

https://gist.github.com/3549384

The converters are registered (text/uri-list, application/json and
application/x-spring-data-compact+json) and entities were not changed.","31/Aug/12 7:50 AM;jbrisbin;Is there any more information you can give on this? The input being used or any more of the traceback on why the input is not being read? There's an underlying error somewhere that's causing the failure but it's not apparent from the gist what that underlying error is.","31/Aug/12 7:53 AM;jhiemer;The error posted on 31/Aug/12 7:12 AM is resolved since the latest build. But the previous one still occurs. Which information do you need?","03/Sep/12 1:20 AM;jhiemer;Jon, 
I kept on analyzing the error and found some interesting results. When I remove all links from the entity (""links"" : [ ]), the update is executed. When doing a PUT with links, then the fields are not updated. Any idea why?
","04/Sep/12 7:19 AM;jbrisbin;Are you updating a top-level object (/person/1) or a linked entity (/person/1/address)? Nothing in the links property is read in incoming data. You have to either update the relationships directly or include links in the proper places. For example:

{CODE}
PUT /people/1
Content-Type: application/json

{
	""name"": ""John Doe"",
	""addresses"": [
		{""rel"": ""address.Address"", ""href"": ""http://localhost:8080/address/1""}
	]
}
{CODE}

I don't see why it would fail if there are links, however.","04/Sep/12 8:13 AM;jbrisbin;Found the bug. It's in the reading of JSON. I'm ignoring the ""links"" stuff but not advancing the parser past the value of that property, so it's not getting to the properties. That's why it works when the ""links"" property is empty. Working on a fix right now.","05/Sep/12 6:07 AM;jbrisbin;Fixed a bug where the value of the links property wasn't being skipped when reading the incoming JSON. Added code to advance the parser past that section.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#428|https://github.com/spring-projects/spring-data-rest/issues/428]. ",,,,,,,,,,,,,,,,
Listing relations with Accept:application/x-spring-data-compact-json does not contain self link.,DATAREST-38,44940,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Complete,jbrisbin,jhiemer,jhiemer,15/Aug/12 8:36 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,05/Sep/12 6:29 AM,1.0.0.RC2,,,,1.0.0.RC3,,,,,,,0,,,,,"When loading a relation like this: 

http://localhost:8080/rest/entity/6bf64863-2c1f-4661-b54b-7611971b36aa/relation/a6ae6a94-31f9-47a5-9904-329477ab54d0

with: 

""application/x-spring-data-compact+json"" as Accept-Type, the result does not contain a self link. The same for ""application/json"" as Accept-Type.

This worked before and also works for:

http://localhost:8080/rest/entity/ etc.",all,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,,,,,,,,,,,2012-08-15 12:52:58.933,31967,issuemaster(issuemaster),,"0|i05sdz:",33805,31667,,,,,,,,,,,,,,"15/Aug/12 12:52 PM;jbrisbin;The Content-Location header actually contains that information. The Content-Location header is used for a situation just like this, where a resource is actually rooted at another URL. It wouldn't be hard to add a self link to the body, though, as I'm already generating that link (at the moment, though, I'm sticking it in the Content-Location header).","15/Aug/12 1:03 PM;jhiemer;Okay, that makes sense to me. From my point of view it would be more straightforward to have it in both or in a none. Or is there any specification containing this behavior?","15/Aug/12 1:22 PM;jbrisbin;The HTTP spec discusses this a little: [http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.14]

But like I said, it wouldn't be hard to provide it in both locations.","16/Aug/12 12:16 AM;jhiemer;After doing some tests with other calls I would sum it like this:

Getting the data from the header works. But then it should work in a consistent way. So if I call the entity directly /entity/8989348934 it should contain a SELF link AND/OR the HEADER entry (here the HEADER is missing). For a relation call /entity/9898328923/relation/92392390 this should be the same (here the SELF link is missing). 

From the Javascript client side perspective I would always provide a SELF link as reading out the HEADER data in Javascript is more than a pain. 

So what I would suggest, although it is some redundancy is: for the Java guys put it into the HEADER, for the Javascript guys into the SELF link. :-)
","20/Aug/12 6:57 AM;jbrisbin;I simply added a self link, so that information is now available in the Content-Location header and as a link.","05/Sep/12 6:29 AM;jbrisbin;The self link now appears in both the Content-Location header and on the self link in the document.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#423|https://github.com/spring-projects/spring-data-rest/issues/423]. ",,,,,,,,,,,,,,,,,
Page metadata not exposed anymore,DATAREST-36,44806,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Works as Designed,jbrisbin,olivergierke,olivergierke,07/Aug/12 12:12 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,05/Sep/12 6:32 AM,,,,,,,,,,,,0,,,,,"The recent changes seem to have dropped the pagination metadata exposed for repositories implementing {{PagingAndSortingRepository}}. In the Spring Data book project the call to {{http://localhost:8080/product}} returns the following:

{code:javascript}
{ ""links"" : [ {
    ""rel"" : ""product.search"",
    ""href"" : ""http://localhost:8080/product/search""
  } ],
  ""content"" : [ {
    ""links"" : [ {
      ""rel"" : ""self"",
      ""href"" : ""http://localhost:8080/product/1""
    } ],
    ""price"" : 499.00,
    ""description"" : ""Apple tablet device"",
    ""name"" : ""iPad"",
    ""attributes"" : {
      ""connector"" : ""socket""
    }
  }, {
    ""links"" : [ {
      ""rel"" : ""self"",
      ""href"" : ""http://localhost:8080/product/2""
    } ],
    ""price"" : 1299.00,
    ""description"" : ""Apple notebook"",
    ""name"" : ""MacBook Pro"",
    ""attributes"" : {
    }
  }, {
    ""links"" : [ {
      ""rel"" : ""self"",
      ""href"" : ""http://localhost:8080/product/3""
    } ],
    ""price"" : 49.00,
    ""description"" : ""Dock for iPhone/iPad"",
    ""name"" : ""Dock"",
    ""attributes"" : {
      ""connector"" : ""plug""
    }
  } ]
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2012-08-07 06:15:01.979,31850,issuemaster(issuemaster),,"0|i05rpj:",33695,31550,,,,,,,,,,,,,,"07/Aug/12 6:15 AM;jbrisbin;The ProductRepository interface in the book project doesn't descend from PagingAndSortingRepository but from CrudRepository (unless you've changed it locally and the latest in git doesn't reflect that).

There is an instanceof PagingAndSortingRepository check to see whether or not to add the paging stuff and it seems to work in my tests.","08/Aug/12 5:57 AM;olivergierke;Touché! Feel free to close as invalid.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#420|https://github.com/spring-projects/spring-data-rest/issues/420]. ",,,,,,,,,,,,,,,,,,,,,
Could not write JSON: Infinite recursion (StackOverflowError) when trying to do a PUT,DATAREST-33,44763,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Blocker,Complete,jbrisbin,jhiemer,jhiemer,01/Aug/12 11:25 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,13/Sep/12 12:15 PM,1.0.0.RC2,,,,1.0.0.RC3,,,,,,,0,PUT,StackOverflowError,,,"When I do a put operation on any entity I always get a Could not write JSON: Infinite recursion (StackOverflowError) Exception. A sample entity I submit looks like this:

{
""enabled"": ""true"",
""price"": ""14"",
""description"": ""None till yet, running fine, without any issues."",
""name"": ""gold-fast"",
""_links"": [
{
""rel"": ""sla.Sla.platform"",
""href"": ""http://192.168.125.196:8080/evoila-rest/sla/27f923f5-32fe-4b96-8c39-63e3c9c4ea94/platform""
},
{
""rel"": ""sla.Sla.slaLevel"",
""href"": ""http://192.168.125.196:8080/evoila-rest/sla/27f923f5-32fe-4b96-8c39-63e3c9c4ea94/slaLevel""
},
]
}

And the stacktrace is appended in the attachement. ",Java build 1.7.0_01-b08 with with Data REST 1.0.0.RC2,,,,,,,,,,,,,,,,,,,,,,,,,"01/Aug/12 11:25 PM;jhiemer;untitled.txt;https://jira.spring.io/secure/attachment/20137/untitled.txt",,,,,,2012-08-02 06:17:56.296,31795,issuemaster(issuemaster),,"0|i05rfz:",33652,31495,,,,,,,,,,,,,,"02/Aug/12 1:00 AM;jhiemer;Hi,
I digged into the code and found the problem. Line 860 and following: 

publishEvent(new BeforeSaveEvent(entity));
Object savedEntity = repo.save(entity);
publishEvent(new AfterSaveEvent(savedEntity));

return negotiateResponse(request, HttpStatus.NO_CONTENT, new HttpHeaders(), (returnBody ? savedEntity : null));

According to the get method it should be parsed before like this:

publishEvent(new BeforeSaveEvent(entity));
Object savedEntity = repo.save(entity);
publishEvent(new AfterSaveEvent(savedEntity));

Map<String, Object> entityDto = extractPropertiesLinkAware(repoMeta.rel(),
                                                               savedEntity,
                                                               repoMeta.entityMetadata(),
                                                               buildUri(baseUri, repository, id));

return negotiateResponse(request, HttpStatus.NO_CONTENT, new HttpHeaders(), (returnBody ? entityDTO : null));","02/Aug/12 6:17 AM;jbrisbin;Good catch! :) This is indeed a bug in not calling {{extractPropertiesLinkAware()}} on the savedEntity. I'm halfway through a change that I'll hope to be finished with today so I'm hoping I can get this fix in today.","02/Aug/12 6:40 AM;jhiemer;Great Jon, thanks a lot! :-)","10/Aug/12 2:42 AM;jhiemer;Jon,
any update on this?","10/Aug/12 6:17 AM;jbrisbin;I pushed some new snapshots the other day that are the result of some discussions we've had internally about how to represent links and results, etc... Suffice it to say that this should work now but you might have to make some changes to accommodate key name changes. To make it more consistent we decided to change ""_links"" to ""links"" and ""results"" to ""content"". We also shuffled the paging stuff around a little bit. Other than that, things should be the same and entities should show links where they're supposed to.","15/Aug/12 8:31 AM;jhiemer;Yep, works now.
","13/Sep/12 12:15 PM;jbrisbin;Should be fixed in the latest RC.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#417|https://github.com/spring-projects/spring-data-rest/issues/417]. ",,,,,,,,,,,,,,,,
Query methods expecting complex parameter types not handled correctly,DATAREST-27,44688,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Complete,jbrisbin,olivergierke,olivergierke,26/Jul/12 3:49 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,31/Jul/12 11:46 AM,1.0.0.RC1,,,,1.0.0.RC2,,,,,,,0,,,,,"Assume you have a repository like this:

{code:java}
interface OrderRepository extends CrudRepository<Order, Long> {

  List<Order> findByCustomer(Customer customer);
}
{code}

If the method now gets exposed, how shall one provide the {{Customer}} object for the {{GET}} request? Currently a plain call to

{code}
http://localhost:8080/order/search/findByCustomer
{code}

causes a

{noformat}
java.lang.NullPointerException
	at java.io.StringReader.<init>(StringReader.java:33)
	at org.codehaus.jackson.JsonFactory.createJsonParser(JsonFactory.java:636)
	at org.codehaus.jackson.map.ObjectMapper.readValue(ObjectMapper.java:1863)
	at org.springframework.data.rest.webmvc.RepositoryRestController.query(RepositoryRestController.java:418)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:213)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:96)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:617)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:578)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:923)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:852)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:735)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:848)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:643)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:450)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:131)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:524)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1067)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:377)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:192)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1001)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:129)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:250)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:149)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:111)
	at org.eclipse.jetty.server.Server.handle(Server.java:360)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:454)
	at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:890)
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:944)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:630)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:230)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:77)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:622)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:46)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:603)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:538)
	at java.lang.Thread.run(Thread.java:680)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2012-07-27 04:37:48.493,31719,issuemaster(issuemaster),,"0|i05qzj:",33578,31419,,,,,,,,,,,,,,"27/Jul/12 4:37 AM;wims.tijd;would it not be just to send the json over as in :

invocation.open(""GET"", url, true);
invocation.send(json);","27/Jul/12 11:01 AM;jbrisbin;The latest snapshot includes code to deal with this situation by allowing you to specify a query parameter of the ID of the complex parameter. In your example, adding a query string of ""?customer=1"" would look up the Customer entity with ID ""1"" and use that as the parameter. If the type is not managed by a Repository, then replace the ID value with serialized JSON.

Additionally, it was necessary to add code to enforce putting @Param on query method parameters since abstract classes (including interfaces) do not keep debug information in the bytecode so it isn't possible to use the method parameter name on the interface as the query parameter key. To properly expose the search method you use as an example, you'd need to add @Param(""customer"") to your method parameter.","31/Jul/12 11:46 AM;jbrisbin;Added code to allow you to specify an ID in a query parameter for complex objects managed by a repository. The exporter will look up a managed entity by that ID and use that as the parameter. If the complex object is not managed by a repository, then there should either be a ConversionService converter for that type to turn a String (the URL query string parameter) into that object or you can specify a complex object as a fragment of JSON as the value of the query string parameter. Be sure the JSON is properly URL-encoded, though.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#409|https://github.com/spring-projects/spring-data-rest/issues/409]. ",,,,,,,,,,,,,,,,,,,,
Parameters for executing query methods not checked properly,DATAREST-26,44687,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Complete,jbrisbin,olivergierke,olivergierke,26/Jul/12 3:45 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,31/Jul/12 11:47 AM,1.0.0.RC1,,,,1.0.0.RC2,,,,,,,0,,,,,"Calling a finder method without the parameters needed seems to result in handling {{null}} values into the query method execution:

{noformat}
org.springframework.dao.DataRetrievalFailureException: nested exception is java.lang.reflect.InvocationTargetException
	at org.springframework.data.rest.webmvc.RepositoryRestController.query(RepositoryRestController.java:488)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:213)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:96)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:617)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:578)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:923)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:852)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:735)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:848)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:643)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:450)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:131)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:524)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1067)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:377)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:192)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1001)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:129)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:250)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:149)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:111)
	at org.eclipse.jetty.server.Server.handle(Server.java:360)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:454)
	at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:890)
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:944)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:630)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:230)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:77)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:622)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:46)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:603)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:538)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.data.rest.webmvc.RepositoryRestController.query(RepositoryRestController.java:426)
	... 41 more
Caused by: org.springframework.dao.InvalidDataAccessApiUsageException: [Assertion failed] - this argument is required; it must not be null; nested exception is java.lang.IllegalArgumentException: [Assertion failed] - this argument is required; it must not be null
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:301)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:106)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:58)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:163)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.data.jpa.repository.support.LockModeRepositoryPostProcessor$LockModePopulatingMethodIntercceptor.invoke(LockModeRepositoryPostProcessor.java:91)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:90)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)
	at $Proxy57.findByDescriptionContaining(Unknown Source)
	... 46 more
Caused by: java.lang.IllegalArgumentException: [Assertion failed] - this argument is required; it must not be null
	at org.springframework.util.Assert.notNull(Assert.java:112)
	at org.springframework.util.Assert.notNull(Assert.java:123)
	at org.springframework.data.jpa.repository.query.ParameterMetadataProvider$ParameterMetadata.prepare(ParameterMetadataProvider.java:156)
	at org.springframework.data.jpa.repository.query.CriteriaQueryParameterBinder.bind(CriteriaQueryParameterBinder.java:68)
	at org.springframework.data.jpa.repository.query.ParameterBinder.bind(ParameterBinder.java:108)
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery$CountQueryPreparer.invokeBinding(PartTreeJpaQuery.java:196)
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery$QueryPreparer.createQuery(PartTreeJpaQuery.java:121)
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.doCreateCountQuery(PartTreeJpaQuery.java:82)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.createCountQuery(AbstractJpaQuery.java:148)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$PagedExecution.doExecute(JpaQueryExecution.java:99)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:55)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:95)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:85)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:313)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:110)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:155)
	... 53 more
{noformat}

The exception in {{ParameterMetadataProvider}} is thrown if someone hands {{null}} into the method massaging the {{String}} parameter for {{Contains}} keywords where piping in {{null}} obviously doesn't make much sense.

The controller should reject {{GET}} requests without the necessary parameters provided.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2012-07-31 11:47:11.293,31718,issuemaster(issuemaster),,"0|i05qzb:",33577,31418,,,,,,,,,,,,,,"31/Jul/12 11:47 AM;jbrisbin;Added more complete checking for query parameters. Bad input will result in a 400 Bad Request with a description of the error as JSON in the body of the response.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#408|https://github.com/spring-projects/spring-data-rest/issues/408]. ",,,,,,,,,,,,,,,,,,,,,,
NullPointerException in DelegatingConversionService,DATAREST-25,44686,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Complete,jbrisbin,olivergierke,olivergierke,26/Jul/12 3:41 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,31/Jul/12 11:47 AM,1.0.0.RC1,,,,1.0.0.RC2,,,,,,,0,,,,,"Steps to reproduce.

1. Have an entity with a repository interface exposing a finder.
2. Start the application with no data
3. Navigate to the finder method (e.g. http://localhost:8080/customer/search/findByEmailAddress)
4. Get {{NullPointerException}} with the following stack trace

{noformat}
2012-07-26 12:40:40.141:WARN:oejs.ServletHandler:/customer/search/findByEmailAddress
java.lang.NullPointerException
	at org.springframework.data.rest.core.convert.DelegatingConversionService.convert(DelegatingConversionService.java:55)
	at org.springframework.data.rest.webmvc.RepositoryRestController.query(RepositoryRestController.java:414)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:213)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:96)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:617)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:578)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:923)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:852)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:735)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:848)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:643)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:450)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:131)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:524)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1067)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:377)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:192)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1001)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:129)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:250)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:149)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:111)
	at org.eclipse.jetty.server.Server.handle(Server.java:360)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:454)
	at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:890)
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:944)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:630)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:230)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:77)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:622)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:46)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:603)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:538)
	at java.lang.Thread.run(Thread.java:680)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2012-07-31 11:47:30.332,31717,issuemaster(issuemaster),,"0|i05qz3:",33576,31417,,,,,,,,,,,,,,"31/Jul/12 11:47 AM;jbrisbin;Added more complete checking for query parameters. Bad input will result in a 400 Bad Request with a description of the error as JSON in the body of the response.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#407|https://github.com/spring-projects/spring-data-rest/issues/407]. ",,,,,,,,,,,,,,,,,,,,,,
Servlet API dependency should be provided scope,DATAREST-24,44684,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Major,Complete,jbrisbin,olivergierke,olivergierke,26/Jul/12 2:55 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,31/Jul/12 11:49 AM,1.0.0.RC1,,,,1.0.0.RC2,,,,,,,0,,,,,"The servlet API dependency should be in scope {{provided}} as it will usually be provided by the container starting the application and an additional Servlet API JAR might cause class loading issues.

Beyond that client projects have to exclude the dependency explicitly if they want to use it with the Servlet API 3.0 for example.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2012-07-31 11:49:56.098,31715,issuemaster(issuemaster),,"0|i05qyn:",33574,31415,,,,,,,,,,,,,,"31/Jul/12 11:49 AM;jbrisbin;Upgraded to servlet 3.0.1 API and made it an optional dependency.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#406|https://github.com/spring-projects/spring-data-rest/issues/406]. ",,,,,,,,,,,,,,,,,,,,,,
Searches which returns null gives NPE,DATAREST-23,44650,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Critical,Complete,jbrisbin,aleksabl,aleksabl,23/Jul/12 11:50 PM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,31/Jul/12 11:48 AM,1.0.0.RC1,,,,1.0.0.RC2,,,,,,,1,,,,,"A search which returns null gives NullPointerException in RepositoryRestController. 

Example stack trace:


java.lang.NullPointerException
	at org.springframework.data.rest.webmvc.RepositoryRestController.query(RepositoryRestController.java:442)
	at org.springframework.data.rest.webmvc.RepositoryRestController$$FastClassByCGLIB$$5ba1a185.invoke(<generated>)
	at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:689)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:80)
	at 
xxx(xxx.java:31)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:621)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:610)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:65)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:161)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:80)
	at 
xxx(xxx.java:26)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:621)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:610)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:65)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:161)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:90)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:622)
	at org.springframework.data.rest.webmvc.RepositoryRestController$$EnhancerByCGLIB$$eb30ada5.query(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:213)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:126)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:96)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:617)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:578)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:923)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:852)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:735)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:848)


A simple fix would be to add a if(null != result) before doing l.add(result) around line 429 in RepositoryRestController",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2012-07-31 11:48:16.862,31681,issuemaster(issuemaster),,"0|i05qr3:",33540,31381,,,,,,,,,,,,,,"31/Jul/12 11:48 AM;jbrisbin;Added code to check for null return values and treat that as an empty result.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#405|https://github.com/spring-projects/spring-data-rest/issues/405]. ",,,,,,,,,,,,,,,,,,,,,,
paging with parameters,DATAREST-21,44454,Bug,Resolved,DATAREST,Spring Data REST,software,olivergierke,,https://github.com/SpringSource/spring-data-rest,Minor,Complete,jbrisbin,wims.tijd,wims.tijd,11/Jul/12 5:49 AM,31/Dec/20 10:29 AM,31/Dec/21 2:58 PM,31/Jul/12 11:49 AM,1.0.0.RC1,,,,1.0.0.RC2,,,,,,,0,,,,,"missing parameter findBy in href .prev and .next


Page<LoanInfo> findByNsn(@Param(""nsn"") String nsn, Pageable pageable);

http://localhost:9090/hateos/loaninfo/search/findByNsn?nsn=2355-DE-004-0342&page=2&limit=5


    {
        ""rel"": ""loaninfo.prev"",
        ""href"": ""http://localhost:9090/hateos/loaninfo/search/findByNsn?page=1&limit=5""
    },
    {
        ""rel"": ""loaninfo.next"",
        ""href"": ""http://localhost:9090/hateos/loaninfo/search/findByNsn?page=3&limit=5""
    }

]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2012-07-11 07:46:13.538,31464,issuemaster(issuemaster),,"0|i05pgf:",33330,31164,,,,,,,,,,,,,,"11/Jul/12 7:46 AM;jbrisbin;Thanks for letting us know. I'll look into this right away.","31/Jul/12 11:49 AM;jbrisbin;Added code to copy URL parameters onto the next/prev links.","31/Dec/20 10:29 AM;issuemaster;Spring Data has moved from Jira to GitHub Issues. This issue was migrated to [spring-projects/spring-data-rest#403|https://github.com/spring-projects/spring-data-rest/issues/403]. ",,,,,,,,,,,,,,,,,,,,,
